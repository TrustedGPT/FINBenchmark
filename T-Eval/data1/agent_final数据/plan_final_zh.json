{
    "155": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoldMarket.get_historical_prices",
                "EconomicData.get_global_indicators",
                "GoldMarket.get_real_time_volume",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoldMarket.get_historical_prices",
                "args": {
                    "start_date": "2018-01-01",
                    "end_date": "2023-01-01"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomicData.get_global_indicators",
                "args": {
                    "indicator_type": "inflation"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "EconomicData.get_global_indicators",
                "args": {
                    "indicator_type": "interest_rates"
                }
            },
            {
                "id": 3,
                "prev": [
                    0
                ],
                "name": "EconomicData.get_global_indicators",
                "args": {
                    "indicator_type": "gdp"
                }
            },
            {
                "id": 4,
                "prev": [
                    1,
                    2,
                    3
                ],
                "name": "GoldMarket.get_real_time_volume",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "historical_prices": "result_from_id_0",
                    "global_indicators": "results_from_id_1_2_3",
                    "real_time_volume": "result_from_id_4"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoldMarket.get_historical_prices', {'name': 'GoldMarket.get_historical_prices', 'description': '获取黄金在过去五年的年度价格数据', 'required_parameters': [{'name': 'start_date', 'type': 'STRING', 'description': '开始日期，格式为YYYY-MM-DD'}, {'name': 'end_date', 'type': 'STRING', 'description': '结束日期，格式为YYYY-MM-DD'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': '过去五年的年度价格数据'}]}], ['EconomicData.get_global_indicators', {'name': 'EconomicData.get_global_indicators', 'description': '获取全球经济指标对黄金价格的影响分析', 'required_parameters': [{'name': 'indicator_type', 'type': 'STRING', 'description': '指标类型，如inflation, interest_rates, gdp'}], 'optional_parameters': [], 'return_data': [{'name': 'indicators', 'description': '全球经济指标数据'}]}], ['GoldMarket.get_real_time_volume', {'name': 'GoldMarket.get_real_time_volume', 'description': '获取黄金的实时交易量', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'volume', 'description': '实时交易量数据'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': '基于历史价格、全球经济指标和实时交易量生成投资策略', 'required_parameters': [{'name': 'historical_prices', 'type': 'STRING', 'description': '历史价格数据'}, {'name': 'global_indicators', 'type': 'STRING', 'description': '全球经济指标数据'}, {'name': 'real_time_volume', 'type': 'STRING', 'description': '实时交易量数据'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '生成的投资策略'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估黄金的投资潜力。首先，请获取黄金在过去五年的年度价格数据。然后，获取全球经济指标对黄金价格的影响分析。接下来，获取黄金的实时交易量。最后，请提供基于这些数据的投资策略。"
            }
        ]
    },
    "100": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EmployeeCompliance.get_training_plan",
                "EmployeeCompliance.get_training_records",
                "EmployeeCompliance.analyze_training_effectiveness",
                "EmployeeCompliance.query_violation_records",
                "EmployeeCompliance.evaluate_training_management"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EmployeeCompliance.get_training_plan",
                "args": {
                    "institution": "XYZ Bank"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EmployeeCompliance.get_training_records",
                "args": {
                    "institution": "XYZ Bank"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EmployeeCompliance.analyze_training_effectiveness",
                "args": {
                    "institution": "XYZ Bank"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "EmployeeCompliance.query_violation_records",
                "args": {
                    "institution": "XYZ Bank",
                    "time_period": "last year"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "EmployeeCompliance.evaluate_training_management",
                "args": {
                    "institution": "XYZ Bank"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EmployeeCompliance.get_training_plan', {'name': 'EmployeeCompliance.get_training_plan', 'description': '获取某金融机构的员工合规培训计划', 'required_parameters': [{'name': 'institution', 'description': '金融机构的名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'training_plan', 'description': '培训计划的详细信息'}]}], ['EmployeeCompliance.get_training_records', {'name': 'EmployeeCompliance.get_training_records', 'description': '获取某金融机构的员工合规培训记录', 'required_parameters': [{'name': 'institution', 'description': '金融机构的名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'training_records', 'description': '培训记录的详细信息'}]}], ['EmployeeCompliance.analyze_training_effectiveness', {'name': 'EmployeeCompliance.analyze_training_effectiveness', 'description': '分析某金融机构的员工合规培训计划的有效性', 'required_parameters': [{'name': 'institution', 'description': '金融机构的名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'effectiveness_analysis', 'description': '培训计划有效性的分析结果'}]}], ['EmployeeCompliance.query_violation_records', {'name': 'EmployeeCompliance.query_violation_records', 'description': '查询某金融机构在过去一年内的员工合规违规记录', 'required_parameters': [{'name': 'institution', 'description': '金融机构的名称', 'type': 'STRING'}, {'name': 'time_period', 'description': '查询的时间段', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'violation_records', 'description': '违规记录的详细信息'}]}], ['EmployeeCompliance.evaluate_training_management', {'name': 'EmployeeCompliance.evaluate_training_management', 'description': '基于培训计划、记录和违规记录，评估某金融机构的员工合规培训管理水平', 'required_parameters': [{'name': 'institution', 'description': '金融机构的名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'management_evaluation', 'description': '培训管理水平的评估结果'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某金融机构的员工合规培训情况。首先，获取该机构的员工合规培训计划和记录。然后，分析这些培训计划的有效性。接着，查询该机构在过去一年内是否有任何员工合规违规记录。最后，基于这些信息，评估该机构的员工合规培训管理水平。"
            }
        ]
    },
    "168": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_ticker_news",
                "SocialMediaAnalytics.get_social_media_discussion",
                "StockMarketAPI.get_stock_price_history",
                "StockMarketAPI.get_real_time_stock_price",
                "InvestorSentimentAnalysis.analyze_investor_sentiment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PolygonFinance.get_ticker_news",
                "args": {
                    "ticker": "FB"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SocialMediaAnalytics.get_social_media_discussion",
                "args": {
                    "ticker": "FB",
                    "time_period": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarketAPI.get_stock_price_history",
                "args": {
                    "ticker": "FB",
                    "time_period": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockMarketAPI.get_real_time_stock_price",
                "args": {
                    "ticker": "FB"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InvestorSentimentAnalysis.analyze_investor_sentiment",
                "args": {
                    "news_data": "PolygonFinance.get_ticker_news",
                    "social_media_data": "SocialMediaAnalytics.get_social_media_discussion",
                    "price_history": "StockMarketAPI.get_stock_price_history",
                    "real_time_price": "StockMarketAPI.get_real_time_stock_price"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['SocialMediaAnalytics.get_social_media_discussion', {'name': 'SocialMediaAnalytics.get_social_media_discussion', 'description': 'Retrieve the discussion volume and sentiment on social media platforms for a given stock ticker over a specified time period.', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The stock ticker symbol.'}, {'name': 'time_period', 'type': 'STRING', 'description': 'The time period for which to retrieve discussions (e.g., 1 year, 6 months).'}], 'optional_parameters': [], 'return_data': [{'name': 'discussion_volume', 'description': 'The volume of discussions.'}, {'name': 'sentiment_score', 'description': 'The sentiment score of the discussions.'}]}], ['StockMarketAPI.get_stock_price_history', {'name': 'StockMarketAPI.get_stock_price_history', 'description': 'Retrieve the historical stock prices for a given ticker over a specified time period.', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The stock ticker symbol.'}, {'name': 'time_period', 'type': 'STRING', 'description': 'The time period for which to retrieve prices (e.g., 1 year, 6 months).'}], 'optional_parameters': [], 'return_data': [{'name': 'price_history', 'description': 'A list of historical prices including date and price.'}]}], ['StockMarketAPI.get_real_time_stock_price', {'name': 'StockMarketAPI.get_real_time_stock_price', 'description': 'Retrieve the current stock price for a given ticker.', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The stock ticker symbol.'}], 'optional_parameters': [], 'return_data': [{'name': 'current_price', 'description': 'The current stock price.'}]}], ['InvestorSentimentAnalysis.analyze_investor_sentiment', {'name': 'InvestorSentimentAnalysis.analyze_investor_sentiment', 'description': 'Analyze the investor sentiment based on news, social media discussions, and stock price data.', 'required_parameters': [{'name': 'news_data', 'type': 'STRING', 'description': 'The API used to retrieve news data.'}, {'name': 'social_media_data', 'type': 'STRING', 'description': 'The API used to retrieve social media data.'}, {'name': 'price_history', 'type': 'STRING', 'description': 'The API used to retrieve historical price data.'}, {'name': 'real_time_price', 'type': 'STRING', 'description': 'The API used to retrieve real-time price data.'}], 'optional_parameters': [], 'return_data': [{'name': 'sentiment_score', 'description': 'The overall sentiment score.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解Facebook股票的投资者情绪。首先，请获取Facebook股票在过去一年内的新闻报道数量。然后，获取Facebook的社交媒体讨论热度。接下来，获取Facebook股票的实时价格波动。最后，请分析这些数据以评估投资者情绪。"
            }
        ]
    },
    "287": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "InvestorData.get_trading_records",
                "DataAnalysis.analyze_trading_data",
                "InvestmentStrategy.generate_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "regret theory in behavioral finance"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InvestorData.get_trading_records",
                "args": {
                    "investor_name": "Warren Buffett",
                    "time_period": "last year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAnalysis.analyze_trading_data",
                "args": {
                    "data": "trading_records",
                    "theory": "regret theory"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentStrategy.generate_strategies",
                "args": {
                    "analysis_results": "regret_theory_analysis"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['InvestorData.get_trading_records', {'name': 'InvestorData.get_trading_records', 'description': 'Retrieve trading records of a specific investor within a given time period', 'required_parameters': [{'name': 'investor_name', 'description': 'name of the investor', 'type': 'STRING'}, {'name': 'time_period', 'description': 'time period for the records', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'trading_records', 'description': 'list of trading records'}]}], ['DataAnalysis.analyze_trading_data', {'name': 'DataAnalysis.analyze_trading_data', 'description': 'Analyze trading data to identify patterns or theories', 'required_parameters': [{'name': 'data', 'description': 'trading data to be analyzed', 'type': 'STRING'}, {'name': 'theory', 'description': 'theory to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': 'results of the analysis'}]}], ['InvestmentStrategy.generate_strategies', {'name': 'InvestmentStrategy.generate_strategies', 'description': 'Generate investment strategies based on analysis results', 'required_parameters': [{'name': 'analysis_results', 'description': 'results of the analysis', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'list of generated investment strategies'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解行为金融学中的后悔理论如何影响投资者决策。首先，请获取关于后悔理论的最新研究报告。然后，获取某知名投资者在过去一年的交易记录数据。接着，分析这些数据中是否存在后悔理论的迹象。最后，基于分析结果，为我提供一些减少后悔理论影响的投资策略。"
            }
        ]
    },
    "522": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GreenFinance.get_basic_concepts",
                "GreenFinance.get_common_methods",
                "GreenFinance.get_success_cases",
                "GreenFinance.get_market_trends",
                "GreenFinance.provide_financing_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GreenFinance.get_basic_concepts",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GreenFinance.get_common_methods",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GreenFinance.get_success_cases",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GreenFinance.get_market_trends",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "GreenFinance.provide_financing_advice",
                "args": {
                    "project_details": "环保项目"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GreenFinance.get_basic_concepts', {'name': 'GreenFinance.get_basic_concepts', 'description': '获取绿色金融的基本概念。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'concepts', 'description': '绿色金融的基本概念列表'}]}], ['GreenFinance.get_common_methods', {'name': 'GreenFinance.get_common_methods', 'description': '获取绿色金融的常见方式。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'methods', 'description': '绿色金融的常见方式列表'}]}], ['GreenFinance.get_success_cases', {'name': 'GreenFinance.get_success_cases', 'description': '获取绿色融资的成功案例。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '绿色融资的成功案例列表'}]}], ['GreenFinance.get_market_trends', {'name': 'GreenFinance.get_market_trends', 'description': '获取当前绿色金融市场的趋势。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': '当前绿色金融市场的趋势列表'}]}], ['GreenFinance.provide_financing_advice', {'name': 'GreenFinance.provide_financing_advice', 'description': '基于环保项目，提供绿色融资的建议。', 'required_parameters': [{'name': 'project_details', 'type': 'STRING', 'description': '环保项目的详细描述'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '绿色融资的建议列表'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解绿色金融和绿色融资的相关知识。首先，获取绿色金融的基本概念和常见方式。然后，获取一些绿色融资的成功案例。接着，获取当前绿色金融市场的趋势。最后，基于我的环保项目，提供一些绿色融资的建议。"
            }
        ]
    },
    "358": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "AirQuality.get_city_air_quality",
                "Survey.get_public_perception",
                "PolicyRecommendation.generate_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "共享经济 碳排放减少"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "AirQuality.get_city_air_quality",
                "args": {
                    "city": "北京"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Survey.get_public_perception",
                "args": {
                    "topic": "共享经济 环保效益"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PolicyRecommendation.generate_recommendations",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['AirQuality.get_city_air_quality', {'name': 'AirQuality.get_city_air_quality', 'description': 'Get the air quality data of a specific city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'air_quality_index', 'description': 'air quality index of the city'}, {'name': 'pollutant_concentrations', 'description': 'concentrations of major pollutants'}]}], ['Survey.get_public_perception', {'name': 'Survey.get_public_perception', 'description': 'Get the public perception survey data on a specific topic', 'required_parameters': [{'name': 'topic', 'description': 'topic of the survey', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'survey_results', 'description': 'results of the survey'}]}], ['PolicyRecommendation.generate_recommendations', {'name': 'PolicyRecommendation.generate_recommendations', 'description': 'Generate policy recommendations based on the provided data', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of policy recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对环境保护的影响。首先，获取共享经济平台（如共享单车和共享汽车）的碳排放减少数据。接着，分析城市空气质量的变化情况。然后，获取公众对共享经济环保效益的认知调查数据。最后，基于这些数据，提供一些关于环保政策优化的建议。"
            }
        ]
    },
    "200": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinance.get_research_report",
                "ChinaFinance.get_company_investment_data",
                "ChinaFinance.get_real_time_investment_info",
                "ChinaFinance.compare_investment_data",
                "ChinaFinance.provide_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinance.get_research_report",
                "args": {
                    "year": 2024,
                    "companyType": "消费金融贷款公司"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_company_investment_data",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_company_investment_data",
                "args": {
                    "companyName": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ChinaFinance.compare_investment_data",
                "args": {
                    "company1": "蚂蚁金服",
                    "company2": "京东金融"
                }
            },
            {
                "id": 4,
                "prev": [
                    1
                ],
                "name": "ChinaFinance.get_real_time_investment_info",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 5,
                "prev": [
                    3,
                    4
                ],
                "name": "ChinaFinance.provide_investment_advice",
                "args": {}
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinance.get_research_report', {'name': 'ChinaFinance.get_research_report', 'description': '获取特定年份和公司类型的研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}, {'name': 'companyType', 'type': 'STRING', 'description': '公司类型'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '研究报告内容'}]}], ['ChinaFinance.get_company_investment_data', {'name': 'ChinaFinance.get_company_investment_data', 'description': '获取特定公司的风险投资数据', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'investmentData', 'description': '风险投资数据'}]}], ['ChinaFinance.get_real_time_investment_info', {'name': 'ChinaFinance.get_real_time_investment_info', 'description': '获取特定公司的实时风险投资信息', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'realTimeInfo', 'description': '实时风险投资信息'}]}], ['ChinaFinance.compare_investment_data', {'name': 'ChinaFinance.compare_investment_data', 'description': '对比两家公司的风险投资数据', 'required_parameters': [{'name': 'company1', 'type': 'STRING', 'description': '第一家公司名称'}, {'name': 'company2', 'type': 'STRING', 'description': '第二家公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'comparisonResult', 'description': '对比结果'}]}], ['ChinaFinance.provide_investment_advice', {'name': 'ChinaFinance.provide_investment_advice', 'description': '基于风险投资分析提供投资建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '投资建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的风险投资情况。首先，请提供2024年中国消费金融贷款公司的风险投资研究报告。然后，获取蚂蚁金服与京东金融的风险投资规模进行对比分析。接着，获取蚂蚁金服的实时风险投资信息。最后，基于风险投资分析，提供一些风险投资建议。"
            }
        ]
    },
    "202": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaMarketResearch.get_market_report",
                "CompetitionIndex.get_competition_index",
                "RealTimeMarket.get_real_time_info",
                "MarketAnalysis.provide_competition_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaMarketResearch.get_market_report",
                "args": {
                    "year": 2024,
                    "industry": "消费金融贷款公司"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CompetitionIndex.get_competition_index",
                "args": {
                    "company1": "蚂蚁金服",
                    "company2": "京东金融"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealTimeMarket.get_real_time_info",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketAnalysis.provide_competition_advice",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaMarketResearch.get_market_report', {'name': 'ChinaMarketResearch.get_market_report', 'description': '获取特定年份和行业的中国市场研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}, {'name': 'industry', 'type': 'STRING', 'description': '报告的行业'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '市场研究报告的内容'}]}], ['CompetitionIndex.get_competition_index', {'name': 'CompetitionIndex.get_competition_index', 'description': '获取两家公司在特定市场的竞争指数', 'required_parameters': [{'name': 'company1', 'type': 'STRING', 'description': '第一家公司的名称'}, {'name': 'company2', 'type': 'STRING', 'description': '第二家公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'index', 'description': '竞争指数的对比结果'}]}], ['RealTimeMarket.get_real_time_info', {'name': 'RealTimeMarket.get_real_time_info', 'description': '获取特定公司的实时市场竞争信息', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'info', 'description': '实时市场竞争信息'}]}], ['MarketAnalysis.provide_competition_advice', {'name': 'MarketAnalysis.provide_competition_advice', 'description': '基于市场竞争分析提供建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '市场竞争建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的市场竞争情况。首先，请提供2024年中国消费金融贷款公司的市场竞争研究报告。然后，获取蚂蚁金服与京东金融的市场竞争指数进行对比分析。接着，获取蚂蚁金服的实时市场竞争信息。最后，基于市场竞争分析，提供一些市场竞争建议。"
            }
        ]
    },
    "382": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "Techstars.get_user_growth_data",
                "Techstars.analyze_market_changes",
                "WeWork.get_user_satisfaction_data",
                "FinishAction"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Techstars.get_user_growth_data",
                "args": {
                    "platform": "Techstars"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "WeWork.get_user_growth_data",
                "args": {
                    "platform": "WeWork"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Techstars.analyze_market_changes",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "WeWork.get_user_satisfaction_data",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['Techstars.get_user_growth_data', {'name': 'Techstars.get_user_growth_data', 'description': 'Get user growth data for a specific platform', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}], ['WeWork.get_user_growth_data', {'name': 'WeWork.get_user_growth_data', 'description': 'Get user growth data for a specific platform', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}], ['Techstars.analyze_market_changes', {'name': 'Techstars.analyze_market_changes', 'description': 'Analyze changes in the tech startup market', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'analysis of market changes'}]}], ['WeWork.get_user_satisfaction_data', {'name': 'WeWork.get_user_satisfaction_data', 'description': 'Get user satisfaction data for a specific platform', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'user satisfaction data'}]}], ['FinishAction', {'name': 'FinishAction', 'description': 'Finish the action sequence', 'required_parameters': [], 'optional_parameters': [], 'return_data': []}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对科技创业的影响。首先，获取共享经济平台（如WeWork和Techstars）的用户增长数据。接着，分析科技创业市场的变化情况。然后，获取创业者对共享办公的满意度调查数据。最后，基于这些数据，提供一些关于科技创业市场发展的建议。"
            }
        ]
    },
    "161": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialData.get_historical_exchange_rates",
                "CentralBank.get_policy_impact_analysis",
                "FinancialData.get_real_time_trading_volume",
                "MarketAnalysis.evaluate_market_sentiment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialData.get_historical_exchange_rates",
                "args": {
                    "currency_pair": "EUR/USD",
                    "time_period": "6_months"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CentralBank.get_policy_impact_analysis",
                "args": {
                    "central_bank": "European Central Bank",
                    "currency_pair": "EUR/USD"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "FinancialData.get_real_time_trading_volume",
                "args": {
                    "currency_pair": "EUR/USD"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "MarketAnalysis.evaluate_market_sentiment",
                "args": {
                    "historical_data": "FinancialData.get_historical_exchange_rates",
                    "policy_impact": "CentralBank.get_policy_impact_analysis",
                    "real_time_volume": "FinancialData.get_real_time_trading_volume"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialData.get_historical_exchange_rates', {'name': 'FinancialData.get_historical_exchange_rates', 'description': '获取指定货币对在特定时间段内的历史汇率数据', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': '货币对，例如EUR/USD'}, {'name': 'time_period', 'type': 'STRING', 'description': '时间段，例如6_months'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_rates', 'description': '历史汇率数据列表，包含日期和汇率'}]}], ['CentralBank.get_policy_impact_analysis', {'name': 'CentralBank.get_policy_impact_analysis', 'description': '获取中央银行政策对特定货币对的影响分析', 'required_parameters': [{'name': 'central_bank', 'type': 'STRING', 'description': '中央银行名称，例如European Central Bank'}, {'name': 'currency_pair', 'type': 'STRING', 'description': '货币对，例如EUR/USD'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_impact', 'description': '政策影响分析报告'}]}], ['FinancialData.get_real_time_trading_volume', {'name': 'FinancialData.get_real_time_trading_volume', 'description': '获取指定货币对的实时交易量', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': '货币对，例如EUR/USD'}], 'optional_parameters': [], 'return_data': [{'name': 'trading_volume', 'description': '实时交易量数据'}]}], ['MarketAnalysis.evaluate_market_sentiment', {'name': 'MarketAnalysis.evaluate_market_sentiment', 'description': '根据历史数据、政策影响和实时交易量评估市场情绪', 'required_parameters': [{'name': 'historical_data', 'type': 'STRING', 'description': '历史汇率数据来源'}, {'name': 'policy_impact', 'type': 'STRING', 'description': '政策影响分析来源'}, {'name': 'real_time_volume', 'type': 'STRING', 'description': '实时交易量数据来源'}], 'optional_parameters': [], 'return_data': [{'name': 'market_sentiment', 'description': '市场情绪评估报告'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估欧元兑美元汇率的市场情绪。首先，请获取欧元兑美元汇率在过去六个月内的每日价格数据。然后，获取欧洲央行政策对汇率的影响分析。接下来，获取欧元兑美元的实时交易量。最后，请分析这些数据以评估市场情绪。"
            }
        ]
    },
    "246": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "HealthInvestment.get_current_investment_status",
                "HealthInvestment.get_retirement_age",
                "HealthInvestment.get_product_returns",
                "HealthInvestment.get_tax_policies",
                "HealthInvestment.provide_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "HealthInvestment.get_current_investment_status",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "HealthInvestment.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "HealthInvestment.get_product_returns",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "HealthInvestment.get_tax_policies",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "HealthInvestment.provide_investment_advice",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['HealthInvestment.get_current_investment_status', {'name': 'HealthInvestment.get_current_investment_status', 'description': '获取当前的健康投资情况', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'current_investment', 'description': '当前的健康投资情况'}]}], ['HealthInvestment.get_retirement_age', {'name': 'HealthInvestment.get_retirement_age', 'description': '获取预计的退休年龄', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirement_age', 'description': '预计的退休年龄'}]}], ['HealthInvestment.get_product_returns', {'name': 'HealthInvestment.get_product_returns', 'description': '获取不同健康投资产品的回报率', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'product_returns', 'description': '不同健康投资产品的回报率'}]}], ['HealthInvestment.get_tax_policies', {'name': 'HealthInvestment.get_tax_policies', 'description': '获取所在地区的健康投资税收政策', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tax_policies', 'description': '所在地区的健康投资税收政策'}]}], ['HealthInvestment.provide_investment_advice', {'name': 'HealthInvestment.provide_investment_advice', 'description': '提供基于数据的退休健康投资建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'investment_advice', 'description': '基于数据的退休健康投资建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要评估退休后的健康投资计划。首先，获取我当前的健康投资情况和预计退休年龄。然后，获取不同健康投资产品的回报率。接着，获取我所在地区的健康投资税收政策。最后，提供一个基于这些数据的退休健康投资建议。"
            }
        ]
    },
    "350": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Spotify.get_user_subscription_data",
                "Analytics.analyze_subscription_growth",
                "Analytics.analyze_subscription_retention",
                "StrategyModel.evaluate_subscription_strategy",
                "ReportGenerator.generate_subscription_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Spotify.get_user_subscription_data",
                "args": {
                    "years": 5
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "Analytics.analyze_subscription_growth",
                "args": {
                    "data": "Spotify.get_user_subscription_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "Analytics.analyze_subscription_retention",
                "args": {
                    "data": "Spotify.get_user_subscription_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "StrategyModel.evaluate_subscription_strategy",
                "args": {
                    "growth_data": "Analytics.analyze_subscription_growth",
                    "retention_data": "Analytics.analyze_subscription_retention"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ReportGenerator.generate_subscription_report",
                "args": {
                    "evaluation_data": "StrategyModel.evaluate_subscription_strategy"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Spotify.get_user_subscription_data', {'name': 'Spotify.get_user_subscription_data', 'description': 'Get user subscription data from Spotify for a specified number of years', 'required_parameters': [{'name': 'years', 'description': 'number of years to retrieve data for', 'type': 'INTEGER'}], 'optional_parameters': [], 'return_data': [{'name': 'subscription_data', 'description': 'list of subscription data for each year'}]}],\n['Analytics.analyze_subscription_growth', {'name': 'Analytics.analyze_subscription_growth', 'description': 'Analyze the growth rate of user subscriptions', 'required_parameters': [{'name': 'data', 'description': 'subscription data to analyze', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'growth_rate', 'description': 'calculated growth rate of subscriptions'}]}],\n['Analytics.analyze_subscription_retention', {'name': 'Analytics.analyze_subscription_retention', 'description': 'Analyze the retention rate of user subscriptions', 'required_parameters': [{'name': 'data', 'description': 'subscription data to analyze', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'retention_rate', 'description': 'calculated retention rate of subscriptions'}]}],\n['StrategyModel.evaluate_subscription_strategy', {'name': 'StrategyModel.evaluate_subscription_strategy', 'description': 'Evaluate the effectiveness of a subscription strategy based on growth and retention data', 'required_parameters': [{'name': 'growth_data', 'description': 'growth data to evaluate', 'type': 'STRING'}, {'name': 'retention_data', 'description': 'retention data to evaluate', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy_effectiveness', 'description': 'evaluation of the subscription strategy'}]}],\n['ReportGenerator.generate_subscription_report', {'name': 'ReportGenerator.generate_subscription_report', 'description': 'Generate a report based on the evaluation of a subscription strategy', 'required_parameters': [{'name': 'evaluation_data', 'description': 'evaluation data to generate report from', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'generated report content'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估Spotify公司的用户订阅策略。首先，请获取Spotify公司近五年的用户订阅数据。然后，分析其用户订阅增长速度和用户订阅留存率。接下来，使用订阅策略模型评估其用户订阅策略的有效性。最后，提供一个基于评估的用户订阅策略报告。"
            }
        ]
    },
    "90": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MedicalInvestment.get_available_projects",
                "MedicalInvestment.recommend_project",
                "MedicalInvestment.calculate_returns",
                "MedicalInvestment.get_consultation_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MedicalInvestment.get_available_projects",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MedicalInvestment.recommend_project",
                "args": {
                    "budget": 500000,
                    "risk_preference": "moderate"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MedicalInvestment.calculate_returns",
                "args": {
                    "projectId": 12345
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MedicalInvestment.get_consultation_link",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MedicalInvestment.get_available_projects', {'name': 'MedicalInvestment.get_available_projects', 'description': '获取当前可用的医疗投资项目信息', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'projects', 'description': '当前可用的医疗投资项目列表，每个项目包含项目ID、项目名称、项目描述、所需投资金额、预计回报率、风险等级'}]}], ['MedicalInvestment.recommend_project', {'name': 'MedicalInvestment.recommend_project', 'description': '根据投资预算和风险偏好推荐一个医疗投资项目', 'required_parameters': [{'name': 'budget', 'type': 'NUMBER', 'description': '投资预算'}, {'name': 'risk_preference', 'type': 'STRING', 'description': '风险偏好，可选值为low、moderate、high'}], 'optional_parameters': [], 'return_data': [{'name': 'recommended_project', 'description': '推荐的医疗投资项目，包含项目ID、项目名称、项目描述、所需投资金额、预计回报率、风险等级'}]}], ['MedicalInvestment.calculate_returns', {'name': 'MedicalInvestment.calculate_returns', 'description': '计算如果投资推荐的医疗项目，可能的收益和风险', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': '项目ID'}], 'optional_parameters': [], 'return_data': [{'name': 'expected_returns', 'description': '预计收益'}, {'name': 'risk_level', 'description': '风险等级'}]}], ['MedicalInvestment.get_consultation_link', {'name': 'MedicalInvestment.get_consultation_link', 'description': '获取医疗投资咨询的链接', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'consultation_link', 'description': '医疗投资咨询的链接'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行医疗投资。首先，请获取当前可用的医疗项目信息。然后，根据我的投资预算和风险偏好，推荐一个医疗投资项目。接下来，计算如果我投资推荐的医疗项目，可能的收益和风险。最后，提供一个医疗投资咨询的链接。"
            }
        ]
    },
    "135": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TaxPlanningResearch.get_research_report",
                "FinancialEducation.get_success_cases",
                "TaxPlanningTools.get_practical_tools",
                "TaxPlanningAdvice.provide_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaxPlanningResearch.get_research_report",
                "args": {
                    "topic": "financial education and tax planning"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialEducation.get_success_cases",
                "args": {
                    "topic": "tax planning"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxPlanningTools.get_practical_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxPlanningAdvice.provide_advice",
                "args": {
                    "research_report": "TaxPlanningResearch.get_research_report",
                    "success_cases": "FinancialEducation.get_success_cases",
                    "practical_tools": "TaxPlanningTools.get_practical_tools"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TaxPlanningResearch.get_research_report', {'name': 'TaxPlanningResearch.get_research_report', 'description': 'get the most recent research reports relating to a specific tax planning topic', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research report'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'A list of research reports including title, summary, and author'}]}], ['FinancialEducation.get_success_cases', {'name': 'FinancialEducation.get_success_cases', 'description': 'This function retrieves the success cases of financial education in a specific topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the success cases.'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of success cases including title, summary, and outcome'}]}], ['TaxPlanningTools.get_practical_tools', {'name': 'TaxPlanningTools.get_practical_tools', 'description': 'This function retrieves practical tools for tax planning.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': 'A list of practical tools including name, description, and usage'}]}], ['TaxPlanningAdvice.provide_advice', {'name': 'TaxPlanningAdvice.provide_advice', 'description': 'This function provides tax planning advice based on research reports, success cases, and practical tools.', 'required_parameters': [{'name': 'research_report', 'type': 'STRING', 'description': 'The research report API name.'}, {'name': 'success_cases', 'type': 'STRING', 'description': 'The success cases API name.'}, {'name': 'practical_tools', 'type': 'STRING', 'description': 'The practical tools API name.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'A list of tax planning advice including title, summary, and recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解金融教育对税收规划的影响。首先，请获取关于税收规划的研究报告。然后，获取一些通过金融教育成功进行税收规划的案例。接着，获取一些税收规划的实用工具。最后，基于这些信息，为我提供一些税收规划的建议。"
            }
        ]
    },
    "229": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SkillAssessment.get_current_skills",
                "RetirementPlanning.get_retirement_age",
                "SkillUpgrade.get_course_cost_and_roi",
                "GovernmentSubsidies.get_local_subsidies",
                "SkillUpgrade.recommend_courses"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SkillAssessment.get_current_skills",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RetirementPlanning.get_retirement_age",
                "args": {
                    "currentAge": 45
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "SkillUpgrade.get_course_cost_and_roi",
                "args": {
                    "skill": "Digital Marketing"
                }
            },
            {
                "id": 3,
                "prev": [
                    0
                ],
                "name": "SkillUpgrade.get_course_cost_and_roi",
                "args": {
                    "skill": "Data Analysis"
                }
            },
            {
                "id": 4,
                "prev": [
                    0
                ],
                "name": "SkillUpgrade.get_course_cost_and_roi",
                "args": {
                    "skill": "Project Management"
                }
            },
            {
                "id": 5,
                "prev": [
                    1
                ],
                "name": "GovernmentSubsidies.get_local_subsidies",
                "args": {
                    "region": "California"
                }
            },
            {
                "id": 6,
                "prev": [
                    2,
                    3,
                    4,
                    5
                ],
                "name": "SkillUpgrade.recommend_courses",
                "args": {}
            },
            {
                "id": 7,
                "prev": [
                    6
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SkillAssessment.get_current_skills', {'name': 'SkillAssessment.get_current_skills', 'description': 'Retrieve the current skill levels of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'skills', 'description': 'A list of skills with their current proficiency levels.'}]}], ['RetirementPlanning.get_retirement_age', {'name': 'RetirementPlanning.get_retirement_age', 'description': 'Calculate the estimated retirement age based on current age.', 'required_parameters': [{'name': 'currentAge', 'type': 'NUMBER', 'description': 'The current age of the user.'}], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': 'The estimated retirement age.'}]}], ['SkillUpgrade.get_course_cost_and_roi', {'name': 'SkillUpgrade.get_course_cost_and_roi', 'description': 'Get the cost and return on investment (ROI) for a specific skill upgrade course.', 'required_parameters': [{'name': 'skill', 'type': 'STRING', 'description': 'The skill for which the course is offered.'}], 'optional_parameters': [], 'return_data': [{'name': 'cost', 'description': 'The cost of the course.'}, {'name': 'roi', 'description': 'The estimated return on investment.'}]}], ['GovernmentSubsidies.get_local_subsidies', {'name': 'GovernmentSubsidies.get_local_subsidies', 'description': 'Retrieve the subsidies available for skill upgrading in a specific region.', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'The region where the user resides.'}], 'optional_parameters': [], 'return_data': [{'name': 'subsidies', 'description': 'A list of subsidies available for skill upgrading.'}]}], ['SkillUpgrade.recommend_courses', {'name': 'SkillUpgrade.recommend_courses', 'description': 'Recommend skill upgrade courses based on current skills, retirement age, course costs, and subsidies.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'A list of recommended courses with their details.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解退休后的技能提升计划。首先，获取我当前的技能水平和预计退休年龄。然后，获取不同技能提升课程的成本和回报率。接着，获取我所在地区的技能提升补贴政策。最后，提供一个基于这些数据的退休技能提升建议。"
            }
        ]
    },
    "235": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "UserProfile.get_current_habits",
                "UserProfile.get_retirement_age",
                "EcoActivities.get_cost_and_return",
                "GovernmentPolicies.get_subsidy_info",
                "RecommendationEngine.generate_plan"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "UserProfile.get_current_habits",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "UserProfile.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "EcoActivities.get_cost_and_return",
                "args": {
                    "activityType": "recycling"
                }
            },
            {
                "id": 3,
                "prev": [
                    0
                ],
                "name": "EcoActivities.get_cost_and_return",
                "args": {
                    "activityType": "treePlanting"
                }
            },
            {
                "id": 4,
                "prev": [
                    0
                ],
                "name": "EcoActivities.get_cost_and_return",
                "args": {
                    "activityType": "solarPanelInstallation"
                }
            },
            {
                "id": 5,
                "prev": [
                    1
                ],
                "name": "GovernmentPolicies.get_subsidy_info",
                "args": {
                    "region": "California"
                }
            },
            {
                "id": 6,
                "prev": [
                    2,
                    3,
                    4,
                    5
                ],
                "name": "RecommendationEngine.generate_plan",
                "args": {}
            },
            {
                "id": 7,
                "prev": [
                    6
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['UserProfile.get_current_habits', {'name': 'UserProfile.get_current_habits', 'description': 'Retrieve the current environmental habits of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'habits', 'description': 'A list of current environmental activities the user participates in.'}]}], ['UserProfile.get_retirement_age', {'name': 'UserProfile.get_retirement_age', 'description': 'Retrieve the user's expected retirement age.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': 'The expected retirement age of the user.'}]}], ['EcoActivities.get_cost_and_return', {'name': 'EcoActivities.get_cost_and_return', 'description': 'Get the cost and return rate of different environmental activities.', 'required_parameters': [{'name': 'activityType', 'type': 'STRING', 'description': 'The type of environmental activity.'}], 'optional_parameters': [], 'return_data': [{'name': 'cost', 'description': 'The cost of the activity.'}, {'name': 'returnRate', 'description': 'The return rate of the activity.'}]}], ['GovernmentPolicies.get_subsidy_info', {'name': 'GovernmentPolicies.get_subsidy_info', 'description': 'Get the subsidy information for environmental activities in a specific region.', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'The region for which to retrieve subsidy information.'}], 'optional_parameters': [], 'return_data': [{'name': 'subsidyInfo', 'description': 'Information about subsidies available for environmental activities in the specified region.'}]}], ['RecommendationEngine.generate_plan', {'name': 'RecommendationEngine.generate_plan', 'description': 'Generate a retirement environmental activity plan based on user habits, retirement age, activity costs, return rates, and subsidy information.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendation', 'description': 'A detailed plan for retirement environmental activities.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估退休后的环保活动计划。首先，获取我当前的环保活动习惯和预计退休年龄。然后，获取不同环保活动的成本和回报率。接着，获取我所在地区的环保活动补贴政策。最后，提供一个基于这些数据的退休环保活动建议。"
            }
        ]
    },
    "389": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GreenEconomy.get_financing_data",
                "GreenEconomy.analyze_success_rate",
                "GreenEconomy.compare_financing_difficulty",
                "GreenEconomy.provide_success_rate_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GreenEconomy.get_financing_data",
                "args": {
                    "time_period": "last year",
                    "project_type": "green economy"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GreenEconomy.analyze_success_rate",
                "args": {
                    "financing_data": "{{0}}"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GreenEconomy.compare_financing_difficulty",
                "args": {
                    "green_economy_data": "{{1}}",
                    "other_projects_data": "other types of projects"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GreenEconomy.provide_success_rate_tips",
                "args": {
                    "comparison_result": "{{2}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GreenEconomy.get_financing_data', {'name': 'GreenEconomy.get_financing_data', 'description': 'Get the financing data for green economy projects within a specified time period', 'required_parameters': [{'name': 'time_period', 'description': 'time period for the data', 'type': 'STRING'}, {'name': 'project_type', 'description': 'type of projects', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'total_financing', 'description': 'total financing amount'}, {'name': 'major_investors', 'description': 'list of major investors'}]}], ['GreenEconomy.analyze_success_rate', {'name': 'GreenEconomy.analyze_success_rate', 'description': 'Analyze the success rate of financing for green economy projects', 'required_parameters': [{'name': 'financing_data', 'description': 'financing data of green economy projects', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'success_rate', 'description': 'success rate of financing'}]}], ['GreenEconomy.compare_financing_difficulty', {'name': 'GreenEconomy.compare_financing_difficulty', 'description': 'Compare the financing difficulty between green economy projects and other types of projects', 'required_parameters': [{'name': 'green_economy_data', 'description': 'financing data of green economy projects', 'type': 'STRING'}, {'name': 'other_projects_data', 'description': 'financing data of other types of projects', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_result', 'description': 'comparison result of financing difficulty'}]}], ['GreenEconomy.provide_success_rate_tips', {'name': 'GreenEconomy.provide_success_rate_tips', 'description': 'Provide tips on how to improve the success rate of financing for green economy projects', 'required_parameters': [{'name': 'comparison_result', 'description': 'comparison result of financing difficulty', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': 'list of tips to improve success rate'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解绿色经济项目的融资情况。首先，获取过去一年内绿色经济项目的融资总额和主要投资方。接着，分析这些项目的融资成功率。然后，比较绿色经济项目与其他类型项目的融资难度。最后，提供一些关于如何提高绿色经济项目融资成功率的建议。"
            }
        ]
    },
    "241": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "UserActivityTracker.get_current_activity_habits",
                "RetirementPlanner.get_retirement_age",
                "SportsActivityCost.get_cost_and_return_rate",
                "GovernmentSubsidy.get_local_subsidy_policy",
                "BudgetPlanner.create_retirement_sports_budget"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "UserActivityTracker.get_current_activity_habits",
                "args": {}
            },
            {
                "id": 1,
                "prev": [],
                "name": "RetirementPlanner.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "SportsActivityCost.get_cost_and_return_rate",
                "args": {
                    "activityType": "tennis"
                }
            },
            {
                "id": 3,
                "prev": [
                    0,
                    1
                ],
                "name": "SportsActivityCost.get_cost_and_return_rate",
                "args": {
                    "activityType": "swimming"
                }
            },
            {
                "id": 4,
                "prev": [
                    0,
                    1
                ],
                "name": "SportsActivityCost.get_cost_and_return_rate",
                "args": {
                    "activityType": "yoga"
                }
            },
            {
                "id": 5,
                "prev": [
                    0,
                    1
                ],
                "name": "GovernmentSubsidy.get_local_subsidy_policy",
                "args": {}
            },
            {
                "id": 6,
                "prev": [
                    2,
                    3,
                    4,
                    5
                ],
                "name": "BudgetPlanner.create_retirement_sports_budget",
                "args": {}
            },
            {
                "id": 7,
                "prev": [
                    6
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['UserActivityTracker.get_current_activity_habits', {'name': 'UserActivityTracker.get_current_activity_habits', 'description': 'Retrieve the current physical activity habits of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'activityHabits', 'description': 'A list of current physical activities including frequency and duration.'}]}], ['RetirementPlanner.get_retirement_age', {'name': 'RetirementPlanner.get_retirement_age', 'description': 'Get the estimated retirement age of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': 'The estimated retirement age.'}]}], ['SportsActivityCost.get_cost_and_return_rate', {'name': 'SportsActivityCost.get_cost_and_return_rate', 'description': 'Get the cost and return rate of different sports activities.', 'required_parameters': [{'name': 'activityType', 'type': 'STRING', 'description': 'The type of sports activity.'}], 'optional_parameters': [], 'return_data': [{'name': 'cost', 'description': 'The cost of the activity.'}, {'name': 'returnRate', 'description': 'The return rate of the activity in terms of health benefits.'}]}], ['GovernmentSubsidy.get_local_subsidy_policy', {'name': 'GovernmentSubsidy.get_local_subsidy_policy', 'description': 'Get the local government subsidy policy for sports activities.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'subsidyPolicy', 'description': 'The details of the subsidy policy including eligible activities and amounts.'}]}], ['BudgetPlanner.create_retirement_sports_budget', {'name': 'BudgetPlanner.create_retirement_sports_budget', 'description': 'Create a budget for retirement sports activities based on current habits, costs, and subsidies.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'budget', 'description': 'The budget plan for retirement sports activities.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估退休后的体育活动计划。首先，获取我当前的体育活动习惯和预计退休年龄。然后，获取不同体育活动的成本和回报率。接着，获取我所在地区的体育活动补贴政策。最后，提供一个基于这些数据的退休体育活动预算。"
            }
        ]
    },
    "473": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "IndustryDataAPI.get_sustainability_data",
                "CompanyAPI.get_sustainability_cases",
                "SustainabilityAPI.get_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "topic": "sustainability",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_sustainability_data",
                "args": {
                    "industry": "manufacturing",
                    "data_type": "sustainability"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_sustainability_data",
                "args": {
                    "industry": "services",
                    "data_type": "sustainability"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "CompanyAPI.get_sustainability_cases",
                "args": {
                    "companies": "Apple, Unilever, Tesla"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "SustainabilityAPI.get_recommendations",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': 'Get recent news articles on a specific topic within a specified time range.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'the topic of the news'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the news, e.g., 1 year'}]}], ['IndustryDataAPI.get_sustainability_data', {'name': 'IndustryDataAPI.get_sustainability_data', 'description': 'Get sustainability data for a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry name'}], 'optional_parameters': [{'name': 'data_type', 'type': 'STRING', 'description': 'the type of data, e.g., sustainability'}]}], ['CompanyAPI.get_sustainability_cases', {'name': 'CompanyAPI.get_sustainability_cases', 'description': 'Get sustainability cases for specific companies.', 'required_parameters': [{'name': 'companies', 'type': 'STRING', 'description': 'the names of the companies, separated by commas'}], 'optional_parameters': []}], ['SustainabilityAPI.get_recommendations', {'name': 'SustainabilityAPI.get_recommendations', 'description': 'Get recommendations for sustainable practices in the real economy.', 'required_parameters': [], 'optional_parameters': []}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解实体经济的可持续发展情况。首先，获取最近一年的可持续发展新闻。接着，提供制造业和服务业的可持续发展数据。然后，请获取一些知名实体企业的可持续发展案例，并分析其可持续发展策略。最后，提供一些关于如何在实体经济中进行可持续发展的建议。"
            }
        ]
    },
    "458": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "HRSystem.get_housing_fund_info",
                "CityPolicy.get_housing_loan_policy",
                "FinancialAdvisor.get_loan_planning_advice",
                "LoanCalculator.estimate_loan_cost"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "HRSystem.get_housing_fund_info",
                "args": {
                    "employee_id": "12345"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CityPolicy.get_housing_loan_policy",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialAdvisor.get_loan_planning_advice",
                "args": {
                    "income": 10000,
                    "expenses": 3000,
                    "housing_fund_info": {
                        "contribution_ratio": 0.12,
                        "base": 8000
                    },
                    "loan_policy": {
                        "max_loan_ratio": 0.7,
                        "interest_rate": 0.049
                    }
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "LoanCalculator.estimate_loan_cost",
                "args": {
                    "loan_amount": 300000,
                    "interest_rate": 0.049,
                    "loan_term": 20
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['HRSystem.get_housing_fund_info', {'name': 'HRSystem.get_housing_fund_info', 'description': 'Get the housing fund contribution ratio and base for an employee.', 'required_parameters': [{'name': 'employee_id', 'type': 'STRING', 'description': 'the employee ID'}], 'optional_parameters': [], 'return_data': [{'name': 'contribution_ratio', 'description': 'the contribution ratio of the housing fund.'}, {'name': 'base', 'description': 'the base amount for the housing fund.'}]}], ['CityPolicy.get_housing_loan_policy', {'name': 'CityPolicy.get_housing_loan_policy', 'description': 'Get the housing loan policy for a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'max_loan_ratio', 'description': 'the maximum loan ratio allowed.'}, {'name': 'interest_rate', 'description': 'the interest rate for housing loans.'}]}], ['FinancialAdvisor.get_loan_planning_advice', {'name': 'FinancialAdvisor.get_loan_planning_advice', 'description': 'Get advice on personal housing loan planning.', 'required_parameters': [{'name': 'income', 'type': 'NUMBER', 'description': 'the monthly income.'}, {'name': 'expenses', 'type': 'NUMBER', 'description': 'the monthly expenses.'}, {'name': 'housing_fund_info', 'type': 'DICT', 'description': 'the housing fund information.'}, {'name': 'loan_policy', 'type': 'DICT', 'description': 'the housing loan policy information.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'the advice on loan planning.'}]}], ['LoanCalculator.estimate_loan_cost', {'name': 'LoanCalculator.estimate_loan_cost', 'description': 'Estimate the cost of a housing loan.', 'required_parameters': [{'name': 'loan_amount', 'type': 'NUMBER', 'description': 'the loan amount.'}, {'name': 'interest_rate', 'type': 'FLOAT', 'description': 'the interest rate.'}, {'name': 'loan_term', 'type': 'NUMBER', 'description': 'the loan term in years.'}], 'optional_parameters': [], 'return_data': [{'name': 'monthly_payment', 'description': 'the estimated monthly payment.'}, {'name': 'total_interest', 'description': 'the total interest paid over the loan term.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解五险一金的缴纳对个人住房贷款规划的影响。首先，获取五险一金中住房公积金的缴纳比例和基数。然后，获取不同城市的住房贷款规划政策。接着，获取个人住房贷款规划的建议和方法。最后，提供一个住房贷款规划计算器，帮助我估算住房贷款费用。"
            }
        ]
    },
    "72": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoMarket.get_current_prices",
                "CryptoInvestment.recommend_strategy",
                "CryptoInvestment.calculate_potential_returns",
                "CryptoExchange.get_login_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoMarket.get_current_prices",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CryptoInvestment.recommend_strategy",
                "args": {
                    "budget": 10000,
                    "risk_preference": "moderate"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CryptoInvestment.calculate_potential_returns",
                "args": {
                    "strategy": "diversified_portfolio"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CryptoExchange.get_login_link",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoMarket.get_current_prices', {'name': 'CryptoMarket.get_current_prices', 'description': '获取当前主要数字货币的市场价格', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': '当前主要数字货币的市场价格列表'}]}], ['CryptoInvestment.recommend_strategy', {'name': 'CryptoInvestment.recommend_strategy', 'description': '根据投资预算和风险偏好推荐数字货币投资策略', 'required_parameters': [{'name': 'budget', 'type': 'NUMBER', 'description': '投资预算'}, {'name': 'risk_preference', 'type': 'STRING', 'description': '风险偏好'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '推荐的数字货币投资策略'}]}], ['CryptoInvestment.calculate_potential_returns', {'name': 'CryptoInvestment.calculate_potential_returns', 'description': '计算按照推荐策略进行投资的可能收益和风险', 'required_parameters': [{'name': 'strategy', 'type': 'STRING', 'description': '投资策略'}], 'optional_parameters': [], 'return_data': [{'name': 'potential_returns', 'description': '可能的收益'}, {'name': 'potential_risks', 'description': '可能的风险'}]}], ['CryptoExchange.get_login_link', {'name': 'CryptoExchange.get_login_link', 'description': '获取数字货币交易平台的登录链接', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'login_link', 'description': '数字货币交易平台的登录链接'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想进行数字货币投资。首先，请获取当前主要数字货币的市场价格。然后，根据我的投资预算和风险偏好，推荐一个数字货币投资策略。接下来，计算如果我按照推荐的策略进行投资，可能的收益和风险。最后，提供一个数字货币交易平台的登录链接。"
            }
        ]
    },
    "15": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "LendingClub.get_historical_loan_data",
                "SoFi.get_historical_loan_data",
                "LendingClub.get_real_time_loan_data",
                "SoFi.get_real_time_loan_data",
                "MarketAnalysis.analyze_loan_services",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "LendingClub.get_historical_loan_data",
                "args": {
                    "time_period": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "SoFi.get_historical_loan_data",
                "args": {
                    "time_period": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "LendingClub.get_real_time_loan_data",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    0,
                    1
                ],
                "name": "SoFi.get_real_time_loan_data",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "MarketAnalysis.analyze_loan_services",
                "args": {
                    "data": [
                        "LendingClub_historical",
                        "SoFi_historical",
                        "LendingClub_real_time",
                        "SoFi_real_time"
                    ]
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "analysis_result": "MarketAnalysis_result"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['LendingClub.get_historical_loan_data', {'name': 'LendingClub.get_historical_loan_data', 'description': 'Retrieve historical loan data from LendingClub for a specified time period.', 'required_parameters': [{'name': 'time_period', 'description': 'The time period for which historical data is required.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'loan_data', 'description': 'The historical loan data for the specified time period.'}]}], ['SoFi.get_historical_loan_data', {'name': 'SoFi.get_historical_loan_data', 'description': 'Retrieve historical loan data from SoFi for a specified time period.', 'required_parameters': [{'name': 'time_period', 'description': 'The time period for which historical data is required.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'loan_data', 'description': 'The historical loan data for the specified time period.'}]}], ['LendingClub.get_real_time_loan_data', {'name': 'LendingClub.get_real_time_loan_data', 'description': 'Retrieve real-time loan data from LendingClub.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'loan_data', 'description': 'The real-time loan data.'}]}], ['SoFi.get_real_time_loan_data', {'name': 'SoFi.get_real_time_loan_data', 'description': 'Retrieve real-time loan data from SoFi.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'loan_data', 'description': 'The real-time loan data.'}]}], ['MarketAnalysis.analyze_loan_services', {'name': 'MarketAnalysis.analyze_loan_services', 'description': 'Analyze the market performance of loan services based on provided data.', 'required_parameters': [{'name': 'data', 'description': 'The data to be analyzed, including historical and real-time loan data from LendingClub and SoFi.', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'The analysis result of the market performance.'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': 'Generate an investment strategy based on the analysis result.', 'required_parameters': [{'name': 'analysis_result', 'description': 'The result of the market analysis.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'The generated investment strategy.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我打算进行金融科技贷款投资。首先，获取LendingClub和SoFi过去一年的贷款服务历史数据。然后，获取当前LendingClub和SoFi的实时贷款服务数据。接着，分析这两种贷款服务的市场表现。最后，基于分析结果，提供一个金融科技贷款投资策略建议。"
            }
        ]
    },
    "133": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_ticker_news",
                "AirbnbSearch.get_property_details",
                "ArxivSearch.get_arxiv_article_information",
                "AirbnbSearch.get_property_checkout_price",
                "AirbnbSearch.search_property_by_place"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ArxivSearch.get_arxiv_article_information",
                "args": {
                    "query": "financial education impact on real estate investment"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PolygonFinance.get_ticker_news",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "AirbnbSearch.search_property_by_place",
                "args": {
                    "place": "New York"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AirbnbSearch.get_property_details",
                "args": {
                    "propertyId": 12345678
                }
            },
            {
                "id": 4,
                "prev": [
                    2
                ],
                "name": "AirbnbSearch.get_property_details",
                "args": {
                    "propertyId": 87654321
                }
            },
            {
                "id": 5,
                "prev": [
                    2
                ],
                "name": "AirbnbSearch.get_property_details",
                "args": {
                    "propertyId": 98765432
                }
            },
            {
                "id": 6,
                "prev": [
                    3
                ],
                "name": "AirbnbSearch.get_property_checkout_price",
                "args": {
                    "propertyId": 12345678,
                    "checkIn": "2023-11-01",
                    "checkOut": "2023-11-08"
                }
            },
            {
                "id": 7,
                "prev": [
                    4
                ],
                "name": "AirbnbSearch.get_property_checkout_price",
                "args": {
                    "propertyId": 87654321,
                    "checkIn": "2023-11-01",
                    "checkOut": "2023-11-08"
                }
            },
            {
                "id": 8,
                "prev": [
                    5
                ],
                "name": "AirbnbSearch.get_property_checkout_price",
                "args": {
                    "propertyId": 98765432,
                    "checkIn": "2023-11-01",
                    "checkOut": "2023-11-08"
                }
            },
            {
                "id": 9,
                "prev": [
                    8
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['AirbnbSearch.get_property_details', {'name': 'AirbnbSearch.get_property_details', 'description': 'This function retrieves the details of a property given its ID.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the property.'}, {'name': 'propertyType', 'description': 'The type of the property.'}, {'name': 'personCapacity', 'description': 'The capacity of the property.'}, {'name': 'rating', 'description': 'The rating of the property.'}, {'name': 'latitude', 'description': 'The latitude of the property.'}, {'name': 'longitude', 'description': 'The longitude of the property.'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['AirbnbSearch.get_property_checkout_price', {'name': 'AirbnbSearch.get_property_checkout_price', 'description': 'This function retrieves the checkout cost of a property given its ID and check-in date.', 'required_parameters': [{'name': 'propertyId', 'type': 'NUMBER', 'description': 'The ID of the property.'}, {'name': 'checkIn', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}, {'name': 'checkOut', 'type': 'STRING', 'description': 'The check-in date, it must in the format of YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'accommodationCost', 'description': 'The accommodation cost of the property.'}]}], ['AirbnbSearch.search_property_by_place', {'name': 'AirbnbSearch.search_property_by_place', 'description': 'This function takes various parameters to search properties on Airbnb.', 'required_parameters': [{'name': 'place', 'type': 'STRING', 'description': 'The name of the destination.'}], 'optional_parameters': [], 'return_data': [{'name': 'property', 'description': 'a list of at most 3 properties, containing id, name, and address.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解金融教育对房地产投资的影响。首先，请获取关于房地产投资的研究报告。然后，获取一些通过金融教育成功进行房地产投资的案例。接着，获取一些房地产投资的实用工具。最后，基于这些信息，为我提供一些房地产投资的建议。"
            }
        ]
    },
    "226": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EducationInvestment.get_current_investment",
                "EducationInvestment.get_retirement_age",
                "EducationInvestment.get_product_returns",
                "TaxPolicy.get_education_tax_policy",
                "EducationInvestment.provide_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EducationInvestment.get_current_investment",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EducationInvestment.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EducationInvestment.get_product_returns",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxPolicy.get_education_tax_policy",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "EducationInvestment.provide_investment_advice",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EducationInvestment.get_current_investment', {'name': 'EducationInvestment.get_current_investment', 'description': '获取当前的教育投资情况', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'currentInvestment', 'description': '当前的教育投资金额'}]}], ['EducationInvestment.get_retirement_age', {'name': 'EducationInvestment.get_retirement_age', 'description': '获取预计的退休年龄', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': '预计的退休年龄'}]}], ['EducationInvestment.get_product_returns', {'name': 'EducationInvestment.get_product_returns', 'description': '获取不同教育投资产品的回报率', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'productReturns', 'description': '不同教育投资产品的回报率列表'}]}], ['TaxPolicy.get_education_tax_policy', {'name': 'TaxPolicy.get_education_tax_policy', 'description': '获取所在地区的教育投资税收政策', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'taxPolicy', 'description': '教育投资的税收政策'}]}], ['EducationInvestment.provide_investment_advice', {'name': 'EducationInvestment.provide_investment_advice', 'description': '基于当前数据提供退休教育投资建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'investmentAdvice', 'description': '基于当前数据提供的投资建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解退休后的教育投资。首先，获取我当前的教育投资情况和预计退休年龄。然后，获取不同教育投资产品的回报率。接着，获取我所在地区的教育投资税收政策。最后，提供一个基于这些数据的退休教育投资建议。"
            }
        ]
    },
    "364": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "TechIndustry.analyze_trends",
                "TechCompanies.get_feedback"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "共享经济 技术创新"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TechIndustry.analyze_trends",
                "args": {
                    "data": "{{0.pub_info}}"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TechCompanies.get_feedback",
                "args": {
                    "trends": "{{1.trends}}"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['TechIndustry.analyze_trends', {'name': 'TechIndustry.analyze_trends', 'description': 'Analyze the trends in the tech industry based on provided data', 'required_parameters': [{'name': 'data', 'description': 'data to analyze', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'trends identified in the data'}]}], ['TechCompanies.get_feedback', {'name': 'TechCompanies.get_feedback', 'description': 'Get feedback from tech companies based on the analyzed trends', 'required_parameters': [{'name': 'trends', 'description': 'trends to get feedback on', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'feedback', 'description': 'feedback from tech companies'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对技术创新的影响。首先，获取共享经济平台（如滴滴和Uber）的技术创新数据。接着，分析科技行业的发展趋势。然后，获取科技公司对共享经济的反馈数据。最后，基于这些数据，提供一些关于技术创新的建议。"
            }
        ]
    },
    "464": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceNews.get_recent_news",
                "FinanceData.get_industry_financing",
                "FinanceData.get_company_financing_case",
                "FinanceAdvice.get_financing_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceNews.get_recent_news",
                "args": {
                    "time_range": "1 year",
                    "keywords": "实体经济,融资"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceData.get_industry_financing",
                "args": {
                    "industry": "制造业",
                    "time_range": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceData.get_industry_financing",
                "args": {
                    "industry": "服务业",
                    "time_range": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceData.get_company_financing_case",
                "args": {
                    "company_name": "知名实体企业",
                    "time_range": "1 year"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinanceAdvice.get_financing_strategy",
                "args": {
                    "industry": "实体经济"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceNews.get_recent_news', {'name': 'FinanceNews.get_recent_news', 'description': '获取最近一段时间内的财经新闻。', 'required_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': '时间范围，例如：1 year'}], 'optional_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': '关键词，多个关键词用逗号分隔'}], 'return_data': [{'name': 'news_list', 'description': '新闻列表，每条新闻包含标题和摘要'}]}], ['FinanceData.get_industry_financing', {'name': 'FinanceData.get_industry_financing', 'description': '获取特定行业在一段时间内的融资数据。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '行业名称，例如：制造业'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': '时间范围，例如：1 year'}], 'return_data': [{'name': 'financing_data', 'description': '融资数据，包含融资总额和融资次数'}]}], ['FinanceData.get_company_financing_case', {'name': 'FinanceData.get_company_financing_case', 'description': '获取特定公司在一段时间内的融资案例。', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': '时间范围，例如：1 year'}], 'return_data': [{'name': 'financing_cases', 'description': '融资案例列表，每个案例包含融资时间、金额和投资方'}]}], ['FinanceAdvice.get_financing_strategy', {'name': 'FinanceAdvice.get_financing_strategy', 'description': '获取特定行业的融资策略建议。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '行业名称，例如：实体经济'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '融资策略建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的融资情况。首先，获取最近一年的融资新闻。接着，提供制造业和服务业的融资数据。然后，请获取一些知名实体企业的融资案例，并分析其融资策略。最后，提供一些关于如何在实体经济中进行融资的建议。"
            }
        ]
    },
    "455": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialSecurity.get_contribution_rates",
                "InvestmentPortfolio.get_city_policies",
                "InvestmentPortfolio.get_personal_advice",
                "InvestmentPortfolio.calculate_returns"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialSecurity.get_contribution_rates",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InvestmentPortfolio.get_city_policies",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InvestmentPortfolio.get_personal_advice",
                "args": {
                    "age": 30,
                    "risk_tolerance": "moderate"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentPortfolio.calculate_returns",
                "args": {
                    "initial_investment": 50000,
                    "duration": 10,
                    "annual_return_rate": 7
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialSecurity.get_contribution_rates', {'name': 'SocialSecurity.get_contribution_rates', 'description': 'Get the contribution rates and base for social security and provident fund in a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'contribution_rates', 'description': 'the contribution rates for social security and provident fund.'}, {'name': 'base', 'description': 'the base amount for contributions.'}]}], ['InvestmentPortfolio.get_city_policies', {'name': 'InvestmentPortfolio.get_city_policies', 'description': 'Get the investment portfolio policies in a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'the investment portfolio policies in the city.'}]}], ['InvestmentPortfolio.get_personal_advice', {'name': 'InvestmentPortfolio.get_personal_advice', 'description': 'Get personalized investment portfolio advice based on age and risk tolerance.', 'required_parameters': [{'name': 'age', 'type': 'NUMBER', 'description': 'the age of the investor.'}, {'name': 'risk_tolerance', 'type': 'STRING', 'description': 'the risk tolerance level of the investor (e.g., low, moderate, high).'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'the personalized investment advice.'}]}], ['InvestmentPortfolio.calculate_returns', {'name': 'InvestmentPortfolio.calculate_returns', 'description': 'Calculate the estimated returns of an investment portfolio.', 'required_parameters': [{'name': 'initial_investment', 'type': 'NUMBER', 'description': 'the initial amount invested.'}, {'name': 'duration', 'type': 'NUMBER', 'description': 'the duration of the investment in years.'}, {'name': 'annual_return_rate', 'type': 'NUMBER', 'description': 'the expected annual return rate in percentage.'}], 'optional_parameters': [], 'return_data': [{'name': 'estimated_returns', 'description': 'the estimated returns of the investment portfolio.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解社保和公积金的缴纳对个人投资组合的影响。首先，获取社保和公积金的缴纳比例和基数。然后，获取不同城市的投资组合政策。接着，获取个人投资组合的建议和方法。最后，提供一个投资组合计算器，帮助我估算投资组合收益。"
            }
        ]
    },
    "175": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceAPI.get_historical_prices",
                "EconomicDataAPI.get_economic_indicators",
                "FinanceAPI.get_real_time_volume",
                "InvestmentStrategyAPI.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceAPI.get_historical_prices",
                "args": {
                    "ticker": "PALL",
                    "period": "5y"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomicDataAPI.get_economic_indicators",
                "args": {
                    "indicator": "GDP",
                    "period": "5y"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "EconomicDataAPI.get_economic_indicators",
                "args": {
                    "indicator": "Inflation",
                    "period": "5y"
                }
            },
            {
                "id": 3,
                "prev": [
                    0
                ],
                "name": "EconomicDataAPI.get_economic_indicators",
                "args": {
                    "indicator": "InterestRates",
                    "period": "5y"
                }
            },
            {
                "id": 4,
                "prev": [
                    1,
                    2,
                    3
                ],
                "name": "FinanceAPI.get_real_time_volume",
                "args": {
                    "ticker": "PALL"
                }
            },
            {
                "id": 5,
                "prev": [
                    0,
                    4
                ],
                "name": "InvestmentStrategyAPI.generate_strategy",
                "args": {}
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceAPI.get_historical_prices', {'name': 'FinanceAPI.get_historical_prices', 'description': '获取特定股票代码的历史价格数据', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': '股票代码'}, {'name': 'period', 'type': 'STRING', 'description': '时间周期，如5y表示5年'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': '历史价格数据列表'}]}], ['EconomicDataAPI.get_economic_indicators', {'name': 'EconomicDataAPI.get_economic_indicators', 'description': '获取特定经济指标的数据', 'required_parameters': [{'name': 'indicator', 'type': 'STRING', 'description': '经济指标名称，如GDP、Inflation、InterestRates'}, {'name': 'period', 'type': 'STRING', 'description': '时间周期，如5y表示5年'}], 'optional_parameters': [], 'return_data': [{'name': 'indicators', 'description': '经济指标数据列表'}]}], ['FinanceAPI.get_real_time_volume', {'name': 'FinanceAPI.get_real_time_volume', 'description': '获取特定股票代码的实时交易量', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': '股票代码'}], 'optional_parameters': [], 'return_data': [{'name': 'volume', 'description': '实时交易量数据'}]}], ['InvestmentStrategyAPI.generate_strategy', {'name': 'InvestmentStrategyAPI.generate_strategy', 'description': '基于输入数据生成投资策略', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '生成的投资策略'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估钯金市场的投资机会。首先，请获取钯金在过去五年的年度价格数据。然后，获取全球经济指标对钯金价格的影响分析。接下来，获取钯金的实时交易量。最后，请提供基于这些数据的投资策略。"
            }
        ]
    },
    "295": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "YahooFinance.get_stock_data",
                "DataAnalysis.analyze_stock_data",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "锚定效应 行为金融学"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "YahooFinance.get_stock_data",
                "args": {
                    "company": "Apple",
                    "time_period": "1y"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAnalysis.analyze_stock_data",
                "args": {
                    "data": "{{1.return_data}}"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "analysis_result": "{{2.return_data}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['YahooFinance.get_stock_data', {'name': 'YahooFinance.get_stock_data', 'description': 'Get stock data for a specific company over a specified time period', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}, {'name': 'time_period', 'description': 'time period for the data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'stock_data', 'description': 'historical stock data for the specified company and time period'}]}], ['DataAnalysis.analyze_stock_data', {'name': 'DataAnalysis.analyze_stock_data', 'description': 'Analyze stock data to detect patterns or anomalies', 'required_parameters': [{'name': 'data', 'description': 'stock data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'result of the analysis'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': 'Generate investment strategies based on analysis results', 'required_parameters': [{'name': 'analysis_result', 'description': 'result of the data analysis', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'generated investment strategy'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解行为金融学中的锚定效应如何影响投资者决策。首先，请获取关于锚定效应的最新研究报告。然后，获取某大型科技公司在过去一年的股价波动数据。接着，分析这些数据中是否存在锚定效应的迹象。最后，基于分析结果，为我提供一些避免锚定效应的投资策略。"
            }
        ]
    },
    "71": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "AssetTracker.get_current_assets",
                "FamilyTree.get_family_members",
                "FinancialPlanner.recommend_estate_plan",
                "FinancialPlanner.calculate_inheritance_distribution",
                "ConsultationService.get_consultation_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "AssetTracker.get_current_assets",
                "args": {}
            },
            {
                "id": 1,
                "prev": [],
                "name": "FamilyTree.get_family_members",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "FinancialPlanner.recommend_estate_plan",
                "args": {
                    "assets": "{{0.assets}}",
                    "family_members": "{{1.family_members}}",
                    "financial_goals": "Ensure fair distribution and minimize tax implications"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialPlanner.calculate_inheritance_distribution",
                "args": {
                    "estate_plan": "{{2.estate_plan}}",
                    "family_members": "{{1.family_members}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ConsultationService.get_consultation_link",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['AssetTracker.get_current_assets', {'name': 'AssetTracker.get_current_assets', 'description': 'Retrieve the current assets of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'assets', 'description': 'A list of assets including property, investments, and savings.'}]}], ['FamilyTree.get_family_members', {'name': 'FamilyTree.get_family_members', 'description': 'Retrieve the family members of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'family_members', 'description': 'A list of family members including names and relationships.'}]}], ['FinancialPlanner.recommend_estate_plan', {'name': 'FinancialPlanner.recommend_estate_plan', 'description': 'Recommend an estate planning strategy based on the user's assets, family members, and financial goals.', 'required_parameters': [{'name': 'assets', 'type': 'LIST', 'description': 'The list of assets.'}, {'name': 'family_members', 'type': 'LIST', 'description': 'The list of family members.'}, {'name': 'financial_goals', 'type': 'STRING', 'description': 'The financial goals of the user.'}], 'optional_parameters': [], 'return_data': [{'name': 'estate_plan', 'description': 'The recommended estate planning strategy.'}]}], ['FinancialPlanner.calculate_inheritance_distribution', {'name': 'FinancialPlanner.calculate_inheritance_distribution', 'description': 'Calculate the inheritance distribution based on the recommended estate plan and family members.', 'required_parameters': [{'name': 'estate_plan', 'type': 'STRING', 'description': 'The recommended estate plan.'}, {'name': 'family_members', 'type': 'LIST', 'description': 'The list of family members.'}], 'optional_parameters': [], 'return_data': [{'name': 'inheritance_distribution', 'description': 'The calculated inheritance distribution.'}]}], ['ConsultationService.get_consultation_link', {'name': 'ConsultationService.get_consultation_link', 'description': 'Get a link for estate planning consultation.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'consultation_link', 'description': 'The link for estate planning consultation.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行遗产规划。首先，请获取我当前的资产状况。然后，根据我的家庭成员和财务目标，推荐一个遗产规划方案。接下来，计算如果我按照推荐的方案进行规划，可以确保的遗产分配。最后，提供一个遗产规划咨询的链接。"
            }
        ]
    },
    "345": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FacebookAds.get_ad_data",
                "FacebookAds.analyze_ad_performance",
                "FacebookAds.evaluate_ad_model",
                "FacebookAds.generate_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FacebookAds.get_ad_data",
                "args": {
                    "company": "Facebook",
                    "years": 5
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FacebookAds.analyze_ad_performance",
                "args": {
                    "data": "{{0.data}}",
                    "metrics": [
                        "click_rate",
                        "conversion_rate"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FacebookAds.evaluate_ad_model",
                "args": {
                    "performance_data": "{{1.performance_data}}",
                    "model_type": "standard"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FacebookAds.generate_report",
                "args": {
                    "evaluation_data": "{{2.evaluation_data}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FacebookAds.get_ad_data', {'name': 'FacebookAds.get_ad_data', 'description': 'Get advertising data for a specified company over a specified number of years', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}, {'name': 'years', 'description': 'number of years of data to retrieve', 'type': 'INTEGER'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'ad data for the specified company and years'}]}],\n['FacebookAds.analyze_ad_performance', {'name': 'FacebookAds.analyze_ad_performance', 'description': 'Analyze the performance of ads based on specified metrics', 'required_parameters': [{'name': 'data', 'description': 'ad data to analyze', 'type': 'STRING'}, {'name': 'metrics', 'description': 'list of metrics to analyze', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'performance_data', 'description': 'analyzed performance data'}]}],\n['FacebookAds.evaluate_ad_model', {'name': 'FacebookAds.evaluate_ad_model', 'description': 'Evaluate the performance of an ad model based on the provided data', 'required_parameters': [{'name': 'performance_data', 'description': 'performance data to evaluate', 'type': 'STRING'}, {'name': 'model_type', 'description': 'type of model to evaluate', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation_data', 'description': 'evaluation results of the ad model'}]}],\n['FacebookAds.generate_report', {'name': 'FacebookAds.generate_report', 'description': 'Generate a report based on the evaluation data', 'required_parameters': [{'name': 'evaluation_data', 'description': 'evaluation data to generate the report from', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'generated report based on the evaluation data'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析Facebook公司的广告投放效果。首先，请获取Facebook公司近五年的广告投放数据。然后，分析其广告点击率和转化率。接下来，使用广告效果模型评估其广告投放效果。最后，提供一个基于评估的广告投放效果报告。"
            }
        ]
    },
    "181": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_historical_prices",
                "CentralBankAnalysis.get_policy_impact",
                "TradingVolume.get_real_time_volume",
                "MarketSentiment.analyze_data"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PolygonFinance.get_historical_prices",
                "args": {
                    "currency_pair": "NZD/USD",
                    "time_period": "6_months"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CentralBankAnalysis.get_policy_impact",
                "args": {
                    "currency_pair": "NZD/USD",
                    "time_period": "6_months"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TradingVolume.get_real_time_volume",
                "args": {
                    "currency_pair": "NZD/USD"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketSentiment.analyze_data",
                "args": {
                    "historical_prices": "PolygonFinance.get_historical_prices",
                    "policy_impact": "CentralBankAnalysis.get_policy_impact",
                    "real_time_volume": "TradingVolume.get_real_time_volume"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_historical_prices', {'name': 'PolygonFinance.get_historical_prices', 'description': 'get the historical prices of a currency pair over a specified time period', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': 'The currency pair to retrieve prices for.'}, {'name': 'time_period', 'type': 'STRING', 'description': 'The time period for which to retrieve prices, e.g., 6_months.'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'A list of daily prices for the specified currency pair.'}]}], ['CentralBankAnalysis.get_policy_impact', {'name': 'CentralBankAnalysis.get_policy_impact', 'description': 'get the impact of central bank policies on a currency pair over a specified time period', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': 'The currency pair to analyze.'}, {'name': 'time_period', 'type': 'STRING', 'description': 'The time period for which to analyze policy impact, e.g., 6_months.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact', 'description': 'A detailed analysis of the policy impact on the currency pair.'}]}], ['TradingVolume.get_real_time_volume', {'name': 'TradingVolume.get_real_time_volume', 'description': 'get the real-time trading volume of a currency pair', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': 'The currency pair to retrieve trading volume for.'}], 'optional_parameters': [], 'return_data': [{'name': 'volume', 'description': 'The real-time trading volume for the specified currency pair.'}]}], ['MarketSentiment.analyze_data', {'name': 'MarketSentiment.analyze_data', 'description': 'analyze the data to assess market sentiment', 'required_parameters': [{'name': 'historical_prices', 'type': 'STRING', 'description': 'The API used to retrieve historical prices.'}, {'name': 'policy_impact', 'type': 'STRING', 'description': 'The API used to retrieve policy impact analysis.'}, {'name': 'real_time_volume', 'type': 'STRING', 'description': 'The API used to retrieve real-time trading volume.'}], 'optional_parameters': [], 'return_data': [{'name': 'sentiment', 'description': 'The market sentiment based on the analyzed data.'}]}]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估新西兰元兑美元汇率的市场情绪。首先，请获取新西兰元兑美元汇率在过去六个月内的每日价格数据。然后，获取新西兰央行政策对汇率的影响分析。接下来，获取新西兰元兑美元的实时交易量。最后，请分析这些数据以评估市场情绪。"
            }
        ]
    },
    "406": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "DataAnalysis.analyze_tech_investment",
                "DataAnalysis.compare_tech_investment",
                "Recommendation.improve_tech_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "Green Economy Project Tech Investment"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_tech_investment",
                "args": {
                    "data": "GoogleScholar.search_google_scholar.return_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAnalysis.compare_tech_investment",
                "args": {
                    "green_economy_data": "DataAnalysis.analyze_tech_investment.return_data",
                    "other_projects_data": "GoogleScholar.search_google_scholar.return_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Recommendation.improve_tech_investment",
                "args": {
                    "comparison_data": "DataAnalysis.compare_tech_investment.return_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['DataAnalysis.analyze_tech_investment', {'name': 'DataAnalysis.analyze_tech_investment', 'description': 'Analyze the tech investment data of green economy projects', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'tech_investment_data', 'description': 'analyzed tech investment data'}, {'name': 'tech_transfer_rate', 'description': 'tech transfer rate of the projects'}]}], ['DataAnalysis.compare_tech_investment', {'name': 'DataAnalysis.compare_tech_investment', 'description': 'Compare the tech investment effect between green economy projects and other projects', 'required_parameters': [{'name': 'green_economy_data', 'description': 'data of green economy projects', 'type': 'STRING'}, {'name': 'other_projects_data', 'description': 'data of other projects', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_result', 'description': 'comparison result of tech investment effect'}]}], ['Recommendation.improve_tech_investment', {'name': 'Recommendation.improve_tech_investment', 'description': 'Provide recommendations to improve the tech investment efficiency of green economy projects', 'required_parameters': [{'name': 'comparison_data', 'description': 'comparison data of tech investment effect', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'recommendations to improve tech investment efficiency'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解绿色经济项目的科技投入情况。首先，获取过去一年内绿色经济项目的科技研发投入数据。接着，分析这些项目的科技成果转化率。然后，比较绿色经济项目与其他项目的科技投入效果。最后，提供一些关于如何提高绿色经济项目科技投入效益的建议。"
            }
        ]
    },
    "171": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PlatinumMarket.get_annual_price_data",
                "GlobalEconomy.get_economic_indicators",
                "PlatinumMarket.get_real_time_trading_volume",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PlatinumMarket.get_annual_price_data",
                "args": {
                    "years": 5
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GlobalEconomy.get_economic_indicators",
                "args": {
                    "indicator": "GDP",
                    "years": 5
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "GlobalEconomy.get_economic_indicators",
                "args": {
                    "indicator": "Inflation",
                    "years": 5
                }
            },
            {
                "id": 3,
                "prev": [
                    0
                ],
                "name": "GlobalEconomy.get_economic_indicators",
                "args": {
                    "indicator": "InterestRates",
                    "years": 5
                }
            },
            {
                "id": 4,
                "prev": [
                    0
                ],
                "name": "PlatinumMarket.get_real_time_trading_volume",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    1,
                    2,
                    3,
                    4
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "price_data": "PlatinumMarket.get_annual_price_data",
                    "economic_indicators": [
                        "GlobalEconomy.get_economic_indicators"
                    ],
                    "trading_volume": "PlatinumMarket.get_real_time_trading_volume"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PlatinumMarket.get_annual_price_data', {'name': 'PlatinumMarket.get_annual_price_data', 'description': '获取铂金在过去若干年的年度价格数据', 'required_parameters': [{'name': 'years', 'type': 'NUMBER', 'description': '获取数据的年限'}], 'optional_parameters': [], 'return_data': [{'name': 'price_data', 'description': '铂金年度价格数据'}]}], ['GlobalEconomy.get_economic_indicators', {'name': 'GlobalEconomy.get_economic_indicators', 'description': '获取全球经济指标数据', 'required_parameters': [{'name': 'indicator', 'type': 'STRING', 'description': '经济指标类型，如GDP、Inflation、InterestRates'}, {'name': 'years', 'type': 'NUMBER', 'description': '获取数据的年限'}], 'optional_parameters': [], 'return_data': [{'name': 'indicator_data', 'description': '经济指标数据'}]}], ['PlatinumMarket.get_real_time_trading_volume', {'name': 'PlatinumMarket.get_real_time_trading_volume', 'description': '获取铂金的实时交易量', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'trading_volume', 'description': '铂金的实时交易量'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': '基于数据生成投资策略', 'required_parameters': [{'name': 'price_data', 'type': 'STRING', 'description': '铂金价格数据API'}, {'name': 'economic_indicators', 'type': 'LIST', 'description': '经济指标数据API列表'}, {'name': 'trading_volume', 'type': 'STRING', 'description': '铂金交易量数据API'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '生成的投资策略'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想评估铂金市场的投资机会。首先，请获取铂金在过去五年的年度价格数据。然后，获取全球经济指标对铂金价格的影响分析。接下来，获取铂金的实时交易量。最后，请提供基于这些数据的投资策略。"
            }
        ]
    },
    "64": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CurrencyExchange.get_exchange_rates",
                "TradingStrategy.recommend",
                "RiskCalculator.calculate_risk",
                "TradingPlatform.login"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CurrencyExchange.get_exchange_rates",
                "args": {
                    "currency_pairs": [
                        "EUR/USD",
                        "GBP/USD",
                        "USD/JPY"
                    ]
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TradingStrategy.recommend",
                "args": {
                    "risk_preference": "moderate",
                    "current_rates": {
                        "EUR/USD": 1.18,
                        "GBP/USD": 1.39,
                        "USD/JPY": 110.25
                    }
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RiskCalculator.calculate_risk",
                "args": {
                    "strategy": "swing_trading",
                    "initial_capital": 10000,
                    "leverage": 10
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TradingPlatform.login",
                "args": {
                    "platform": "MetaTrader"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CurrencyExchange.get_exchange_rates', {'name': 'CurrencyExchange.get_exchange_rates', 'description': '获取主要货币对的实时汇率', 'required_parameters': [{'name': 'currency_pairs', 'description': '需要查询的货币对列表', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': '货币对的实时汇率'}]}], ['TradingStrategy.recommend', {'name': 'TradingStrategy.recommend', 'description': '根据用户的风险偏好推荐外汇交易策略', 'required_parameters': [{'name': 'risk_preference', 'description': '用户的风险偏好', 'type': 'STRING'}, {'name': 'current_rates', 'description': '当前的汇率', 'type': 'DICT'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '推荐的交易策略'}]}], ['RiskCalculator.calculate_risk', {'name': 'RiskCalculator.calculate_risk', 'description': '计算按照推荐策略进行交易的可能收益和风险', 'required_parameters': [{'name': 'strategy', 'description': '推荐的交易策略', 'type': 'STRING'}, {'name': 'initial_capital', 'description': '初始资本', 'type': 'NUMBER'}, {'name': 'leverage', 'description': '杠杆倍数', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'potential_profit', 'description': '可能的收益'}, {'name': 'potential_loss', 'description': '可能的损失'}]}], ['TradingPlatform.login', {'name': 'TradingPlatform.login', 'description': '提供一个外汇交易平台的登录链接', 'required_parameters': [{'name': 'platform', 'description': '交易平台名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'login_link', 'description': '登录链接'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行外汇交易。首先，请获取当前主要货币对的实时汇率。然后，根据我的风险偏好，推荐一个外汇交易策略。接下来，计算如果我按照推荐的策略进行交易，可能的收益和风险。最后，提供一个外汇交易平台的登录链接。"
            }
        ]
    },
    "6": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CryptoData.get_historical_volume",
                "CryptoData.get_real_time_volume",
                "CryptoData.analyze_volume_fluctuation",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CryptoData.get_historical_volume",
                "args": {
                    "currency": "Bitcoin",
                    "time_period": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "CryptoData.get_historical_volume",
                "args": {
                    "currency": "Ethereum",
                    "time_period": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [],
                "name": "CryptoData.get_real_time_volume",
                "args": {
                    "currency": "Bitcoin"
                }
            },
            {
                "id": 3,
                "prev": [],
                "name": "CryptoData.get_real_time_volume",
                "args": {
                    "currency": "Ethereum"
                }
            },
            {
                "id": 4,
                "prev": [
                    0,
                    1,
                    2,
                    3
                ],
                "name": "CryptoData.analyze_volume_fluctuation",
                "args": {
                    "currency1": "Bitcoin",
                    "currency2": "Ethereum",
                    "historical_data1": "Bitcoin_historical_data",
                    "historical_data2": "Ethereum_historical_data",
                    "real_time_data1": "Bitcoin_real_time_data",
                    "real_time_data2": "Ethereum_real_time_data"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "analysis_result": "analysis_result"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CryptoData.get_historical_volume', {'name': 'CryptoData.get_historical_volume', 'description': '获取指定加密货币在过去指定时间段内的交易量历史数据。', 'required_parameters': [{'name': 'currency', 'description': '加密货币的名称', 'type': 'STRING'}, {'name': 'time_period', 'description': '时间段，例如：1 year', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_volume', 'description': '历史交易量数据'}]}], ['CryptoData.get_real_time_volume', {'name': 'CryptoData.get_real_time_volume', 'description': '获取指定加密货币的实时交易量数据。', 'required_parameters': [{'name': 'currency', 'description': '加密货币的名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'real_time_volume', 'description': '实时交易量数据'}]}], ['CryptoData.analyze_volume_fluctuation', {'name': 'CryptoData.analyze_volume_fluctuation', 'description': '分析两种加密货币的交易量波动情况。', 'required_parameters': [{'name': 'currency1', 'description': '第一种加密货币的名称', 'type': 'STRING'}, {'name': 'currency2', 'description': '第二种加密货币的名称', 'type': 'STRING'}, {'name': 'historical_data1', 'description': '第一种加密货币的历史交易量数据', 'type': 'STRING'}, {'name': 'historical_data2', 'description': '第二种加密货币的历史交易量数据', 'type': 'STRING'}, {'name': 'real_time_data1', 'description': '第一种加密货币的实时交易量数据', 'type': 'STRING'}, {'name': 'real_time_data2', 'description': '第二种加密货币的实时交易量数据', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': '分析结果'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': '基于分析结果生成区块链投资策略建议。', 'required_parameters': [{'name': 'analysis_result', 'description': '分析结果', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy_recommendation', 'description': '投资策略建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我打算进行区块链投资。首先，获取比特币和以太坊过去一年的交易量历史数据。然后，获取当前比特币和以太坊的实时交易量。接着，分析这两种加密货币的交易量波动情况。最后，基于分析结果，提供一个区块链投资策略建议。"
            }
        ]
    },
    "352": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "AmazonData.fetch_logistics_data",
                "DataAnalysis.analyze_cost_and_time",
                "EfficiencyModel.evaluate_logistics_efficiency",
                "ReportGenerator.generate_efficiency_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "AmazonData.fetch_logistics_data",
                "args": {
                    "company": "Amazon",
                    "years": 5
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_cost_and_time",
                "args": {
                    "data": "{{0}}"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EfficiencyModel.evaluate_logistics_efficiency",
                "args": {
                    "analysis_result": "{{1}}"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ReportGenerator.generate_efficiency_report",
                "args": {
                    "evaluation_result": "{{2}}"
                }
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['AmazonData.fetch_logistics_data', {'name': 'AmazonData.fetch_logistics_data', 'description': 'Fetch logistics data for a specified company over a specified number of years', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}, {'name': 'years', 'description': 'number of years to fetch data for', 'type': 'INTEGER'}], 'optional_parameters': [], 'return_data': [{'name': 'logistics_data', 'description': 'logistics data for the specified company and years'}]}],\n['DataAnalysis.analyze_cost_and_time', {'name': 'DataAnalysis.analyze_cost_and_time', 'description': 'Analyze logistics cost and time based on provided data', 'required_parameters': [{'name': 'data', 'description': 'logistics data to analyze', 'type': 'JSON'}], 'optional_parameters': [], 'return_data': [{'name': 'cost_analysis', 'description': 'analysis of logistics cost'}, {'name': 'time_analysis', 'description': 'analysis of logistics time'}]}],\n['EfficiencyModel.evaluate_logistics_efficiency', {'name': 'EfficiencyModel.evaluate_logistics_efficiency', 'description': 'Evaluate logistics efficiency based on analysis results', 'required_parameters': [{'name': 'analysis_result', 'description': 'analysis results to evaluate', 'type': 'JSON'}], 'optional_parameters': [], 'return_data': [{'name': 'efficiency_score', 'description': 'efficiency score based on the analysis'}]}],\n['ReportGenerator.generate_efficiency_report', {'name': 'ReportGenerator.generate_efficiency_report', 'description': 'Generate a report based on the evaluation results', 'required_parameters': [{'name': 'evaluation_result', 'description': 'evaluation results to generate report from', 'type': 'JSON'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'generated efficiency report'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想评估Amazon公司的物流效率。首先，请获取Amazon公司近五年的物流数据。然后，分析其物流成本和物流时效。接下来，使用物流效率模型评估其物流效率。最后，提供一个基于评估的物流效率报告。"
            }
        ]
    },
    "357": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Airbnb.get_listings_growth",
                "CityHousing.get_housing_price_changes",
                "Survey.get_landlord_satisfaction"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Airbnb.get_listings_growth",
                "args": {
                    "city": "New York"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CityHousing.get_housing_price_changes",
                "args": {
                    "city": "New York"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Survey.get_landlord_satisfaction",
                "args": {
                    "platform": "Airbnb"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Airbnb.get_listings_growth', {'name': 'Airbnb.get_listings_growth', 'description': 'Get the growth data of Airbnb listings in a specific city', 'required_parameters': [{'name': 'city', 'description': 'the name of the city', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'growth_rate', 'description': 'the growth rate of listings'}, {'name': 'total_listings', 'description': 'total number of listings'}]}],\n['CityHousing.get_housing_price_changes', {'name': 'CityHousing.get_housing_price_changes', 'description': 'Get the changes in housing prices in a specific city', 'required_parameters': [{'name': 'city', 'description': 'the name of the city', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'price_change_rate', 'description': 'the rate of change in housing prices'}, {'name': 'average_price', 'description': 'average housing price'}]}],\n['Survey.get_landlord_satisfaction', {'name': 'Survey.get_landlord_satisfaction', 'description': 'Get the satisfaction survey data of landlords on a specific platform', 'required_parameters': [{'name': 'platform', 'description': 'the name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_rate', 'description': 'the satisfaction rate of landlords'}, {'name': 'common_issues', 'description': 'common issues reported by landlords'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对房地产市场的影响。首先，获取共享经济平台（如Airbnb）的房源增长数据。接着，分析城市房价的变化情况。然后，获取房东对共享经济平台的满意度调查数据。最后，基于这些数据，提供一些关于房地产市场调控的建议。"
            }
        ]
    },
    "471": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_latest_news",
                "EconomyAPI.get_industry_investment",
                "CompanyAPI.get_case_study",
                "ConsultingAPI.get_recommendation"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_latest_news",
                "args": {
                    "keywords": "实体经济 研发",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomyAPI.get_industry_investment",
                "args": {
                    "industry": "制造业",
                    "time_range": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EconomyAPI.get_industry_investment",
                "args": {
                    "industry": "服务业",
                    "time_range": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CompanyAPI.get_case_study",
                "args": {
                    "company_name": "知名实体企业",
                    "topic": "研发策略"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ConsultingAPI.get_recommendation",
                "args": {
                    "topic": "实体经济 研发"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_latest_news', {'name': 'NewsAPI.get_latest_news', 'description': '获取指定关键词和时间范围内的最新新闻。', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': '搜索的关键词。'}, {'name': 'time_range', 'type': 'STRING', 'description': '时间范围，例如：1 year, 6 months。'}], 'optional_parameters': [], 'return_data': [{'name': 'news_list', 'description': '新闻列表，每条新闻包含标题和摘要。'}]}], ['EconomyAPI.get_industry_investment', {'name': 'EconomyAPI.get_industry_investment', 'description': '获取指定行业在特定时间范围内的研发投入数据。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '行业名称，例如：制造业、服务业。'}, {'name': 'time_range', 'type': 'STRING', 'description': '时间范围，例如：1 year, 6 months。'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_data', 'description': '研发投入数据，包含金额和时间。'}]}], ['CompanyAPI.get_case_study', {'name': 'CompanyAPI.get_case_study', 'description': '获取指定公司的案例研究，特别是关于特定主题的。', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': '公司名称。'}, {'name': 'topic', 'type': 'STRING', 'description': '研究主题，例如：研发策略、市场分析。'}], 'optional_parameters': [], 'return_data': [{'name': 'case_study', 'description': '案例研究内容，包含策略分析和实施细节。'}]}], ['ConsultingAPI.get_recommendation', {'name': 'ConsultingAPI.get_recommendation', 'description': '获取关于特定主题的咨询建议。', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': '咨询主题，例如：实体经济 研发、市场拓展。'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendation', 'description': '咨询建议，包含策略和实施步骤。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的研发情况。首先，获取最近一年的研发新闻。接着，提供制造业和服务业的研发投入数据。然后，请获取一些知名实体企业的研发案例，并分析其研发策略。最后，提供一些关于如何在实体经济中进行研发的建议。"
            }
        ]
    },
    "1": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BondMarket.get_historical_yield",
                "BondMarket.get_real_time_yield",
                "BondMarket.analyze_yield_fluctuation",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BondMarket.get_historical_yield",
                "args": {
                    "country": "USA",
                    "duration": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "BondMarket.get_historical_yield",
                "args": {
                    "country": "China",
                    "duration": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "BondMarket.get_real_time_yield",
                "args": {
                    "country": "USA"
                }
            },
            {
                "id": 3,
                "prev": [
                    0,
                    1
                ],
                "name": "BondMarket.get_real_time_yield",
                "args": {
                    "country": "China"
                }
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "BondMarket.analyze_yield_fluctuation",
                "args": {
                    "country1": "USA",
                    "country2": "China"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "analysis_result": "analysis_result_placeholder"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BondMarket.get_historical_yield', {'name': 'BondMarket.get_historical_yield', 'description': '获取指定国家过去一年的债券收益率历史数据', 'required_parameters': [{'name': 'country', 'description': '国家名称', 'type': 'STRING'}, {'name': 'duration', 'description': '时间范围', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'yield_data', 'description': '收益率历史数据'}]}], ['BondMarket.get_real_time_yield', {'name': 'BondMarket.get_real_time_yield', 'description': '获取指定国家当前的债券实时收益率', 'required_parameters': [{'name': 'country', 'description': '国家名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'real_time_yield', 'description': '实时收益率'}]}], ['BondMarket.analyze_yield_fluctuation', {'name': 'BondMarket.analyze_yield_fluctuation', 'description': '分析两个国家债券收益率的波动情况', 'required_parameters': [{'name': 'country1', 'description': '第一个国家名称', 'type': 'STRING'}, {'name': 'country2', 'description': '第二个国家名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'fluctuation_analysis', 'description': '收益率波动分析结果'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': '基于分析结果生成债券投资策略建议', 'required_parameters': [{'name': 'analysis_result', 'description': '分析结果', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy_recommendation', 'description': '投资策略建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解当前的债券市场趋势。首先，获取美国国债和中国国债过去一年的收益率历史数据。然后，获取当前美国国债和中国国债的实时收益率。接着，分析这两种债券的收益率波动情况。最后，基于分析结果，提供一个债券投资策略建议。"
            }
        ]
    },
    "76": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Crowdfunding.get_hot_projects",
                "Crowdfunding.get_project_details",
                "Crowdfunding.calculate_potential_returns",
                "Crowdfunding.calculate_risk",
                "Crowdfunding.get_platform_login_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Crowdfunding.get_hot_projects",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "Crowdfunding.get_project_details",
                "args": {
                    "projectId": 12345
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "Crowdfunding.get_project_details",
                "args": {
                    "projectId": 67890
                }
            },
            {
                "id": 3,
                "prev": [
                    0
                ],
                "name": "Crowdfunding.get_project_details",
                "args": {
                    "projectId": 54321
                }
            },
            {
                "id": 4,
                "prev": [
                    1
                ],
                "name": "Crowdfunding.calculate_potential_returns",
                "args": {
                    "projectId": 12345,
                    "investmentAmount": 1000
                }
            },
            {
                "id": 5,
                "prev": [
                    2
                ],
                "name": "Crowdfunding.calculate_potential_returns",
                "args": {
                    "projectId": 67890,
                    "investmentAmount": 1000
                }
            },
            {
                "id": 6,
                "prev": [
                    3
                ],
                "name": "Crowdfunding.calculate_potential_returns",
                "args": {
                    "projectId": 54321,
                    "investmentAmount": 1000
                }
            },
            {
                "id": 7,
                "prev": [
                    1
                ],
                "name": "Crowdfunding.calculate_risk",
                "args": {
                    "projectId": 12345
                }
            },
            {
                "id": 8,
                "prev": [
                    2
                ],
                "name": "Crowdfunding.calculate_risk",
                "args": {
                    "projectId": 67890
                }
            },
            {
                "id": 9,
                "prev": [
                    3
                ],
                "name": "Crowdfunding.calculate_risk",
                "args": {
                    "projectId": 54321
                }
            },
            {
                "id": 10,
                "prev": [
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                "name": "Crowdfunding.get_platform_login_link",
                "args": {}
            },
            {
                "id": 11,
                "prev": [
                    10
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Crowdfunding.get_hot_projects', {'name': 'Crowdfunding.get_hot_projects', 'description': 'Retrieve a list of currently hot crowdfunding projects.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'projects', 'description': 'A list of at most 3 hot projects, containing id, name, and description.'}]}], ['Crowdfunding.get_project_details', {'name': 'Crowdfunding.get_project_details', 'description': 'Retrieve detailed information about a specific crowdfunding project.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the project.'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'The title of the project.'}, {'name': 'description', 'description': 'The description of the project.'}, {'name': 'goal', 'description': 'The funding goal of the project.'}, {'name': 'currentFunding', 'description': 'The current funding amount.'}, {'name': 'endDate', 'description': 'The end date of the project.'}]}], ['Crowdfunding.calculate_potential_returns', {'name': 'Crowdfunding.calculate_potential_returns', 'description': 'Calculate the potential returns on investment for a specific project.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the project.'}, {'name': 'investmentAmount', 'type': 'NUMBER', 'description': 'The amount of money to invest.'}], 'optional_parameters': [], 'return_data': [{'name': 'potentialReturns', 'description': 'The potential returns on investment.'}]}], ['Crowdfunding.calculate_risk', {'name': 'Crowdfunding.calculate_risk', 'description': 'Calculate the risk associated with a specific project.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the project.'}], 'optional_parameters': [], 'return_data': [{'name': 'riskLevel', 'description': 'The risk level of the project.'}]}], ['Crowdfunding.get_platform_login_link', {'name': 'Crowdfunding.get_platform_login_link', 'description': 'Get the login link for the crowdfunding platform.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'loginLink', 'description': 'The login link for the platform.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行众筹投资。首先，请获取当前热门众筹项目的信息。然后，根据我的投资预算和风险偏好，推荐一个众筹项目。接下来，计算如果我投资推荐的众筹项目，可能的收益和风险。最后，提供一个众筹投资平台的登录链接。"
            }
        ]
    },
    "136": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CharityResearch.get_charity_donation_report",
                "FinancialEducation.get_successful_charity_cases",
                "CharityTools.get_charity_donation_tools",
                "CharityAdvice.provide_charity_donation_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CharityResearch.get_charity_donation_report",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialEducation.get_successful_charity_cases",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CharityTools.get_charity_donation_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CharityAdvice.provide_charity_donation_advice",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CharityResearch.get_charity_donation_report', {'name': 'CharityResearch.get_charity_donation_report', 'description': '获取关于慈善捐赠的研究报告', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '研究报告的详细内容'}]}], ['FinancialEducation.get_successful_charity_cases', {'name': 'FinancialEducation.get_successful_charity_cases', 'description': '获取通过金融教育成功进行慈善捐赠的案例', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '成功案例的详细内容'}]}], ['CharityTools.get_charity_donation_tools', {'name': 'CharityTools.get_charity_donation_tools', 'description': '获取慈善捐赠的实用工具', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': '实用工具的详细内容'}]}], ['CharityAdvice.provide_charity_donation_advice', {'name': 'CharityAdvice.provide_charity_donation_advice', 'description': '基于获取的信息提供慈善捐赠的建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '慈善捐赠的建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对慈善捐赠的影响。首先，请获取关于慈善捐赠的研究报告。然后，获取一些通过金融教育成功进行慈善捐赠的案例。接着，获取一些慈善捐赠的实用工具。最后，基于这些信息，为我提供一些慈善捐赠的建议。"
            }
        ]
    },
    "448": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialSecurity.get_insurance_rate",
                "SocialSecurity.get_city_policy",
                "SocialSecurity.get_reimbursement_policy",
                "SocialSecurity.calculate_reimbursement"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialSecurity.get_insurance_rate",
                "args": {
                    "type": "medical_insurance"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SocialSecurity.get_city_policy",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SocialSecurity.get_reimbursement_policy",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "SocialSecurity.calculate_reimbursement",
                "args": {
                    "city": "Beijing",
                    "medical_expenses": 5000
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialSecurity.get_insurance_rate', {'name': 'SocialSecurity.get_insurance_rate', 'description': 'Get the insurance rate and base for a specific type of insurance.', 'required_parameters': [{'name': 'type', 'type': 'STRING', 'description': 'the type of insurance'}], 'optional_parameters': [], 'return_data': [{'name': 'rate', 'description': 'the insurance rate.'}, {'name': 'base', 'description': 'the insurance base.'}]}], ['SocialSecurity.get_city_policy', {'name': 'SocialSecurity.get_city_policy', 'description': 'Get the insurance policy for a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'policy', 'description': 'the insurance policy details.'}]}], ['SocialSecurity.get_reimbursement_policy', {'name': 'SocialSecurity.get_reimbursement_policy', 'description': 'Get the reimbursement policy for a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'policy', 'description': 'the reimbursement policy details.'}]}], ['SocialSecurity.calculate_reimbursement', {'name': 'SocialSecurity.calculate_reimbursement', 'description': 'Calculate the reimbursement amount based on the city policy and medical expenses.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}, {'name': 'medical_expenses', 'type': 'NUMBER', 'description': 'the total medical expenses'}], 'optional_parameters': [], 'return_data': [{'name': 'reimbursement', 'description': 'the calculated reimbursement amount.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解五险一金的缴纳对医疗保障的影响。首先，获取五险一金中医疗保险的缴纳比例和基数。然后，获取不同城市的医疗保险政策。接着，获取医疗费用报销的相关政策和流程。最后，提供一个医疗费用报销计算器，帮助我估算报销金额。"
            }
        ]
    },
    "467": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "IndustryDataAPI.get_logistics_efficiency",
                "CorporateCaseAPI.get_logistics_case",
                "OptimizationAPI.get_logistics_optimization_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "keywords": "logistics",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_logistics_efficiency",
                "args": {
                    "sectors": [
                        "manufacturing",
                        "services"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CorporateCaseAPI.get_logistics_case",
                "args": {
                    "companies": [
                        "Amazon",
                        "Walmart"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "OptimizationAPI.get_logistics_optimization_tips",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': 'Get recent news articles based on keywords and time range.', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'Keywords to search for in news articles.'}, {'name': 'time_range', 'type': 'STRING', 'description': 'Time range for recent news, e.g., 1 year, 6 months.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'List of recent news articles.'}]}], ['IndustryDataAPI.get_logistics_efficiency', {'name': 'IndustryDataAPI.get_logistics_efficiency', 'description': 'Get logistics efficiency data for specified sectors.', 'required_parameters': [{'name': 'sectors', 'type': 'LIST', 'description': 'List of sectors to retrieve logistics efficiency data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'efficiency_data', 'description': 'Logistics efficiency data for the specified sectors.'}]}], ['CorporateCaseAPI.get_logistics_case', {'name': 'CorporateCaseAPI.get_logistics_case', 'description': 'Get logistics management cases for specified companies.', 'required_parameters': [{'name': 'companies', 'type': 'LIST', 'description': 'List of companies to retrieve logistics cases for.'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'Logistics management cases for the specified companies.'}]}], ['OptimizationAPI.get_logistics_optimization_tips', {'name': 'OptimizationAPI.get_logistics_optimization_tips', 'description': 'Get tips for optimizing logistics in the real economy.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'optimization_tips', 'description': 'Tips for optimizing logistics in the real economy.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解实体经济的物流情况。首先，获取最近一年的物流新闻。接着，提供制造业和服务业的物流效率数据。然后，请获取一些知名实体企业的物流管理案例，并分析其物流策略。最后，提供一些关于如何在实体经济中进行物流优化的建议。"
            }
        ]
    },
    "326": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "TaxHealthManagement.get_latest_guide",
                "TaxHealthManagement.get_case_data",
                "TaxHealthManagement.get_tool_usage",
                "TaxHealthManagement.analyze_and_provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaxHealthManagement.get_latest_guide",
                "args": {
                    "year": "2024"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxHealthManagement.get_case_data",
                "args": {
                    "year": "2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxHealthManagement.get_tool_usage",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxHealthManagement.analyze_and_provide_suggestions",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['TaxHealthManagement.get_latest_guide', {'name': 'TaxHealthManagement.get_latest_guide', 'description': 'Get the latest guide on tax health management for residents in China', 'required_parameters': [{'name': 'year', 'description': 'year of the guide', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'guide_content', 'description': 'content of the latest guide'}]}], ['TaxHealthManagement.get_case_data', {'name': 'TaxHealthManagement.get_case_data', 'description': 'Get case data on tax health management for residents in China', 'required_parameters': [{'name': 'year', 'description': 'year of the case data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'case_data', 'description': 'case data of the specified year'}]}], ['TaxHealthManagement.get_tool_usage', {'name': 'TaxHealthManagement.get_tool_usage', 'description': 'Get the current usage of tax health management tools', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tool_usage', 'description': 'usage data of the tools'}]}], ['TaxHealthManagement.analyze_and_provide_suggestions', {'name': 'TaxHealthManagement.analyze_and_provide_suggestions', 'description': 'Analyze the guide and case data to provide health suggestions', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'health suggestions based on analysis'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国居民的税务健康管理。首先，请提供2024年中国居民税务健康管理的最新指南。然后，获取过去一年中国居民税务健康管理的案例数据。接着，获取当前税务健康管理工具的使用情况。最后，基于指南和案例分析，提供一些健康建议。"
            }
        ]
    },
    "485": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TrendReport.get_latest",
                "CaseStudy.analyze",
                "Investment.query",
                "Advice.generate"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TrendReport.get_latest",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CaseStudy.analyze",
                "args": {
                    "report_id": "latest_report_id"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Investment.query",
                "args": {
                    "case_study_id": "analyzed_case_study_id"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Advice.generate",
                "args": {
                    "investment_data": "investment_query_result"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TrendReport.get_latest', {'name': 'TrendReport.get_latest', 'description': '获取最新的互联网创业趋势报告。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report_id', 'description': '报告的唯一标识符。'}]}], ['CaseStudy.analyze', {'name': 'CaseStudy.analyze', 'description': '分析报告中提到的成功创业案例和失败案例。', 'required_parameters': [{'name': 'report_id', 'type': 'STRING', 'description': '报告的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'case_study_id', 'description': '案例分析的唯一标识符。'}]}], ['Investment.query', {'name': 'Investment.query', 'description': '查询当前市场上对这些创业项目的投资情况。', 'required_parameters': [{'name': 'case_study_id', 'type': 'STRING', 'description': '案例分析的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_data', 'description': '投资情况的详细数据。'}]}], ['Advice.generate', {'name': 'Advice.generate', 'description': '基于这些信息，提供一些创业建议。', 'required_parameters': [{'name': 'investment_data', 'type': 'STRING', 'description': '投资情况的详细数据。'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '创业建议的文本。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解互联网经济的创业机会。首先，获取最新的互联网创业趋势报告。接着，分析报告中提到的成功创业案例和失败案例。然后，查询当前市场上对这些创业项目的投资情况。最后，基于这些信息，提供一些创业建议。"
            }
        ]
    },
    "356": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "BureauOfLaborStatistics.get_unemployment_rate",
                "SurveyAPI.get_survey_results"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "共享经济就业人数增长"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BureauOfLaborStatistics.get_unemployment_rate",
                "args": {
                    "start_date": "2015-01-01",
                    "end_date": "2023-01-01"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SurveyAPI.get_survey_results",
                "args": {
                    "survey_id": "12345",
                    "question_ids": [
                        "Q1",
                        "Q2"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['BureauOfLaborStatistics.get_unemployment_rate', {'name': 'BureauOfLaborStatistics.get_unemployment_rate', 'description': 'Get the unemployment rate data from the Bureau of Labor Statistics', 'required_parameters': [{'name': 'start_date', 'description': 'start date of the data range', 'type': 'STRING'}, {'name': 'end_date', 'description': 'end date of the data range', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'unemployment_rate', 'description': 'list of unemployment rates for the specified period'}]}], ['SurveyAPI.get_survey_results', {'name': 'SurveyAPI.get_survey_results', 'description': 'Get the results of a specific survey', 'required_parameters': [{'name': 'survey_id', 'description': 'ID of the survey', 'type': 'STRING'}, {'name': 'question_ids', 'description': 'list of question IDs to retrieve results for', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'survey_results', 'description': 'results of the specified survey questions'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对就业市场的影响。首先，获取共享经济平台（如Airbnb和TaskRabbit）的就业人数增长数据。接着，分析传统就业市场的失业率变化情况。然后，获取共享经济平台员工的收入和工作满意度调查数据。最后，基于这些数据，提供一些关于就业市场平衡的建议。"
            }
        ]
    },
    "452": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialSecurity.get_contribution_rate",
                "EducationPolicy.get_city_policy",
                "EducationPlan.get_personal_advice",
                "EducationCalculator.estimate_cost"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialSecurity.get_contribution_rate",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EducationPolicy.get_city_policy",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EducationPlan.get_personal_advice",
                "args": {
                    "age": 30,
                    "income": 100000,
                    "education_level": "Bachelor"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "EducationCalculator.estimate_cost",
                "args": {
                    "education_level": "Master",
                    "duration": 2,
                    "city": "Beijing"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialSecurity.get_contribution_rate', {'name': 'SocialSecurity.get_contribution_rate', 'description': 'Get the contribution rate and base for social security and housing fund in a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'contribution_rate', 'description': 'the contribution rate for social security and housing fund.'}, {'name': 'base', 'description': 'the base amount for contribution.'}]}], ['EducationPolicy.get_city_policy', {'name': 'EducationPolicy.get_city_policy', 'description': 'Get the education policies of a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'the education policies of the city.'}]}], ['EducationPlan.get_personal_advice', {'name': 'EducationPlan.get_personal_advice', 'description': 'Get personalized education planning advice based on personal information.', 'required_parameters': [{'name': 'age', 'type': 'NUMBER', 'description': 'the age of the individual.'}, {'name': 'income', 'type': 'NUMBER', 'description': 'the annual income of the individual.'}, {'name': 'education_level', 'type': 'STRING', 'description': 'the current education level of the individual.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'the personalized education planning advice.'}]}], ['EducationCalculator.estimate_cost', {'name': 'EducationCalculator.estimate_cost', 'description': 'Estimate the cost of education based on the desired education level, duration, and city.', 'required_parameters': [{'name': 'education_level', 'type': 'STRING', 'description': 'the desired education level.'}, {'name': 'duration', 'type': 'NUMBER', 'description': 'the duration of the education in years.'}, {'name': 'city', 'type': 'STRING', 'description': 'the city where the education will take place.'}], 'optional_parameters': [], 'return_data': [{'name': 'estimated_cost', 'description': 'the estimated cost of the education.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解社保和公积金的缴纳对个人教育规划的影响。首先，获取社保和公积金的缴纳比例和基数。然后，获取不同城市的教育政策。接着，获取个人教育规划的建议和方法。最后，提供一个教育规划计算器，帮助我估算教育费用。"
            }
        ]
    },
    "187": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinance.get_product_innovation_report",
                "ChinaFinance.get_product_innovation_index",
                "ChinaFinance.get_real_time_product_info",
                "ChinaFinance.analyze_product_innovation",
                "ChinaFinance.provide_innovation_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinance.get_product_innovation_report",
                "args": {
                    "year": 2024
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_product_innovation_index",
                "args": {
                    "company": "Ant Financial"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_product_innovation_index",
                "args": {
                    "company": "JD Finance"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ChinaFinance.analyze_product_innovation",
                "args": {
                    "company1": "Ant Financial",
                    "company2": "JD Finance"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ChinaFinance.get_real_time_product_info",
                "args": {
                    "company": "Ant Financial"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "ChinaFinance.provide_innovation_suggestions",
                "args": {}
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinance.get_product_innovation_report', {'name': 'ChinaFinance.get_product_innovation_report', 'description': '获取中国消费金融贷款公司在指定年份的产品创新研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '产品创新研究报告的内容'}]}], ['ChinaFinance.get_product_innovation_index', {'name': 'ChinaFinance.get_product_innovation_index', 'description': '获取指定公司在指定年份的产品创新指数', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'innovation_index', 'description': '产品创新指数'}]}], ['ChinaFinance.get_real_time_product_info', {'name': 'ChinaFinance.get_real_time_product_info', 'description': '获取指定公司的实时产品发布信息', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'product_info', 'description': '实时产品发布信息'}]}], ['ChinaFinance.analyze_product_innovation', {'name': 'ChinaFinance.analyze_product_innovation', 'description': '对比分析两家公司的产品创新指数', 'required_parameters': [{'name': 'company1', 'type': 'STRING', 'description': '第一家公司名称'}, {'name': 'company2', 'type': 'STRING', 'description': '第二家公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': '产品创新指数对比分析结果'}]}], ['ChinaFinance.provide_innovation_suggestions', {'name': 'ChinaFinance.provide_innovation_suggestions', 'description': '基于产品创新分析，提供产品创新建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '产品创新建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的产品创新情况。首先，请提供2024年中国消费金融贷款公司的产品创新研究报告。然后，获取蚂蚁金服与京东金融的产品创新指数进行对比分析。接着，获取蚂蚁金服的实时产品发布信息。最后，基于产品创新分析，提供一些产品创新建议。"
            }
        ]
    },
    "515": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "DataFetcher.get_historical_remote_work_participation",
                "DataAnalyzer.analyze_efficiency_correlation",
                "DataFetcher.get_current_remote_work_status",
                "RecommendationGenerator.generate_remote_work_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "DataFetcher.get_historical_remote_work_participation",
                "args": {
                    "period": "financial_crisis",
                    "target_group": "graduates"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalyzer.analyze_efficiency_correlation",
                "args": {
                    "data": "historical_remote_work_participation",
                    "correlation_factor": "work_efficiency"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataFetcher.get_current_remote_work_status",
                "args": {
                    "target_group": "graduates"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RecommendationGenerator.generate_remote_work_tips",
                "args": {
                    "data": "current_remote_work_status",
                    "context": "financial_crisis"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['DataFetcher.get_historical_remote_work_participation', {'name': 'DataFetcher.get_historical_remote_work_participation', 'description': 'Fetch historical data on remote work participation rates during specific periods, such as financial crises, for a specified target group.', 'required_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'the specific period, e.g., financial_crisis'}], 'optional_parameters': [{'name': 'target_group', 'type': 'STRING', 'description': 'the target group, e.g., graduates'}], 'return_data': [{'name': 'participation_rates', 'description': 'the historical participation rates of remote work.'}]}], ['DataAnalyzer.analyze_efficiency_correlation', {'name': 'DataAnalyzer.analyze_efficiency_correlation', 'description': 'Analyze the correlation between remote work participation rates and work efficiency.', 'required_parameters': [{'name': 'data', 'type': 'STRING', 'description': 'the data to analyze, e.g., historical_remote_work_participation'}], 'optional_parameters': [{'name': 'correlation_factor', 'type': 'STRING', 'description': 'the factor to correlate with, e.g., work_efficiency'}], 'return_data': [{'name': 'correlation_result', 'description': 'the correlation analysis result.'}]}], ['DataFetcher.get_current_remote_work_status', {'name': 'DataFetcher.get_current_remote_work_status', 'description': 'Fetch the current status of remote work participation for a specified target group.', 'required_parameters': [{'name': 'target_group', 'type': 'STRING', 'description': 'the target group, e.g., graduates'}], 'optional_parameters': [], 'return_data': [{'name': 'current_status', 'description': 'the current status of remote work participation.'}]}], ['RecommendationGenerator.generate_remote_work_tips', {'name': 'RecommendationGenerator.generate_remote_work_tips', 'description': 'Generate tips for remote work based on the current status and context.', 'required_parameters': [{'name': 'data', 'type': 'STRING', 'description': 'the data to base the recommendations on, e.g., current_remote_work_status'}], 'optional_parameters': [{'name': 'context', 'type': 'STRING', 'description': 'the context for the recommendations, e.g., financial_crisis'}], 'return_data': [{'name': 'recommendations', 'description': 'the generated remote work tips.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融危机对刚毕业大学生的远程办公影响。首先，获取过去几次金融危机期间大学生远程办公参与率的变化数据。接着，分析这些变化与工作效率的关系。然后，获取当前经济环境下大学生的远程办公情况。最后，基于这些数据，提供一些应对金融危机的远程办公建议。"
            }
        ]
    },
    "278": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_ticker_news",
                "ArxivSearch.get_arxiv_article_information",
                "YahooFinance.get_stock_data",
                "BehavioralFinance.analyze_anchoring_effect"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ArxivSearch.get_arxiv_article_information",
                "args": {
                    "query": "anchoring effect in behavioral finance"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "YahooFinance.get_stock_data",
                "args": {
                    "ticker": "AAPL",
                    "period": "1y"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BehavioralFinance.analyze_anchoring_effect",
                "args": {
                    "stock_data": "AAPL_1y_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['YahooFinance.get_stock_data', {'name': 'YahooFinance.get_stock_data', 'description': 'Retrieve historical stock data for a given ticker symbol and period.', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The stock ticker symbol.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for which to retrieve data (e.g., 1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max).'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Historical stock data including open, high, low, close, volume, and adjusted close prices.'}]}], ['BehavioralFinance.analyze_anchoring_effect', {'name': 'BehavioralFinance.analyze_anchoring_effect', 'description': 'Analyze stock data to detect signs of anchoring effect in investor behavior.', 'required_parameters': [{'name': 'stock_data', 'type': 'STRING', 'description': 'The stock data to be analyzed.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'The result of the anchoring effect analysis, including detected patterns and recommendations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解行为金融学中的锚定效应如何影响投资者决策。首先，请获取关于锚定效应的最新研究报告。然后，获取某大型科技公司在过去一年的股价波动数据。接着，分析这些数据中是否存在锚定效应的迹象。最后，基于分析结果，为我提供一些避免锚定效应的投资策略。"
            }
        ]
    },
    "225": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CharityTracker.get_donation_history",
                "RetirementPlanner.get_retirement_age",
                "CharityEvaluator.get_donation_return_rate",
                "TaxAdvisor.get_charity_tax_benefits",
                "CharityPlanner.create_retirement_donation_plan"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CharityTracker.get_donation_history",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RetirementPlanner.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CharityEvaluator.get_donation_return_rate",
                "args": {
                    "charityIds": [
                        12345,
                        67890,
                        54321
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxAdvisor.get_charity_tax_benefits",
                "args": {
                    "region": "California"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CharityPlanner.create_retirement_donation_plan",
                "args": {
                    "donationHistory": "{{0}}",
                    "retirementAge": "{{1}}",
                    "returnRates": "{{2}}",
                    "taxBenefits": "{{3}}"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CharityTracker.get_donation_history', {'name': 'CharityTracker.get_donation_history', 'description': 'Retrieve the user's current charity donation history.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'donationHistory', 'description': 'A list of past donations including amount, date, and charity name.'}]}], ['RetirementPlanner.get_retirement_age', {'name': 'RetirementPlanner.get_retirement_age', 'description': 'Get the user's estimated retirement age.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': 'The estimated age at which the user will retire.'}]}], ['CharityEvaluator.get_donation_return_rate', {'name': 'CharityEvaluator.get_donation_return_rate', 'description': 'Get the donation return rates for different charities.', 'required_parameters': [{'name': 'charityIds', 'type': 'LIST', 'description': 'A list of charity IDs to evaluate.'}], 'optional_parameters': [], 'return_data': [{'name': 'returnRates', 'description': 'A list of donation return rates for the specified charities.'}]}], ['TaxAdvisor.get_charity_tax_benefits', {'name': 'TaxAdvisor.get_charity_tax_benefits', 'description': 'Get the tax benefits for charity donations in a specific region.', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'The region where the user resides.'}], 'optional_parameters': [], 'return_data': [{'name': 'taxBenefits', 'description': 'The tax benefits available for charity donations in the specified region.'}]}], ['CharityPlanner.create_retirement_donation_plan', {'name': 'CharityPlanner.create_retirement_donation_plan', 'description': 'Create a retirement charity donation plan based on the provided data.', 'required_parameters': [{'name': 'donationHistory', 'type': 'LIST', 'description': 'The user's donation history.'}, {'name': 'retirementAge', 'type': 'NUMBER', 'description': 'The user's estimated retirement age.'}, {'name': 'returnRates', 'type': 'LIST', 'description': 'The donation return rates for different charities.'}, {'name': 'taxBenefits', 'type': 'DICT', 'description': 'The tax benefits available for charity donations in the user's region.'}], 'optional_parameters': [], 'return_data': [{'name': 'retirementDonationPlan', 'description': 'A detailed plan for charity donations during retirement.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估退休后的慈善捐赠计划。首先，获取我当前的慈善捐赠习惯和预计退休年龄。然后，获取不同慈善机构的捐赠回报率。接着，获取我所在地区的慈善捐赠税收优惠。最后，提供一个基于这些数据的退休慈善捐赠计划。"
            }
        ]
    },
    "436": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CityMarket.get_rental_prices",
                "CityMarket.analyze_costs",
                "CityMarket.get_company_reviews",
                "CityMarket.provide_rental_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CityMarket.get_rental_prices",
                "args": {
                    "city": "New York"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CityMarket.analyze_costs",
                "args": {
                    "city": "New York",
                    "areas": [
                        "Manhattan",
                        "Brooklyn",
                        "Queens"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CityMarket.get_company_reviews",
                "args": {
                    "city": "New York",
                    "area": "Manhattan"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CityMarket.provide_rental_advice",
                "args": {
                    "city": "New York",
                    "cost_analysis": "Manhattan: $5000, Brooklyn: $3500, Queens: $3000"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CityMarket.get_rental_prices', {'name': 'CityMarket.get_rental_prices', 'description': 'Get the current rental market prices for a given city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'the list of rental prices by area.'}]}], ['CityMarket.analyze_costs', {'name': 'CityMarket.analyze_costs', 'description': 'Analyze the rental costs for specified areas in a city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}, {'name': 'areas', 'type': 'LIST', 'description': 'the list of areas to analyze'}], 'optional_parameters': [], 'return_data': [{'name': 'cost_analysis', 'description': 'the cost analysis for each area.'}]}], ['CityMarket.get_company_reviews', {'name': 'CityMarket.get_company_reviews', 'description': 'Get reviews for renovation companies in a specified area of a city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}, {'name': 'area', 'type': 'STRING', 'description': 'the area name'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'the list of company reviews.'}]}], ['CityMarket.provide_rental_advice', {'name': 'CityMarket.provide_rental_advice', 'description': 'Provide rental advice based on the cost analysis.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}, {'name': 'cost_analysis', 'type': 'STRING', 'description': 'the cost analysis string'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'the rental advice.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑租房装修。首先，获取我所在城市的租房装修市场价格。接着，提供几个热门区域的租房装修成本分析。然后，请获取我所在区域的装修公司评价。最后，提供一些基于装修成本的租房建议。"
            }
        ]
    },
    "80": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "OptionMarket.get_current_info",
                "OptionStrategy.recommend",
                "OptionTrade.calculate_profit_loss",
                "OptionPlatform.login"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "OptionMarket.get_current_info",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "OptionStrategy.recommend",
                "args": {
                    "budget": 10000,
                    "risk_preference": "moderate"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "OptionTrade.calculate_profit_loss",
                "args": {
                    "strategy": "Covered Call",
                    "investment": 10000
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "OptionPlatform.login",
                "args": {
                    "platform": "E*TRADE"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['OptionMarket.get_current_info', {'name': 'OptionMarket.get_current_info', 'description': '获取当前期权市场的信息', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'market_info', 'description': '当前期权市场的信息'}]}], ['OptionStrategy.recommend', {'name': 'OptionStrategy.recommend', 'description': '根据投资预算和风险偏好推荐期权交易策略', 'required_parameters': [{'name': 'budget', 'type': 'NUMBER', 'description': '投资预算'}, {'name': 'risk_preference', 'type': 'STRING', 'description': '风险偏好'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '推荐的期权交易策略'}]}], ['OptionTrade.calculate_profit_loss', {'name': 'OptionTrade.calculate_profit_loss', 'description': '计算按照推荐策略进行交易的可能收益和风险', 'required_parameters': [{'name': 'strategy', 'type': 'STRING', 'description': '推荐的期权交易策略'}, {'name': 'investment', 'type': 'NUMBER', 'description': '投资金额'}], 'optional_parameters': [], 'return_data': [{'name': 'profit', 'description': '可能的收益'}, {'name': 'risk', 'description': '可能的风险'}]}], ['OptionPlatform.login', {'name': 'OptionPlatform.login', 'description': '提供一个期权交易平台的登录链接', 'required_parameters': [{'name': 'platform', 'type': 'STRING', 'description': '期权交易平台名称'}], 'optional_parameters': [], 'return_data': [{'name': 'login_link', 'description': '期权交易平台的登录链接'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行期权交易。首先，请获取当前期权市场的信息。然后，根据我的投资预算和风险偏好，推荐一个期权交易策略。接下来，计算如果我按照推荐的策略进行交易，可能的收益和风险。最后，提供一个期权交易平台的登录链接。"
            }
        ]
    },
    "321": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "TaxDatabase.query_tax_data",
                "ToolUsage.get_current_usage",
                "Analysis.generate_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "2024 China resident tax international cooperation"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxDatabase.query_tax_data",
                "args": {
                    "query": "China resident tax international cooperation 2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ToolUsage.get_current_usage",
                "args": {
                    "query": "tax international cooperation tools"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Analysis.generate_recommendations",
                "args": {
                    "data": "latest_dynamics, case_data, tool_usage"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['TaxDatabase.query_tax_data', {'name': 'TaxDatabase.query_tax_data', 'description': 'Query tax data from a specialized database', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'case_data', 'description': 'list of tax cooperation cases'}]}], ['ToolUsage.get_current_usage', {'name': 'ToolUsage.get_current_usage', 'description': 'Get the current usage of specified tools', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'usage_data', 'description': 'current usage statistics of tools'}]}], ['Analysis.generate_recommendations', {'name': 'Analysis.generate_recommendations', 'description': 'Generate recommendations based on provided data', 'required_parameters': [{'name': 'data', 'description': 'data to analyze', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of generated recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国居民的税务国际合作。首先，请提供2024年中国居民税务国际合作的最新动态。然后，获取过去一年中国居民税务国际合作的案例数据。接着，获取当前税务国际合作工具的使用情况。最后，基于动态和案例分析，提供一些合作建议。"
            }
        ]
    },
    "456": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialSecurity.get_contribution_rate",
                "SocialSecurity.get_contribution_base",
                "EducationFund.get_city_policies",
                "EducationFund.get_personal_planning_advice",
                "EducationFund.calculate_returns"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialSecurity.get_contribution_rate",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SocialSecurity.get_contribution_base",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EducationFund.get_city_policies",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "EducationFund.get_personal_planning_advice",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "EducationFund.calculate_returns",
                "args": {
                    "initial_investment": 10000,
                    "annual_contribution": 2000,
                    "years": 10
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialSecurity.get_contribution_rate', {'name': 'SocialSecurity.get_contribution_rate', 'description': '获取社保和公积金的缴纳比例。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rate', 'description': '社保和公积金的缴纳比例。'}]}], ['SocialSecurity.get_contribution_base', {'name': 'SocialSecurity.get_contribution_base', 'description': '获取社保和公积金的缴纳基数。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'base', 'description': '社保和公积金的缴纳基数。'}]}], ['EducationFund.get_city_policies', {'name': 'EducationFund.get_city_policies', 'description': '获取不同城市的教育基金规划政策。', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': '城市名称。'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': '该城市的教育基金规划政策。'}]}], ['EducationFund.get_personal_planning_advice', {'name': 'EducationFund.get_personal_planning_advice', 'description': '获取个人教育基金规划的建议和方法。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '个人教育基金规划的建议和方法。'}]}], ['EducationFund.calculate_returns', {'name': 'EducationFund.calculate_returns', 'description': '计算教育基金的收益。', 'required_parameters': [{'name': 'initial_investment', 'type': 'NUMBER', 'description': '初始投资金额。'}, {'name': 'annual_contribution', 'type': 'NUMBER', 'description': '每年追加的投资金额。'}, {'name': 'years', 'type': 'NUMBER', 'description': '投资年限。'}], 'optional_parameters': [], 'return_data': [{'name': 'returns', 'description': '教育基金的收益。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解社保和公积金的缴纳对个人教育基金规划的影响。首先，获取社保和公积金的缴纳比例和基数。然后，获取不同城市的教育基金规划政策。接着，获取个人教育基金规划的建议和方法。最后，提供一个教育基金规划计算器，帮助我估算教育基金收益。"
            }
        ]
    },
    "38": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsuranceSales.get_sales_data_by_age",
                "InsuranceSales.get_customer_satisfaction_scores",
                "InsuranceSales.get_purchase_ratio_by_income",
                "Marketing.generate_promotion_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsuranceSales.get_sales_data_by_age",
                "args": {
                    "productId": "EduHealth123"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceSales.get_customer_satisfaction_scores",
                "args": {
                    "productId": "EduHealth123"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "InsuranceSales.get_purchase_ratio_by_income",
                "args": {
                    "productId": "EduHealth123"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "Marketing.generate_promotion_strategy",
                "args": {
                    "productId": "EduHealth123",
                    "salesData": "sales_data_by_age",
                    "satisfactionScores": "customer_satisfaction_scores",
                    "purchaseRatio": "purchase_ratio_by_income"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsuranceSales.get_sales_data_by_age', {'name': 'InsuranceSales.get_sales_data_by_age', 'description': '获取某款教育健康险产品在不同年龄段的销售数据。', 'required_parameters': [{'name': 'productId', 'type': 'STRING', 'description': '产品的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'salesData', 'description': '销售数据，包含不同年龄段的销售额。'}]}], ['InsuranceSales.get_customer_satisfaction_scores', {'name': 'InsuranceSales.get_customer_satisfaction_scores', 'description': '获取某款教育健康险产品的客户满意度评分。', 'required_parameters': [{'name': 'productId', 'type': 'STRING', 'description': '产品的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfactionScores', 'description': '客户满意度评分，包含评分和评分人数。'}]}], ['InsuranceSales.get_purchase_ratio_by_income', {'name': 'InsuranceSales.get_purchase_ratio_by_income', 'description': '分析某款教育健康险产品在不同收入水平家庭的购买比例。', 'required_parameters': [{'name': 'productId', 'type': 'STRING', 'description': '产品的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'purchaseRatio', 'description': '购买比例，包含不同收入水平的购买比例。'}]}], ['Marketing.generate_promotion_strategy', {'name': 'Marketing.generate_promotion_strategy', 'description': '基于市场潜力生成推广建议。', 'required_parameters': [{'name': 'productId', 'type': 'STRING', 'description': '产品的唯一标识符。'}, {'name': 'salesData', 'type': 'STRING', 'description': '销售数据。'}, {'name': 'satisfactionScores', 'type': 'STRING', 'description': '客户满意度评分。'}, {'name': 'purchaseRatio', 'type': 'STRING', 'description': '购买比例。'}], 'optional_parameters': [], 'return_data': [{'name': 'promotionStrategy', 'description': '推广建议，包含目标市场和推广策略。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某款教育健康险产品的市场潜力。首先，获取该产品在不同年龄段的销售数据。然后，获取该产品的客户满意度评分。接着，分析该产品在不同收入水平家庭的购买比例。最后，提供基于市场潜力的推广建议。"
            }
        ]
    },
    "213": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InvestmentPortfolio.get_current_portfolio",
                "InvestmentProducts.get_historical_returns",
                "InvestmentProducts.get_volatility",
                "TaxPolicy.get_tax_policy",
                "InvestmentAdvisor.optimize_portfolio"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InvestmentPortfolio.get_current_portfolio",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InvestmentProducts.get_historical_returns",
                "args": {
                    "productIds": [
                        101,
                        102,
                        103
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "InvestmentProducts.get_volatility",
                "args": {
                    "productIds": [
                        101,
                        102,
                        103
                    ]
                }
            },
            {
                "id": 3,
                "prev": [],
                "name": "TaxPolicy.get_tax_policy",
                "args": {
                    "region": "USA"
                }
            },
            {
                "id": 4,
                "prev": [
                    1,
                    2,
                    3
                ],
                "name": "InvestmentAdvisor.optimize_portfolio",
                "args": {
                    "currentPortfolio": "currentPortfolio",
                    "historicalReturns": "historicalReturns",
                    "volatility": "volatility",
                    "taxPolicy": "taxPolicy"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InvestmentPortfolio.get_current_portfolio', {'name': 'InvestmentPortfolio.get_current_portfolio', 'description': 'Retrieve the current investment portfolio of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'portfolio', 'description': 'The current investment portfolio including product IDs and allocations.'}]}], ['InvestmentProducts.get_historical_returns', {'name': 'InvestmentProducts.get_historical_returns', 'description': 'Get the historical returns of specified investment products.', 'required_parameters': [{'name': 'productIds', 'type': 'LIST', 'description': 'A list of product IDs to retrieve historical returns for.'}], 'optional_parameters': [], 'return_data': [{'name': 'returns', 'description': 'A list of historical returns for the specified products.'}]}], ['InvestmentProducts.get_volatility', {'name': 'InvestmentProducts.get_volatility', 'description': 'Get the volatility of specified investment products.', 'required_parameters': [{'name': 'productIds', 'type': 'LIST', 'description': 'A list of product IDs to retrieve volatility for.'}], 'optional_parameters': [], 'return_data': [{'name': 'volatility', 'description': 'A list of volatility values for the specified products.'}]}], ['TaxPolicy.get_tax_policy', {'name': 'TaxPolicy.get_tax_policy', 'description': 'Retrieve the tax policy for a specified region.', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'The region for which to retrieve the tax policy.'}], 'optional_parameters': [], 'return_data': [{'name': 'taxPolicy', 'description': 'The tax policy details for the specified region.'}]}], ['InvestmentAdvisor.optimize_portfolio', {'name': 'InvestmentAdvisor.optimize_portfolio', 'description': 'Optimize the investment portfolio based on risk and return considerations.', 'required_parameters': [{'name': 'currentPortfolio', 'type': 'STRING', 'description': 'The current investment portfolio.'}, {'name': 'historicalReturns', 'type': 'STRING', 'description': 'Historical returns data.'}, {'name': 'volatility', 'type': 'STRING', 'description': 'Volatility data.'}, {'name': 'taxPolicy', 'type': 'STRING', 'description': 'Tax policy data.'}], 'optional_parameters': [], 'return_data': [{'name': 'optimizedPortfolio', 'description': 'The optimized investment portfolio.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估不同投资产品的风险和回报。首先，获取我当前的投资组合。然后，获取不同投资产品的历史回报率和波动率。接着，获取我所在地区的税收政策。最后，提供一个基于风险和回报的投资组合优化建议。"
            }
        ]
    },
    "451": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialSecurity.get_pension_contribution_rate",
                "SocialSecurity.get_retirement_policy",
                "FinancialAdvisor.get_retirement_planning_advice",
                "RetirementCalculator.estimate_retirement_expenses"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialSecurity.get_pension_contribution_rate",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SocialSecurity.get_retirement_policy",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialAdvisor.get_retirement_planning_advice",
                "args": {
                    "current_age": 35,
                    "retirement_age": 60,
                    "current_income": 100000,
                    "expected_retirement_income": 50000
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RetirementCalculator.estimate_retirement_expenses",
                "args": {
                    "current_age": 35,
                    "retirement_age": 60,
                    "current_income": 100000,
                    "expected_retirement_income": 50000,
                    "life_expectancy": 85
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialSecurity.get_pension_contribution_rate', {'name': 'SocialSecurity.get_pension_contribution_rate', 'description': 'Get the pension contribution rate and base for a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'contribution_rate', 'description': 'the pension contribution rate.'}, {'name': 'contribution_base', 'description': 'the pension contribution base.'}]}], ['SocialSecurity.get_retirement_policy', {'name': 'SocialSecurity.get_retirement_policy', 'description': 'Get the retirement policy for a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'retirement_age', 'description': 'the retirement age.'}, {'name': 'pension_calculation_method', 'description': 'the method to calculate pension.'}]}], ['FinancialAdvisor.get_retirement_planning_advice', {'name': 'FinancialAdvisor.get_retirement_planning_advice', 'description': 'Get retirement planning advice based on current age, retirement age, current income, and expected retirement income.', 'required_parameters': [{'name': 'current_age', 'type': 'NUMBER', 'description': 'the current age of the person.'}, {'name': 'retirement_age', 'type': 'NUMBER', 'description': 'the expected retirement age.'}, {'name': 'current_income', 'type': 'NUMBER', 'description': 'the current annual income.'}, {'name': 'expected_retirement_income', 'type': 'NUMBER', 'description': 'the expected annual retirement income.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'the retirement planning advice.'}]}], ['RetirementCalculator.estimate_retirement_expenses', {'name': 'RetirementCalculator.estimate_retirement_expenses', 'description': 'Estimate the retirement expenses based on current age, retirement age, current income, expected retirement income, and life expectancy.', 'required_parameters': [{'name': 'current_age', 'type': 'NUMBER', 'description': 'the current age of the person.'}, {'name': 'retirement_age', 'type': 'NUMBER', 'description': 'the expected retirement age.'}, {'name': 'current_income', 'type': 'NUMBER', 'description': 'the current annual income.'}, {'name': 'expected_retirement_income', 'type': 'NUMBER', 'description': 'the expected annual retirement income.'}, {'name': 'life_expectancy', 'type': 'NUMBER', 'description': 'the expected life expectancy after retirement.'}], 'optional_parameters': [], 'return_data': [{'name': 'estimated_expenses', 'description': 'the estimated retirement expenses.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解五险一金的缴纳对个人退休规划的影响。首先，获取五险一金中养老保险的缴纳比例和基数。然后，获取不同城市的退休政策。接着，获取个人退休规划的建议和方法。最后，提供一个退休规划计算器，帮助我估算退休后的生活费用。"
            }
        ]
    },
    "403": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "DataAnalysis.analyze_trends",
                "DataComparison.compare_attractiveness",
                "Recommendation.provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "Green Economy and Career Choices"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_trends",
                "args": {
                    "data": "{{0.return_data.pub_info}}"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataComparison.compare_attractiveness",
                "args": {
                    "green_economy_data": "{{1.return_data.trends}}",
                    "other_career_data": "{{0.return_data.pub_info}}"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Recommendation.provide_suggestions",
                "args": {
                    "comparison_results": "{{2.return_data.comparison}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['DataAnalysis.analyze_trends', {'name': 'DataAnalysis.analyze_trends', 'description': 'Analyze trends in the provided data', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'trends identified in the data'}]}], ['DataComparison.compare_attractiveness', {'name': 'DataComparison.compare_attractiveness', 'description': 'Compare the attractiveness of different career options', 'required_parameters': [{'name': 'green_economy_data', 'description': 'data related to green economy careers', 'type': 'STRING'}, {'name': 'other_career_data', 'description': 'data related to other careers', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'comparison results of the attractiveness'}]}], ['Recommendation.provide_suggestions', {'name': 'Recommendation.provide_suggestions', 'description': 'Provide suggestions based on the comparison results', 'required_parameters': [{'name': 'comparison_results', 'description': 'results of the comparison', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'suggestions provided based on the comparison'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想研究绿色经济对大学生职业规划的影响。首先，获取最近五年内大学生选择绿色经济相关职业的数据。接着，分析这些职业的选择趋势和就业满意度。然后，比较绿色经济职业与其他职业的吸引力。最后，提供一些关于如何引导大学生选择绿色经济职业的建议。"
            }
        ]
    },
    "19": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CreditScore.get_historical_data",
                "CreditScore.get_real_time_data",
                "MarketAnalysis.analyze_service_performance",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CreditScore.get_historical_data",
                "args": {
                    "service": "Experian",
                    "duration": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "CreditScore.get_historical_data",
                "args": {
                    "service": "TransUnion",
                    "duration": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [],
                "name": "CreditScore.get_real_time_data",
                "args": {
                    "service": "Experian"
                }
            },
            {
                "id": 3,
                "prev": [],
                "name": "CreditScore.get_real_time_data",
                "args": {
                    "service": "TransUnion"
                }
            },
            {
                "id": 4,
                "prev": [
                    0,
                    1,
                    2,
                    3
                ],
                "name": "MarketAnalysis.analyze_service_performance",
                "args": {
                    "services": [
                        "Experian",
                        "TransUnion"
                    ]
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "analysis_result": "analysis_result"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CreditScore.get_historical_data', {'name': 'CreditScore.get_historical_data', 'description': '获取指定信用评分服务在过去一年的历史数据。', 'required_parameters': [{'name': 'service', 'description': '信用评分服务的名称', 'type': 'STRING'}, {'name': 'duration', 'description': '数据的时间范围', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_data', 'description': '历史数据'}]}], ['CreditScore.get_real_time_data', {'name': 'CreditScore.get_real_time_data', 'description': '获取指定信用评分服务的实时数据。', 'required_parameters': [{'name': 'service', 'description': '信用评分服务的名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'real_time_data', 'description': '实时数据'}]}], ['MarketAnalysis.analyze_service_performance', {'name': 'MarketAnalysis.analyze_service_performance', 'description': '分析指定信用评分服务的市场表现。', 'required_parameters': [{'name': 'services', 'description': '信用评分服务的名称列表', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': '分析结果'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': '基于分析结果生成投资策略。', 'required_parameters': [{'name': 'analysis_result', 'description': '市场分析结果', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '投资策略'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我打算进行金融科技信用评分投资。首先，获取Experian和TransUnion过去一年的信用评分服务历史数据。然后，获取当前Experian和TransUnion的实时信用评分服务数据。接着，分析这两种信用评分服务的市场表现。最后，基于分析结果，提供一个金融科技信用评分投资策略建议。"
            }
        ]
    },
    "523": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MicroFinance.get_basic_concepts",
                "MicroFinance.get_common_methods",
                "MicroFinance.get_case_studies",
                "MicroFinance.get_current_policies",
                "MicroFinance.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MicroFinance.get_basic_concepts",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MicroFinance.get_common_methods",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MicroFinance.get_case_studies",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MicroFinance.get_current_policies",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MicroFinance.provide_recommendations",
                "args": {
                    "enterprise_size": "small"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MicroFinance.get_basic_concepts', {'name': 'MicroFinance.get_basic_concepts', 'description': '获取小微企业融资的基本概念。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'concepts', 'description': '小微企业融资的基本概念列表'}]}], ['MicroFinance.get_common_methods', {'name': 'MicroFinance.get_common_methods', 'description': '获取小微企业融资的常见方式。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'methods', 'description': '小微企业融资的常见方式列表'}]}], ['MicroFinance.get_case_studies', {'name': 'MicroFinance.get_case_studies', 'description': '获取小微企业的融资案例。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '小微企业融资案例列表'}]}], ['MicroFinance.get_current_policies', {'name': 'MicroFinance.get_current_policies', 'description': '获取当前小微企业的融资政策。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': '当前小微企业融资政策列表'}]}], ['MicroFinance.provide_recommendations', {'name': 'MicroFinance.provide_recommendations', 'description': '基于企业规模提供融资建议。', 'required_parameters': [{'name': 'enterprise_size', 'type': 'STRING', 'description': '企业规模，如small, medium, large'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': '基于企业规模的融资建议列表'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解小微企业融资的途径。首先，获取小微企业融资的基本概念和常见方式。然后，获取一些小微企业的融资案例。接着，获取当前小微企业的融资政策。最后，基于我的企业规模，提供一些融资建议。"
            }
        ]
    },
    "296": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "InvestmentFund.get_investment_returns",
                "DataAnalysis.analyze_overconfidence",
                "InvestmentAdvice.provide_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "overconfidence in behavioral finance"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InvestmentFund.get_investment_returns",
                "args": {
                    "fund_name": "知名投资基金",
                    "years": 5
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAnalysis.analyze_overconfidence",
                "args": {
                    "data": "投资回报率数据"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.provide_advice",
                "args": {
                    "analysis_result": "分析结果"
                }
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['InvestmentFund.get_investment_returns', {'name': 'InvestmentFund.get_investment_returns', 'description': 'Get the investment returns data of a specific fund over a period of time', 'required_parameters': [{'name': 'fund_name', 'description': 'name of the investment fund', 'type': 'STRING'}, {'name': 'years', 'description': 'number of years to retrieve data for', 'type': 'INTEGER'}], 'optional_parameters': [], 'return_data': [{'name': 'returns_data', 'description': 'investment returns data over the specified period'}]}], ['DataAnalysis.analyze_overconfidence', {'name': 'DataAnalysis.analyze_overconfidence', 'description': 'Analyze the provided data to detect signs of overconfidence', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'result of the analysis indicating presence or absence of overconfidence'}]}], ['InvestmentAdvice.provide_advice', {'name': 'InvestmentAdvice.provide_advice', 'description': 'Provide investment advice based on the analysis result', 'required_parameters': [{'name': 'analysis_result', 'description': 'result of the analysis to base advice on', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'investment advice based on the analysis'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想研究行为金融学中的过度自信如何影响市场动态。首先，请获取关于过度自信的最新学术论文。然后，获取某知名投资基金在过去五年的投资回报率数据。接着，分析这些数据中是否存在过度自信的迹象。最后，基于分析结果，为我提供一些减少过度自信的投资建议。"
            }
        ]
    },
    "435": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TaxPolicy.get_current_policy",
                "TaxPolicy.get_regional_differences",
                "TaxPolicy.get_city_tax_calculation",
                "TaxPolicy.get_rental_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaxPolicy.get_current_policy",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxPolicy.get_regional_differences",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxPolicy.get_city_tax_calculation",
                "args": {
                    "city": "用户所在城市"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxPolicy.get_rental_advice",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TaxPolicy.get_current_policy', {'name': 'TaxPolicy.get_current_policy', 'description': '获取当前租房税收的政策', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'policy_summary', 'description': '当前租房税收政策的概述'}]}],\n['TaxPolicy.get_regional_differences', {'name': 'TaxPolicy.get_regional_differences', 'description': '提供不同地区的租房税收差异', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'regional_differences', 'description': '不同地区的租房税收差异'}]}],\n['TaxPolicy.get_city_tax_calculation', {'name': 'TaxPolicy.get_city_tax_calculation', 'description': '获取用户所在城市的租房税收计算方法', 'required_parameters': [{'name': 'city', 'description': '用户所在城市', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'tax_calculation_method', 'description': '用户所在城市的租房税收计算方法'}]}],\n['TaxPolicy.get_rental_advice', {'name': 'TaxPolicy.get_rental_advice', 'description': '提供基于税收政策的租房建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rental_advice', 'description': '基于税收政策的租房建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解租房税收的相关信息。首先，获取当前租房税收的政策。接着，提供不同地区的租房税收差异。然后，请获取我所在城市的租房税收计算方法。最后，提供一些基于税收政策的租房建议。"
            }
        ]
    },
    "446": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GJJLoan.get_basic_conditions",
                "GJJLoan.get_city_policies",
                "GJJLoan.get_application_steps",
                "GJJLoan.get_required_materials",
                "GJJLoan.generate_application_guide"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GJJLoan.get_basic_conditions",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GJJLoan.get_city_policies",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GJJLoan.get_application_steps",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GJJLoan.get_required_materials",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "GJJLoan.generate_application_guide",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GJJLoan.get_basic_conditions', {'name': 'GJJLoan.get_basic_conditions', 'description': '获取公积金贷款的基本条件和要求。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'conditions', 'description': '公积金贷款的基本条件和要求'}]}], ['GJJLoan.get_city_policies', {'name': 'GJJLoan.get_city_policies', 'description': '获取不同城市的公积金贷款政策。', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': '城市名称'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': '该城市的公积金贷款政策'}]}], ['GJJLoan.get_application_steps', {'name': 'GJJLoan.get_application_steps', 'description': '获取公积金贷款的申请步骤。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'steps', 'description': '公积金贷款的申请步骤'}]}], ['GJJLoan.get_required_materials', {'name': 'GJJLoan.get_required_materials', 'description': '获取公积金贷款申请所需的材料。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'materials', 'description': '公积金贷款申请所需的材料'}]}], ['GJJLoan.generate_application_guide', {'name': 'GJJLoan.generate_application_guide', 'description': '生成一个公积金贷款申请指南，帮助用户顺利申请贷款。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'guide', 'description': '公积金贷款申请指南'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解公积金贷款的申请流程。首先，获取公积金贷款的基本条件和要求。然后，获取不同城市的公积金贷款政策。接着，获取公积金贷款的申请步骤和所需材料。最后，提供一个公积金贷款申请指南，帮助我顺利申请贷款。"
            }
        ]
    },
    "428": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BankRate.get_current_mortgage_rates",
                "Bank.compare_rental_loan_products",
                "CityBank.get_loan_application_conditions",
                "FinancialAdvisor.provide_loan_recommendation"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BankRate.get_current_mortgage_rates",
                "args": {
                    "loan_type": "rental"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "Bank.compare_rental_loan_products",
                "args": {
                    "bank_names": [
                        "BankA",
                        "BankB",
                        "BankC"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CityBank.get_loan_application_conditions",
                "args": {
                    "city": "New York"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialAdvisor.provide_loan_recommendation",
                "args": {
                    "financial_status": "stable"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BankRate.get_current_mortgage_rates', {'name': 'BankRate.get_current_mortgage_rates', 'description': 'Get the current mortgage rates for a specific loan type', 'required_parameters': [{'name': 'loan_type', 'description': 'type of loan', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': 'current mortgage rates'}]}],\n['Bank.compare_rental_loan_products', {'name': 'Bank.compare_rental_loan_products', 'description': 'Compare rental loan products from different banks', 'required_parameters': [{'name': 'bank_names', 'description': 'list of bank names', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_results', 'description': 'comparison results of rental loan products'}]}],\n['CityBank.get_loan_application_conditions', {'name': 'CityBank.get_loan_application_conditions', 'description': 'Get loan application conditions for a specific city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'conditions', 'description': 'loan application conditions'}]}],\n['FinancialAdvisor.provide_loan_recommendation', {'name': 'FinancialAdvisor.provide_loan_recommendation', 'description': 'Provide loan recommendations based on personal financial status', 'required_parameters': [{'name': 'financial_status', 'description': 'personal financial status', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'loan recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解租房贷款的相关信息。首先，获取当前租房贷款的利率水平。接着，提供不同银行的租房贷款产品比较。然后，请获取我所在城市的租房贷款申请条件。最后，提供一些基于个人财务状况的贷款建议。"
            }
        ]
    },
    "332": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "Database.query_database",
                "Tool.get_tool_usage_stats",
                "Analysis.generate_innovation_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "2024年中国居民税务社会创新"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "Database.query_database",
                "args": {
                    "query": "SELECT * FROM tax_innovation_cases WHERE year = 2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Tool.get_tool_usage_stats",
                "args": {
                    "tool_category": "税务社会创新工具"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Analysis.generate_innovation_suggestions",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['Database.query_database', {'name': 'Database.query_database', 'description': 'Query a database for specific data', 'required_parameters': [{'name': 'query', 'description': 'SQL query to execute', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'result', 'description': 'result set from the query'}]}], ['Tool.get_tool_usage_stats', {'name': 'Tool.get_tool_usage_stats', 'description': 'Get usage statistics for a specific tool category', 'required_parameters': [{'name': 'tool_category', 'description': 'category of the tool', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'usage_stats', 'description': 'usage statistics of the tool'}]}], ['Analysis.generate_innovation_suggestions', {'name': 'Analysis.generate_innovation_suggestions', 'description': 'Generate innovation suggestions based on provided data', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'list of innovation suggestions'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国居民的税务社会创新。首先，请提供2024年中国居民税务社会创新的最新成果。然后，获取过去一年中国居民税务社会创新的案例数据。接着，获取当前税务社会创新工具的使用情况。最后，基于成果和案例分析，提供一些创新建议。"
            }
        ]
    },
    "466": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "SurveyAPI.get_satisfaction_data",
                "CaseStudyAPI.get_consumer_behavior_case",
                "AnalysisAPI.analyze_marketing_strategy",
                "RecommendationAPI.provide_analysis_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "keywords": "consumer behavior",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SurveyAPI.get_satisfaction_data",
                "args": {
                    "industry": "Manufacturing",
                    "time_range": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SurveyAPI.get_satisfaction_data",
                "args": {
                    "industry": "Service",
                    "time_range": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CaseStudyAPI.get_consumer_behavior_case",
                "args": {
                    "company_name": "Walmart",
                    "time_range": "1 year"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "AnalysisAPI.analyze_marketing_strategy",
                "args": {
                    "company_name": "Walmart",
                    "time_range": "1 year"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "RecommendationAPI.provide_analysis_tips",
                "args": {}
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': 'Get recent news articles based on specified keywords and time range.', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'the keywords to search for in news articles.'}, {'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the news articles, e.g., 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'the list of news articles, each article is a dict with title and content.'}]}], ['SurveyAPI.get_satisfaction_data', {'name': 'SurveyAPI.get_satisfaction_data', 'description': 'Get consumer satisfaction data for a specified industry and time range.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry to get satisfaction data for.'}, {'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the data, e.g., 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'the satisfaction data, a dict with industry and time range.'}]}], ['CaseStudyAPI.get_consumer_behavior_case', {'name': 'CaseStudyAPI.get_consumer_behavior_case', 'description': 'Get consumer behavior case studies for a specified company and time range.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'the name of the company to get case studies for.'}, {'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the case studies, e.g., 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'case_studies', 'description': 'the list of case studies, each case study is a dict with company name and analysis.'}]}], ['AnalysisAPI.analyze_marketing_strategy', {'name': 'AnalysisAPI.analyze_marketing_strategy', 'description': 'Analyze the marketing strategy of a specified company based on consumer behavior data.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'the name of the company to analyze.'}, {'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the analysis, e.g., 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'marketing_strategy', 'description': 'the analyzed marketing strategy, a dict with company name and strategy.'}]}], ['RecommendationAPI.provide_analysis_tips', {'name': 'RecommendationAPI.provide_analysis_tips', 'description': 'Provide tips on how to conduct consumer behavior analysis in the real economy.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': 'the list of tips for conducting consumer behavior analysis.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的消费者行为情况。首先，获取最近一年的消费者行为新闻。接着，提供制造业和服务业的消费者满意度数据。然后，请获取一些知名实体企业的消费者行为分析案例，并分析其营销策略。最后，提供一些关于如何在实体经济中进行消费者行为分析的建议。"
            }
        ]
    },
    "280": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ArxivSearch.get_arxiv_article_information",
                "FinancialInstitution.get_transaction_data",
                "DataAnalysis.analyze_transaction_data",
                "InvestmentStrategy.generate_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ArxivSearch.get_arxiv_article_information",
                "args": {
                    "query": "loss aversion in behavioral finance"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.get_transaction_data",
                "args": {
                    "institution": "LargeBank",
                    "period": "2022-01-01 to 2022-12-31"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAnalysis.analyze_transaction_data",
                "args": {
                    "data": "transaction_data_from_LargeBank"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentStrategy.generate_strategies",
                "args": {
                    "analysis_results": "loss_aversion_indicators"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['FinancialInstitution.get_transaction_data', {'name': 'FinancialInstitution.get_transaction_data', 'description': 'Retrieve transaction data from a specified financial institution over a given period.', 'required_parameters': [{'name': 'institution', 'type': 'STRING', 'description': 'The name of the financial institution.'}, {'name': 'period', 'type': 'STRING', 'description': 'The time period for the data in the format YYYY-MM-DD to YYYY-MM-DD.'}], 'optional_parameters': [], 'return_data': [{'name': 'transaction_data', 'description': 'A list of transactions including date, amount, and type.'}]}], ['DataAnalysis.analyze_transaction_data', {'name': 'DataAnalysis.analyze_transaction_data', 'description': 'Analyze transaction data to identify patterns such as loss aversion.', 'required_parameters': [{'name': 'data', 'type': 'STRING', 'description': 'The transaction data to be analyzed.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': 'The results of the analysis, including any identified patterns.'}]}], ['InvestmentStrategy.generate_strategies', {'name': 'InvestmentStrategy.generate_strategies', 'description': 'Generate investment strategies based on analysis results.', 'required_parameters': [{'name': 'analysis_results', 'type': 'STRING', 'description': 'The results of the data analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'A list of investment strategies to mitigate identified issues.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解行为金融学中的损失厌恶如何影响投资者决策。首先，请获取关于损失厌恶的最新研究报告。然后，获取某大型金融机构在过去一年的交易数据。接着，分析这些数据中是否存在损失厌恶的迹象。最后，基于分析结果，为我提供一些减少损失厌恶的投资策略。"
            }
        ]
    },
    "105": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialProduct.get_privacy_policy",
                "FinancialProduct.analyze_privacy_policy",
                "FinancialProduct.check_privacy_violations",
                "Email.send"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialProduct.get_privacy_policy",
                "args": {
                    "productId": "FP12345"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialProduct.analyze_privacy_policy",
                "args": {
                    "policyText": "Retrieved policy text from API 0"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialProduct.check_privacy_violations",
                "args": {
                    "productId": "FP12345"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Email.send",
                "args": {
                    "address": "privacy@example.com",
                    "title": "Data Privacy Protection Report",
                    "body": "Here is the analysis of the data privacy policy for Financial Product FP12345:\n\n1. Policy Analysis: The policy outlines clear data handling practices.\n2. Violation History: No known violations have been recorded.\n\nBased on this information, we recommend:\n- Regularly review and update the privacy policy.\n- Conduct periodic audits to ensure compliance.",
                    "attachment": "/path/to/privacy_report.pdf"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialProduct.get_privacy_policy', {'name': 'FinancialProduct.get_privacy_policy', 'description': 'Retrieve the privacy policy and terms for a financial product.', 'required_parameters': [{'name': 'productId', 'description': 'The ID of the financial product.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'policyText', 'description': 'The text of the privacy policy and terms.'}]}], ['FinancialProduct.analyze_privacy_policy', {'name': 'FinancialProduct.analyze_privacy_policy', 'description': 'Analyze the content of a privacy policy and terms.', 'required_parameters': [{'name': 'policyText', 'description': 'The text of the privacy policy and terms.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'The analysis of the privacy policy and terms.'}]}], ['FinancialProduct.check_privacy_violations', {'name': 'FinancialProduct.check_privacy_violations', 'description': 'Check if there have been any data privacy violations for a financial product.', 'required_parameters': [{'name': 'productId', 'description': 'The ID of the financial product.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'violations', 'description': 'A list of data privacy violations, if any.'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某金融产品的数据隐私保护情况。首先，获取该产品的数据隐私政策和条款。然后，分析这些政策和条款的具体内容。接着，查询该产品在过去是否有任何数据隐私违规记录。最后，基于这些信息，提供一些数据隐私保护建议。"
            }
        ]
    },
    "388": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "DataAnalysis.analyze_employment_data",
                "DataComparison.compare_employment_growth",
                "CareerAdvice.provide_career_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "Green Economy Employment Data"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_employment_data",
                "args": {
                    "data": "recent_five_years_green_economy_employment_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataComparison.compare_employment_growth",
                "args": {
                    "green_economy_data": "analyzed_green_economy_data",
                    "other_industries_data": "other_industries_employment_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CareerAdvice.provide_career_suggestions",
                "args": {
                    "analysis_results": "comparison_results"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['DataAnalysis.analyze_employment_data', {'name': 'DataAnalysis.analyze_employment_data', 'description': 'Analyze employment data for specific industries', 'required_parameters': [{'name': 'data', 'description': 'employment data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': 'results of the data analysis'}]}], ['DataComparison.compare_employment_growth', {'name': 'DataComparison.compare_employment_growth', 'description': 'Compare employment growth rates between different industries', 'required_parameters': [{'name': 'green_economy_data', 'description': 'data for green economy industries', 'type': 'STRING'}, {'name': 'other_industries_data', 'description': 'data for other industries', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_results', 'description': 'results of the comparison'}]}], ['CareerAdvice.provide_career_suggestions', {'name': 'CareerAdvice.provide_career_suggestions', 'description': 'Provide career suggestions based on analysis results', 'required_parameters': [{'name': 'analysis_results', 'description': 'results of the analysis to base suggestions on', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'career suggestions based on the analysis'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想研究绿色经济对大学生就业的影响。首先，获取最近五年绿色经济相关行业的就业数据。接着，分析这些行业中大学生的就业比例和薪资水平。然后，比较绿色经济行业与其他行业的就业增长率。最后，提供一些关于大学生如何进入绿色经济行业的建议。"
            }
        ]
    },
    "355": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "CityTrafficData.get_usage_frequency",
                "CityTrafficData.analyze_congestion_index",
                "CityTrafficData.get_policy_feedback",
                "CityTrafficData.generate_traffic_management_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CityTrafficData.get_usage_frequency",
                "args": {
                    "platform": "滴滴"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CityTrafficData.get_usage_frequency",
                "args": {
                    "platform": "共享单车"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CityTrafficData.analyze_congestion_index",
                "args": {
                    "start_date": "2023-01-01",
                    "end_date": "2023-12-31"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CityTrafficData.get_policy_feedback",
                "args": {
                    "platform": "滴滴"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CityTrafficData.generate_traffic_management_suggestions",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['CityTrafficData.get_usage_frequency', {'name': 'CityTrafficData.get_usage_frequency', 'description': 'Get the usage frequency data of shared economy platforms', 'required_parameters': [{'name': 'platform', 'description': 'name of the shared economy platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'frequency_data', 'description': 'usage frequency data of the platform'}]}], ['CityTrafficData.analyze_congestion_index', {'name': 'CityTrafficData.analyze_congestion_index', 'description': 'Analyze the change in city traffic congestion index', 'required_parameters': [{'name': 'start_date', 'description': 'start date of the analysis period', 'type': 'STRING'}, {'name': 'end_date', 'description': 'end date of the analysis period', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'congestion_index_data', 'description': 'data of the congestion index changes'}]}], ['CityTrafficData.get_policy_feedback', {'name': 'CityTrafficData.get_policy_feedback', 'description': 'Get feedback data on city traffic policies from shared economy platforms', 'required_parameters': [{'name': 'platform', 'description': 'name of the shared economy platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_feedback_data', 'description': 'feedback data on city traffic policies'}]}], ['CityTrafficData.generate_traffic_management_suggestions', {'name': 'CityTrafficData.generate_traffic_management_suggestions', 'description': 'Generate suggestions for city traffic management based on collected data', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'management_suggestions', 'description': 'suggestions for city traffic management'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对城市交通拥堵的影响。首先，获取共享经济平台（如滴滴和共享单车）的使用频率数据。接着，分析城市交通拥堵指数的变化情况。然后，获取共享经济平台对城市交通政策的反馈数据。最后，基于这些数据，提供一些关于城市交通管理的建议。"
            }
        ]
    },
    "26": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SalesData.get_sales_by_age_group",
                "CustomerSatisfaction.get_satisfaction_scores",
                "SalesData.get_purchase_percentage_by_income_level",
                "MarketingRecommendation.generate_recommendation"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SalesData.get_sales_by_age_group",
                "args": {
                    "productId": "EDU12345"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CustomerSatisfaction.get_satisfaction_scores",
                "args": {
                    "productId": "EDU12345"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "SalesData.get_purchase_percentage_by_income_level",
                "args": {
                    "productId": "EDU12345"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "MarketingRecommendation.generate_recommendation",
                "args": {
                    "salesData": "SalesData.get_sales_by_age_group",
                    "satisfactionScores": "CustomerSatisfaction.get_satisfaction_scores",
                    "incomeLevelData": "SalesData.get_purchase_percentage_by_income_level"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SalesData.get_sales_by_age_group', {'name': 'SalesData.get_sales_by_age_group', 'description': '获取某款教育险产品在不同年龄段的销售数据', 'required_parameters': [{'name': 'productId', 'description': '产品的唯一标识', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'salesData', 'description': '销售数据，包含不同年龄段的销售额'}]}], ['CustomerSatisfaction.get_satisfaction_scores', {'name': 'CustomerSatisfaction.get_satisfaction_scores', 'description': '获取某款教育险产品的客户满意度评分', 'required_parameters': [{'name': 'productId', 'description': '产品的唯一标识', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfactionScores', 'description': '客户满意度评分，包含不同评分段的客户数量'}]}], ['SalesData.get_purchase_percentage_by_income_level', {'name': 'SalesData.get_purchase_percentage_by_income_level', 'description': '分析某款教育险产品在不同收入水平家庭的购买比例', 'required_parameters': [{'name': 'productId', 'description': '产品的唯一标识', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'purchasePercentage', 'description': '购买比例，包含不同收入水平的家庭购买比例'}]}], ['MarketingRecommendation.generate_recommendation', {'name': 'MarketingRecommendation.generate_recommendation', 'description': '基于市场潜力的推广建议', 'required_parameters': [{'name': 'salesData', 'description': '销售数据', 'type': 'STRING'}, {'name': 'satisfactionScores', 'description': '客户满意度评分', 'type': 'STRING'}, {'name': 'incomeLevelData', 'description': '收入水平数据', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendation', 'description': '推广建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某款教育险产品的市场潜力。首先，获取该产品在不同年龄段的销售数据。然后，获取该产品的客户满意度评分。接着，分析该产品在不同收入水平家庭的购买比例。最后，提供基于市场潜力的推广建议。"
            }
        ]
    },
    "505": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ReportFetcher.get_latest_report",
                "CaseAnalyzer.analyze_cases",
                "InvestmentTracker.get_investment_status",
                "RecommendationGenerator.generate_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ReportFetcher.get_latest_report",
                "args": {
                    "report_type": "internet_economy_online_live"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CaseAnalyzer.analyze_cases",
                "args": {
                    "report_id": "latest_report_id"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InvestmentTracker.get_investment_status",
                "args": {
                    "case_ids": [
                        "success_case_id_1",
                        "failure_case_id_1"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RecommendationGenerator.generate_recommendations",
                "args": {
                    "analysis_id": "analysis_id_from_step_2",
                    "investment_status_id": "investment_status_id_from_step_3"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ReportFetcher.get_latest_report', {'name': 'ReportFetcher.get_latest_report', 'description': 'Fetch the latest report on a given topic.', 'required_parameters': [{'name': 'report_type', 'type': 'STRING', 'description': 'the type of report'}], 'optional_parameters': [], 'return_data': [{'name': 'report_id', 'description': 'the ID of the fetched report.'}]}], ['CaseAnalyzer.analyze_cases', {'name': 'CaseAnalyzer.analyze_cases', 'description': 'Analyze success and failure cases from a given report.', 'required_parameters': [{'name': 'report_id', 'type': 'STRING', 'description': 'the ID of the report to analyze'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_id', 'description': 'the ID of the analysis.'}]}], ['InvestmentTracker.get_investment_status', {'name': 'InvestmentTracker.get_investment_status', 'description': 'Get the current investment status for given cases.', 'required_parameters': [{'name': 'case_ids', 'type': 'LIST', 'description': 'the list of case IDs to track'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_status_id', 'description': 'the ID of the investment status.'}]}], ['RecommendationGenerator.generate_recommendations', {'name': 'RecommendationGenerator.generate_recommendations', 'description': 'Generate recommendations based on analysis and investment status.', 'required_parameters': [{'name': 'analysis_id', 'type': 'STRING', 'description': 'the ID of the analysis.'}, {'name': 'investment_status_id', 'type': 'STRING', 'description': 'the ID of the investment status.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'the list of recommendations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解互联网经济的在线直播发展。首先，获取最新的互联网在线直播发展报告。接着，分析报告中提到的在线直播成功案例和失败案例。然后，查询当前市场上对这些在线直播的投资情况。最后，基于这些信息，提供一些在线直播发展建议。"
            }
        ]
    },
    "453": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialSecurity.get_contribution_rates",
                "SocialSecurity.get_contribution_base",
                "SocialSecurity.get_city_policies",
                "SocialSecurity.get_personal_advice",
                "SocialSecurity.calculate_pension"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialSecurity.get_contribution_rates",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SocialSecurity.get_contribution_base",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SocialSecurity.get_city_policies",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "SocialSecurity.get_personal_advice",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "SocialSecurity.calculate_pension",
                "args": {
                    "contribution_rates": 0.08,
                    "contribution_base": 10000,
                    "city_policies": "Beijing"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialSecurity.get_contribution_rates', {'name': 'SocialSecurity.get_contribution_rates', 'description': '获取社保和公积金的缴纳比例。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': '社保和公积金的缴纳比例。'}]}], ['SocialSecurity.get_contribution_base', {'name': 'SocialSecurity.get_contribution_base', 'description': '获取社保和公积金的缴纳基数。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'base', 'description': '社保和公积金的缴纳基数。'}]}], ['SocialSecurity.get_city_policies', {'name': 'SocialSecurity.get_city_policies', 'description': '获取不同城市的养老保障政策。', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': '城市名称。'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': '城市的养老保障政策。'}]}], ['SocialSecurity.get_personal_advice', {'name': 'SocialSecurity.get_personal_advice', 'description': '获取个人养老保障的建议和方法。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '个人养老保障的建议和方法。'}]}], ['SocialSecurity.calculate_pension', {'name': 'SocialSecurity.calculate_pension', 'description': '计算养老保障费用。', 'required_parameters': [{'name': 'contribution_rates', 'type': 'FLOAT', 'description': '缴纳比例。'}, {'name': 'contribution_base', 'type': 'FLOAT', 'description': '缴纳基数。'}, {'name': 'city_policies', 'type': 'STRING', 'description': '城市政策。'}], 'optional_parameters': [], 'return_data': [{'name': 'pension_cost', 'description': '养老保障费用。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解社保和公积金的缴纳对个人养老保障的影响。首先，获取社保和公积金的缴纳比例和基数。然后，获取不同城市的养老保障政策。接着，获取个人养老保障的建议和方法。最后，提供一个养老保障计算器，帮助我估算养老保障费用。"
            }
        ]
    },
    "53": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "StockMarket.get_latest_index",
                "StockMarket.get_stock_reaction",
                "StockMarket.compare_stock_performance",
                "StockMarket.predict_industry_trend"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "StockMarket.get_latest_index",
                "args": {
                    "index_name": "Tech Index"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarket.get_stock_reaction",
                "args": {
                    "index_data": "latest_tech_index_data",
                    "policy_change": "interest_rate_increase"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarket.compare_stock_performance",
                "args": {
                    "policy_changes": [
                        "interest_rate_increase",
                        "interest_rate_decrease"
                    ],
                    "stock_data": "tech_stock_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StockMarket.predict_industry_trend",
                "args": {
                    "analysis_data": "comparison_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['StockMarket.get_latest_index', {'name': 'StockMarket.get_latest_index', 'description': '获取最新的科技股指数数据', 'required_parameters': [{'name': 'index_name', 'description': '指数名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'index_data', 'description': '最新的指数数据'}]}], ['StockMarket.get_stock_reaction', {'name': 'StockMarket.get_stock_reaction', 'description': '分析货币政策调整对科技股的即时反应', 'required_parameters': [{'name': 'index_data', 'description': '最新的指数数据', 'type': 'STRING'}, {'name': 'policy_change', 'description': '货币政策调整', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'reaction_data', 'description': '科技股的即时反应数据'}]}], ['StockMarket.compare_stock_performance', {'name': 'StockMarket.compare_stock_performance', 'description': '比较不同货币政策下的科技股表现', 'required_parameters': [{'name': 'policy_changes', 'description': '货币政策调整列表', 'type': 'LIST'}, {'name': 'stock_data', 'description': '科技股数据', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_data', 'description': '不同货币政策下的科技股表现比较数据'}]}], ['StockMarket.predict_industry_trend', {'name': 'StockMarket.predict_industry_trend', 'description': '基于分析的科技行业预测', 'required_parameters': [{'name': 'analysis_data', 'description': '分析数据', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'prediction_data', 'description': '科技行业预测数据'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估当前的货币政策对科技行业的影响。首先，请获取最新的科技股指数数据。然后，分析货币政策调整对科技股的即时反应。接下来，比较不同货币政策下的科技股表现。最后，请提供基于分析的科技行业预测。"
            }
        ]
    },
    "196": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinanceTech.get_innovation_report",
                "TechScore.get_company_score",
                "AntFinancial.get_real_time_tech_info",
                "TechInnovation.provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinanceTech.get_innovation_report",
                "args": {
                    "year": 2024
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TechScore.get_company_score",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "TechScore.get_company_score",
                "args": {
                    "company": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "AntFinancial.get_real_time_tech_info",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "TechInnovation.provide_suggestions",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinanceTech.get_innovation_report', {'name': 'ChinaFinanceTech.get_innovation_report', 'description': '获取中国消费金融贷款公司在某一年的技术创新研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '技术创新研究报告的内容'}]}], ['TechScore.get_company_score', {'name': 'TechScore.get_company_score', 'description': '获取公司在技术创新方面的评分', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'score', 'description': '技术创新评分'}]}], ['AntFinancial.get_real_time_tech_info', {'name': 'AntFinancial.get_real_time_tech_info', 'description': '获取蚂蚁金服的实时技术创新信息', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'info', 'description': '实时技术创新信息'}]}], ['TechInnovation.provide_suggestions', {'name': 'TechInnovation.provide_suggestions', 'description': '基于技术创新分析，提供一些技术创新建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '技术创新建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的技术创新情况。首先，请提供2024年中国消费金融贷款公司的技术创新研究报告。然后，获取蚂蚁金服与京东金融的技术创新评分进行对比分析。接着，获取蚂蚁金服的实时技术创新信息。最后，基于技术创新分析，提供一些技术创新建议。"
            }
        ]
    },
    "81": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BondMarket.get_available_bonds",
                "BondMarket.recommend_bond",
                "BondMarket.calculate_returns",
                "BondMarket.calculate_risks",
                "BondMarket.get_consultation_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BondMarket.get_available_bonds",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BondMarket.recommend_bond",
                "args": {
                    "budget": 50000,
                    "risk_preference": "moderate"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BondMarket.calculate_returns",
                "args": {
                    "bondId": 12345
                }
            },
            {
                "id": 3,
                "prev": [
                    1
                ],
                "name": "BondMarket.calculate_risks",
                "args": {
                    "bondId": 12345
                }
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "BondMarket.get_consultation_link",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BondMarket.get_available_bonds', {'name': 'BondMarket.get_available_bonds', 'description': '获取当前市场上可用的债券信息。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'bonds', 'description': '当前市场上可用的债券列表，包含债券ID、名称、发行公司、到期日、利率等信息。'}]}], ['BondMarket.recommend_bond', {'name': 'BondMarket.recommend_bond', 'description': '根据用户的投资预算和风险偏好，推荐一个债券投资项目。', 'required_parameters': [{'name': 'budget', 'type': 'NUMBER', 'description': '用户的投资预算。'}, {'name': 'risk_preference', 'type': 'STRING', 'description': '用户的风险偏好，可以是低、中、高。'}], 'optional_parameters': [], 'return_data': [{'name': 'recommended_bond', 'description': '推荐的债券项目，包含债券ID、名称、发行公司、到期日、利率等信息。'}]}], ['BondMarket.calculate_returns', {'name': 'BondMarket.calculate_returns', 'description': '计算如果投资推荐的债券项目，可能的收益。', 'required_parameters': [{'name': 'bondId', 'type': 'NUMBER', 'description': '债券的ID。'}], 'optional_parameters': [], 'return_data': [{'name': 'expected_returns', 'description': '预期的收益。'}]}], ['BondMarket.calculate_risks', {'name': 'BondMarket.calculate_risks', 'description': '计算如果投资推荐的债券项目，可能的风险。', 'required_parameters': [{'name': 'bondId', 'type': 'NUMBER', 'description': '债券的ID。'}], 'optional_parameters': [], 'return_data': [{'name': 'expected_risks', 'description': '预期的风险。'}]}], ['BondMarket.get_consultation_link', {'name': 'BondMarket.get_consultation_link', 'description': '提供一个债券投资咨询的链接。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'consultation_link', 'description': '债券投资咨询的链接。'}]}]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行债券投资。首先，请获取当前可用的债券信息。然后，根据我的投资预算和风险偏好，推荐一个债券投资项目。接下来，计算如果我投资推荐的债券项目，可能的收益和风险。最后，提供一个债券投资咨询的链接。"
            }
        ]
    },
    "217": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RetirementPlanner.get_current_expenses",
                "RetirementPlanner.get_retirement_age",
                "RetirementPlanner.get_cost_of_living_index",
                "RetirementPlanner.get_retirement_benefits",
                "RetirementPlanner.evaluate_retirement_quality"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RetirementPlanner.get_current_expenses",
                "args": {}
            },
            {
                "id": 1,
                "prev": [],
                "name": "RetirementPlanner.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "RetirementPlanner.get_cost_of_living_index",
                "args": {
                    "location": "New York"
                }
            },
            {
                "id": 3,
                "prev": [
                    0,
                    1
                ],
                "name": "RetirementPlanner.get_retirement_benefits",
                "args": {
                    "location": "New York"
                }
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "RetirementPlanner.evaluate_retirement_quality",
                "args": {
                    "currentExpenses": 50000,
                    "retirementAge": 65,
                    "costOfLivingIndex": 1.2,
                    "retirementBenefits": 20000
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RetirementPlanner.get_current_expenses', {'name': 'RetirementPlanner.get_current_expenses', 'description': 'Retrieve the current monthly expenses of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'monthlyExpenses', 'description': 'The current monthly expenses of the user.'}]}], ['RetirementPlanner.get_retirement_age', {'name': 'RetirementPlanner.get_retirement_age', 'description': 'Retrieve the user's expected retirement age.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': 'The expected retirement age of the user.'}]}], ['RetirementPlanner.get_cost_of_living_index', {'name': 'RetirementPlanner.get_cost_of_living_index', 'description': 'Retrieve the cost of living index for a specific location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location for which the cost of living index is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'costOfLivingIndex', 'description': 'The cost of living index for the specified location.'}]}], ['RetirementPlanner.get_retirement_benefits', {'name': 'RetirementPlanner.get_retirement_benefits', 'description': 'Retrieve the retirement benefits available in a specific location.', 'required_parameters': [{'name': 'location', 'type': 'STRING', 'description': 'The location for which the retirement benefits are required.'}], 'optional_parameters': [], 'return_data': [{'name': 'retirementBenefits', 'description': 'The retirement benefits available in the specified location.'}]}], ['RetirementPlanner.evaluate_retirement_quality', {'name': 'RetirementPlanner.evaluate_retirement_quality', 'description': 'Evaluate the quality of retirement life based on current expenses, retirement age, cost of living index, and retirement benefits.', 'required_parameters': [{'name': 'currentExpenses', 'type': 'NUMBER', 'description': 'The current monthly expenses of the user.'}, {'name': 'retirementAge', 'type': 'NUMBER', 'description': 'The expected retirement age of the user.'}, {'name': 'costOfLivingIndex', 'type': 'NUMBER', 'description': 'The cost of living index for the specified location.'}, {'name': 'retirementBenefits', 'type': 'NUMBER', 'description': 'The retirement benefits available in the specified location.'}], 'optional_parameters': [], 'return_data': [{'name': 'retirementQuality', 'description': 'The evaluated quality of retirement life.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估退休后的生活质量。首先，获取我当前的生活费用和预计退休年龄。然后，获取我所在地区的生活成本指数。接着，获取我所在地区的退休福利政策。最后，提供一个基于这些数据的退休生活质量评估。"
            }
        ]
    },
    "339": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TwitterAPI.get_user_activity_data",
                "TwitterAPI.analyze_user_engagement",
                "TwitterAPI.evaluate_social_media_influence",
                "TwitterAPI.generate_influence_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TwitterAPI.get_user_activity_data",
                "args": {
                    "company": "Twitter",
                    "duration": "5 years"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TwitterAPI.analyze_user_engagement",
                "args": {
                    "data": "user_activity_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TwitterAPI.evaluate_social_media_influence",
                "args": {
                    "engagement_data": "user_engagement_data",
                    "content_data": "content_propagation_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TwitterAPI.generate_influence_report",
                "args": {
                    "influence_score": "social_media_influence_score"
                }
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TwitterAPI.get_user_activity_data', {'name': 'TwitterAPI.get_user_activity_data', 'description': 'Get user activity data for a specified company over a specified duration', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}, {'name': 'duration', 'description': 'duration of data collection', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_activity_data', 'description': 'data on user activity over the specified duration'}]}],\n['TwitterAPI.analyze_user_engagement', {'name': 'TwitterAPI.analyze_user_engagement', 'description': 'Analyze user engagement based on provided data', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_engagement_data', 'description': 'data on user engagement'}]}],\n['TwitterAPI.evaluate_social_media_influence', {'name': 'TwitterAPI.evaluate_social_media_influence', 'description': 'Evaluate social media influence based on engagement and content data', 'required_parameters': [{'name': 'engagement_data', 'description': 'engagement data to be evaluated', 'type': 'STRING'}, {'name': 'content_data', 'description': 'content data to be evaluated', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'social_media_influence_score', 'description': 'score representing social media influence'}]}],\n['TwitterAPI.generate_influence_report', {'name': 'TwitterAPI.generate_influence_report', 'description': 'Generate a report based on the provided influence score', 'required_parameters': [{'name': 'influence_score', 'description': 'score to be used for report generation', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'influence_report', 'description': 'report on social media influence'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析Twitter公司的社交媒体影响力。首先，请获取Twitter公司近五年的用户活跃数据。然后，分析其用户参与度和内容传播效果。接下来，使用社交媒体影响力模型评估其社交媒体影响力。最后，提供一个基于评估的社交媒体影响力报告。"
            }
        ]
    },
    "68": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TaxConsultant.get_tax_status",
                "TaxConsultant.recommend_tax_optimization",
                "TaxConsultant.calculate_tax_savings",
                "TaxConsultant.provide_tax_consultation_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaxConsultant.get_tax_status",
                "args": {
                    "userId": "12345"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxConsultant.recommend_tax_optimization",
                "args": {
                    "income": 80000,
                    "expenses": 20000
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxConsultant.calculate_tax_savings",
                "args": {
                    "recommended_plan": "401k_contribution"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxConsultant.provide_tax_consultation_link",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TaxConsultant.get_tax_status', {'name': 'TaxConsultant.get_tax_status', 'description': 'Retrieve the current tax status of a user.', 'required_parameters': [{'name': 'userId', 'description': 'The ID of the user.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'tax_status', 'description': 'The current tax status of the user.'}]}], ['TaxConsultant.recommend_tax_optimization', {'name': 'TaxConsultant.recommend_tax_optimization', 'description': 'Recommend a tax optimization plan based on income and expenses.', 'required_parameters': [{'name': 'income', 'description': 'The annual income of the user.', 'type': 'NUMBER'}, {'name': 'expenses', 'description': 'The annual expenses of the user.', 'type': 'NUMBER'}], 'optional_parameters': [], 'return_data': [{'name': 'recommended_plan', 'description': 'The recommended tax optimization plan.'}]}], ['TaxConsultant.calculate_tax_savings', {'name': 'TaxConsultant.calculate_tax_savings', 'description': 'Calculate the annual tax savings based on the recommended plan.', 'required_parameters': [{'name': 'recommended_plan', 'description': 'The recommended tax optimization plan.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'annual_savings', 'description': 'The annual tax savings.'}]}], ['TaxConsultant.provide_tax_consultation_link', {'name': 'TaxConsultant.provide_tax_consultation_link', 'description': 'Provide a link for further tax consultation.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'consultation_link', 'description': 'The link for further tax consultation.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行税务规划。首先，请获取我当前的税务状况。然后，根据我的收入和支出，推荐一个税务优化方案。接下来，计算如果我按照推荐的方案进行税务规划，每年可以节省的税款。最后，提供一个税务咨询的链接。"
            }
        ]
    },
    "378": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Airbnb.get_user_growth_data",
                "Vrbo.get_user_growth_data",
                "TourismMarket.analyze_market_changes",
                "Survey.get_satisfaction_data",
                "Recommendation.generate_market_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Airbnb.get_user_growth_data",
                "args": {
                    "start_date": "2015-01-01",
                    "end_date": "2023-12-31"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "Vrbo.get_user_growth_data",
                "args": {
                    "start_date": "2015-01-01",
                    "end_date": "2023-12-31"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TourismMarket.analyze_market_changes",
                "args": {
                    "start_date": "2015-01-01",
                    "end_date": "2023-12-31"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Survey.get_satisfaction_data",
                "args": {
                    "platform": "Airbnb",
                    "start_date": "2015-01-01",
                    "end_date": "2023-12-31"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "Recommendation.generate_market_suggestions",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Airbnb.get_user_growth_data', {'name': 'Airbnb.get_user_growth_data', 'description': 'Get user growth data from Airbnb', 'required_parameters': [{'name': 'start_date', 'description': 'start date of the data', 'type': 'STRING'}, {'name': 'end_date', 'description': 'end date of the data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over the specified period'}]}],\n['Vrbo.get_user_growth_data', {'name': 'Vrbo.get_user_growth_data', 'description': 'Get user growth data from Vrbo', 'required_parameters': [{'name': 'start_date', 'description': 'start date of the data', 'type': 'STRING'}, {'name': 'end_date', 'description': 'end date of the data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over the specified period'}]}],\n['TourismMarket.analyze_market_changes', {'name': 'TourismMarket.analyze_market_changes', 'description': 'Analyze changes in the tourism market', 'required_parameters': [{'name': 'start_date', 'description': 'start date of the analysis', 'type': 'STRING'}, {'name': 'end_date', 'description': 'end date of the analysis', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'changes in the tourism market over the specified period'}]}],\n['Survey.get_satisfaction_data', {'name': 'Survey.get_satisfaction_data', 'description': 'Get satisfaction survey data for shared accommodations', 'required_parameters': [{'name': 'platform', 'description': 'platform name (e.g., Airbnb, Vrbo)', 'type': 'STRING'}, {'name': 'start_date', 'description': 'start date of the survey data', 'type': 'STRING'}, {'name': 'end_date', 'description': 'end date of the survey data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'satisfaction survey data over the specified period'}]}],\n['Recommendation.generate_market_suggestions', {'name': 'Recommendation.generate_market_suggestions', 'description': 'Generate market development suggestions based on previous data', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'market development suggestions'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对旅游行业的影响。首先，获取共享经济平台（如Airbnb和Vrbo）的用户增长数据。接着，分析旅游市场的变化情况。然后，获取游客对共享住宿的满意度调查数据。最后，基于这些数据，提供一些关于旅游市场发展的建议。"
            }
        ]
    },
    "459": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EconomyData.get_employment_data",
                "EconomyData.get_industry_growth_rate",
                "CompanyInfo.get_job_listings",
                "JobSearch.analyze_trends",
                "JobSearch.provide_job_search_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EconomyData.get_employment_data",
                "args": {
                    "year": "2022"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomyData.get_industry_growth_rate",
                "args": {
                    "industries": [
                        "制造业",
                        "服务业"
                    ],
                    "year": "2022"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CompanyInfo.get_job_listings",
                "args": {
                    "companies": [
                        "华为",
                        "阿里巴巴"
                    ],
                    "year": "2022"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "JobSearch.analyze_trends",
                "args": {
                    "job_listings": "华为, 阿里巴巴"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "JobSearch.provide_job_search_tips",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EconomyData.get_employment_data', {'name': 'EconomyData.get_employment_data', 'description': '获取指定年份的实体经济就业数据。', 'required_parameters': [{'name': 'year', 'type': 'STRING', 'description': '年份'}], 'optional_parameters': [], 'return_data': [{'name': 'employment_data', 'description': '就业数据'}]}], ['EconomyData.get_industry_growth_rate', {'name': 'EconomyData.get_industry_growth_rate', 'description': '获取指定年份不同行业的就业增长率。', 'required_parameters': [{'name': 'industries', 'type': 'LIST', 'description': '行业列表'}], 'optional_parameters': [{'name': 'year', 'type': 'STRING', 'description': '年份'}], 'return_data': [{'name': 'growth_rates', 'description': '就业增长率'}]}], ['CompanyInfo.get_job_listings', {'name': 'CompanyInfo.get_job_listings', 'description': '获取指定公司和年份的招聘信息。', 'required_parameters': [{'name': 'companies', 'type': 'LIST', 'description': '公司列表'}], 'optional_parameters': [{'name': 'year', 'type': 'STRING', 'description': '年份'}], 'return_data': [{'name': 'job_listings', 'description': '招聘信息'}]}], ['JobSearch.analyze_trends', {'name': 'JobSearch.analyze_trends', 'description': '分析招聘信息中的趋势。', 'required_parameters': [{'name': 'job_listings', 'type': 'STRING', 'description': '招聘信息'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': '招聘趋势'}]}], ['JobSearch.provide_job_search_tips', {'name': 'JobSearch.provide_job_search_tips', 'description': '提供在实体经济中找到工作的建议。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': '工作搜索建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的就业情况。首先，获取最近一年的实体经济就业数据。接着，提供不同行业（如制造业、服务业）的就业增长率。然后，请获取一些知名实体企业的招聘信息，并分析其招聘趋势。最后，提供一些关于如何在实体经济中找到工作的建议。"
            }
        ]
    },
    "457": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialSecurity.get_medical_insurance_rate",
                "CityHealthInsurance.get_policies",
                "PersonalHealthInsurance.get_recommendations",
                "HealthInsuranceCalculator.estimate_cost"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialSecurity.get_medical_insurance_rate",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CityHealthInsurance.get_policies",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PersonalHealthInsurance.get_recommendations",
                "args": {
                    "age": 30,
                    "income": 50000,
                    "family_size": 3
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "HealthInsuranceCalculator.estimate_cost",
                "args": {
                    "age": 30,
                    "income": 50000,
                    "family_size": 3,
                    "city": "Beijing"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialSecurity.get_medical_insurance_rate', {'name': 'SocialSecurity.get_medical_insurance_rate', 'description': 'Get the medical insurance rate and base for a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'rate', 'description': 'the medical insurance rate.'}, {'name': 'base', 'description': 'the medical insurance base.'}]}], ['CityHealthInsurance.get_policies', {'name': 'CityHealthInsurance.get_policies', 'description': 'Get the health insurance policies for a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'the list of health insurance policies.'}]}], ['PersonalHealthInsurance.get_recommendations', {'name': 'PersonalHealthInsurance.get_recommendations', 'description': 'Get recommendations for personal health insurance based on age, income, and family size.', 'required_parameters': [{'name': 'age', 'type': 'NUMBER', 'description': 'the age of the person.'}, {'name': 'income', 'type': 'NUMBER', 'description': 'the annual income of the person.'}, {'name': 'family_size', 'type': 'NUMBER', 'description': 'the number of family members.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'the list of recommended health insurance plans.'}]}], ['HealthInsuranceCalculator.estimate_cost', {'name': 'HealthInsuranceCalculator.estimate_cost', 'description': 'Estimate the cost of health insurance based on age, income, family size, and city.', 'required_parameters': [{'name': 'age', 'type': 'NUMBER', 'description': 'the age of the person.'}, {'name': 'income', 'type': 'NUMBER', 'description': 'the annual income of the person.'}, {'name': 'family_size', 'type': 'NUMBER', 'description': 'the number of family members.'}, {'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'estimated_cost', 'description': 'the estimated cost of health insurance.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解五险一金的缴纳对个人健康保险规划的影响。首先，获取五险一金中医疗保险的缴纳比例和基数。然后，获取不同城市的健康保险规划政策。接着，获取个人健康保险规划的建议和方法。最后，提供一个健康保险规划计算器，帮助我估算健康保险费用。"
            }
        ]
    },
    "191": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinance.get_international_strategy_report",
                "ChinaFinance.get_international_degree_score",
                "ChinaFinance.get_real_time_international_progress",
                "ChinaFinance.provide_international_strategy_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinance.get_international_strategy_report",
                "args": {
                    "year": 2024,
                    "companyType": "消费金融贷款公司"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_international_degree_score",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_international_degree_score",
                "args": {
                    "companyName": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ChinaFinance.get_real_time_international_progress",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ChinaFinance.provide_international_strategy_suggestions",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinance.get_international_strategy_report', {'name': 'ChinaFinance.get_international_strategy_report', 'description': '获取中国消费金融贷款公司在特定年份的国际化战略研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}, {'name': 'companyType', 'type': 'STRING', 'description': '公司类型，如消费金融贷款公司'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '国际化战略研究报告'}]}], ['ChinaFinance.get_international_degree_score', {'name': 'ChinaFinance.get_international_degree_score', 'description': '获取特定金融公司在国际市场的国际化程度评分', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'score', 'description': '国际化程度评分'}]}], ['ChinaFinance.get_real_time_international_progress', {'name': 'ChinaFinance.get_real_time_international_progress', 'description': '获取特定金融公司的实时国际化进展信息', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'progress', 'description': '实时国际化进展信息'}]}], ['ChinaFinance.provide_international_strategy_suggestions', {'name': 'ChinaFinance.provide_international_strategy_suggestions', 'description': '基于国际化战略分析，提供一些国际化建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '国际化建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的国际化战略。首先，请提供2024年中国消费金融贷款公司的国际化战略研究报告。然后，获取蚂蚁金服与京东金融的国际化程度评分进行对比分析。接着，获取蚂蚁金服的实时国际化进展信息。最后，基于国际化战略分析，提供一些国际化建议。"
            }
        ]
    },
    "392": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "DataAnalysis.analyze_trends",
                "Comparison.compare_growth_rates",
                "Recommendation.generate_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "Green Economy"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_trends",
                "args": {
                    "data": "recent_year_green_economy_consumption_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Comparison.compare_growth_rates",
                "args": {
                    "green_economy_products": "green_economy_consumption_trends",
                    "other_products": "other_products_consumption_trends"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Recommendation.generate_recommendations",
                "args": {
                    "comparison_results": "growth_rate_comparison_results"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['DataAnalysis.analyze_trends', {'name': 'DataAnalysis.analyze_trends', 'description': 'Analyze trends in given data', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'trends identified in the data'}]}], ['Comparison.compare_growth_rates', {'name': 'Comparison.compare_growth_rates', 'description': 'Compare growth rates between two sets of data', 'required_parameters': [{'name': 'green_economy_products', 'description': 'data for green economy products', 'type': 'STRING'}, {'name': 'other_products', 'description': 'data for other products', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_results', 'description': 'results of the growth rate comparison'}]}], ['Recommendation.generate_recommendations', {'name': 'Recommendation.generate_recommendations', 'description': 'Generate recommendations based on comparison results', 'required_parameters': [{'name': 'comparison_results', 'description': 'results of the comparison', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'generated recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究绿色经济对大学生消费行为的影响。首先，获取最近一年内大学生在绿色经济相关产品的消费数据。接着，分析这些产品的消费趋势。然后，比较绿色经济产品与其他产品的消费增长率。最后，提供一些关于如何引导大学生更多消费绿色经济产品的建议。"
            }
        ]
    },
    "391": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "PolicyDatabase.search_policies",
                "SuccessRateAnalyzer.analyze_success_rate",
                "ComparisonAnalyzer.compare_success_rates",
                "RecommendationGenerator.generate_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PolicyDatabase.search_policies",
                "args": {
                    "query": "绿色经济创业支持政策",
                    "time_range": "最近五年"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SuccessRateAnalyzer.analyze_success_rate",
                "args": {
                    "policies": "{{0.policy_list}}",
                    "target_group": "大学生"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ComparisonAnalyzer.compare_success_rates",
                "args": {
                    "green_economy_success_rate": "{{1.success_rate}}",
                    "other_types_success_rate": "其他类型创业成功率"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RecommendationGenerator.generate_recommendations",
                "args": {
                    "policies": "{{0.policy_list}}",
                    "success_rate_comparison": "{{2.comparison_result}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['PolicyDatabase.search_policies', {'name': 'PolicyDatabase.search_policies', 'description': 'Search for government policies related to a specific topic', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}, {'name': 'time_range', 'description': 'time range for the policies', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_list', 'description': 'list of policies found'}]}], ['SuccessRateAnalyzer.analyze_success_rate', {'name': 'SuccessRateAnalyzer.analyze_success_rate', 'description': 'Analyze the success rate of a specific group under certain policies', 'required_parameters': [{'name': 'policies', 'description': 'list of policies to analyze', 'type': 'LIST'}, {'name': 'target_group', 'description': 'target group for analysis', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'success_rate', 'description': 'success rate of the target group'}]}], ['ComparisonAnalyzer.compare_success_rates', {'name': 'ComparisonAnalyzer.compare_success_rates', 'description': 'Compare the success rates of different types of entrepreneurship', 'required_parameters': [{'name': 'green_economy_success_rate', 'description': 'success rate of green economy entrepreneurship', 'type': 'FLOAT'}, {'name': 'other_types_success_rate', 'description': 'success rate of other types of entrepreneurship', 'type': 'FLOAT'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_result', 'description': 'comparison result of the success rates'}]}], ['RecommendationGenerator.generate_recommendations', {'name': 'RecommendationGenerator.generate_recommendations', 'description': 'Generate recommendations based on policies and success rate comparison', 'required_parameters': [{'name': 'policies', 'description': 'list of policies to analyze', 'type': 'LIST'}, {'name': 'success_rate_comparison', 'description': 'comparison result of the success rates', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of recommendations generated'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解绿色经济政策对大学生创业的影响。首先，获取最近五年内政府对绿色经济创业的支持政策。接着，分析这些政策对大学生创业成功率的影响。然后，比较绿色经济创业与其他类型创业的成功率。最后，提供一些关于大学生如何利用绿色经济政策创业的建议。"
            }
        ]
    },
    "463": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "EnvironmentNews.get_latest_policies",
                "EconomyData.get_environmental_investment",
                "CorporateCase.get_environmental_cases",
                "CorporateCase.analyze_environmental_effect",
                "EnvironmentalAdvice.get_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "EnvironmentNews.get_latest_policies",
                "args": {
                    "year": "2023"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomyData.get_environmental_investment",
                "args": {
                    "sector": "Manufacturing",
                    "year": "2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "EconomyData.get_environmental_investment",
                "args": {
                    "sector": "Services",
                    "year": "2023"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CorporateCase.get_environmental_cases",
                "args": {
                    "industry": "Manufacturing",
                    "year": "2023"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CorporateCase.analyze_environmental_effect",
                "args": {
                    "case_id": "001"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "EnvironmentalAdvice.get_suggestions",
                "args": {
                    "sector": "Manufacturing"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['EnvironmentNews.get_latest_policies', {'name': 'EnvironmentNews.get_latest_policies', 'description': 'Get the latest environmental policies for a given year.', 'required_parameters': [{'name': 'year', 'type': 'STRING', 'description': 'the year for which to get the policies.'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'the list of policies for the given year.'}]}], ['EconomyData.get_environmental_investment', {'name': 'EconomyData.get_environmental_investment', 'description': 'Get the environmental investment data for a given sector and year.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'the sector for which to get the data.'}, {'name': 'year', 'type': 'STRING', 'description': 'the year for which to get the data.'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_data', 'description': 'the environmental investment data for the given sector and year.'}]}], ['CorporateCase.get_environmental_cases', {'name': 'CorporateCase.get_environmental_cases', 'description': 'Get environmental cases for a given industry and year.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry for which to get the cases.'}, {'name': 'year', 'type': 'STRING', 'description': 'the year for which to get the cases.'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'the list of environmental cases for the given industry and year.'}]}], ['CorporateCase.analyze_environmental_effect', {'name': 'CorporateCase.analyze_environmental_effect', 'description': 'Analyze the environmental effect of a given case.', 'required_parameters': [{'name': 'case_id', 'type': 'STRING', 'description': 'the ID of the case to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'the analysis of the environmental effect for the given case.'}]}], ['EnvironmentalAdvice.get_suggestions', {'name': 'EnvironmentalAdvice.get_suggestions', 'description': 'Get suggestions for environmental practices in a given sector.', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': 'the sector for which to get the suggestions.'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'the list of suggestions for environmental practices in the given sector.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的环保情况。首先，获取最近一年的环保政策新闻。接着，提供制造业和服务业的环保投入数据。然后，请获取一些知名实体企业的环保案例，并分析其环保效果。最后，提供一些关于如何在实体经济中进行环保的建议。"
            }
        ]
    },
    "107": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialInstitution.get_antitrust_policy",
                "FinancialInstitution.analyze_policy_effectiveness",
                "FinancialInstitution.get_violation_records",
                "FinancialInstitution.evaluate_management_level"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialInstitution.get_antitrust_policy",
                "args": {
                    "institutionId": "12345"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.analyze_policy_effectiveness",
                "args": {
                    "policyId": "67890"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.get_violation_records",
                "args": {
                    "institutionId": "12345",
                    "timeRange": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "FinancialInstitution.evaluate_management_level",
                "args": {
                    "institutionId": "12345",
                    "policyEffectiveness": "high",
                    "violationRecords": "none"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialInstitution.get_antitrust_policy', {'name': 'FinancialInstitution.get_antitrust_policy', 'description': '获取金融机构的反垄断政策和程序', 'required_parameters': [{'name': 'institutionId', 'description': '金融机构的ID', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'policyId', 'description': '反垄断政策的ID'}]}], ['FinancialInstitution.analyze_policy_effectiveness', {'name': 'FinancialInstitution.analyze_policy_effectiveness', 'description': '分析反垄断政策和程序的有效性', 'required_parameters': [{'name': 'policyId', 'description': '反垄断政策的ID', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'effectiveness', 'description': '政策有效性评估'}]}], ['FinancialInstitution.get_violation_records', {'name': 'FinancialInstitution.get_violation_records', 'description': '查询金融机构在过去一年内的反垄断违规记录', 'required_parameters': [{'name': 'institutionId', 'description': '金融机构的ID', 'type': 'STRING'}, {'name': 'timeRange', 'description': '时间范围', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'violationRecords', 'description': '违规记录列表'}]}], ['FinancialInstitution.evaluate_management_level', {'name': 'FinancialInstitution.evaluate_management_level', 'description': '基于政策有效性和违规记录评估金融机构的反垄断管理水平', 'required_parameters': [{'name': 'institutionId', 'description': '金融机构的ID', 'type': 'STRING'}, {'name': 'policyEffectiveness', 'description': '政策有效性评估', 'type': 'STRING'}, {'name': 'violationRecords', 'description': '违规记录列表', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'managementLevel', 'description': '管理水平评估'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某金融机构的反垄断措施。首先，获取该机构的反垄断政策和程序。然后，分析这些政策和程序的有效性。接着，查询该机构在过去一年内是否有任何反垄断违规记录。最后，基于这些信息，评估该机构的反垄断管理水平。"
            }
        ]
    },
    "199": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ConsumeFinance.get_brand_positioning_report",
                "ConsumeFinance.get_brand_positioning_score",
                "ConsumeFinance.get_real_time_brand_positioning",
                "ConsumeFinance.analyze_brand_positioning",
                "ConsumeFinance.provide_brand_positioning_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ConsumeFinance.get_brand_positioning_report",
                "args": {
                    "year": 2024,
                    "company_type": "消费金融贷款公司"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ConsumeFinance.get_brand_positioning_score",
                "args": {
                    "company_name": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ConsumeFinance.get_brand_positioning_score",
                "args": {
                    "company_name": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ConsumeFinance.analyze_brand_positioning",
                "args": {
                    "company_names": [
                        "蚂蚁金服",
                        "京东金融"
                    ]
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ConsumeFinance.get_real_time_brand_positioning",
                "args": {
                    "company_name": "蚂蚁金服"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "ConsumeFinance.provide_brand_positioning_suggestions",
                "args": {
                    "company_name": "蚂蚁金服"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ConsumeFinance.get_brand_positioning_report', {'name': 'ConsumeFinance.get_brand_positioning_report', 'description': '获取特定年份中国消费金融贷款公司的品牌定位研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}, {'name': 'company_type', 'type': 'STRING', 'description': '公司类型，如消费金融贷款公司'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '品牌定位研究报告'}]}], ['ConsumeFinance.get_brand_positioning_score', {'name': 'ConsumeFinance.get_brand_positioning_score', 'description': '获取特定公司的品牌定位评分', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'score', 'description': '品牌定位评分'}]}], ['ConsumeFinance.get_real_time_brand_positioning', {'name': 'ConsumeFinance.get_real_time_brand_positioning', 'description': '获取特定公司的实时品牌定位信息', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'positioning', 'description': '实时品牌定位信息'}]}], ['ConsumeFinance.analyze_brand_positioning', {'name': 'ConsumeFinance.analyze_brand_positioning', 'description': '对比分析多个公司的品牌定位评分', 'required_parameters': [{'name': 'company_names', 'type': 'LIST', 'description': '公司名称列表'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': '品牌定位对比分析结果'}]}], ['ConsumeFinance.provide_brand_positioning_suggestions', {'name': 'ConsumeFinance.provide_brand_positioning_suggestions', 'description': '基于品牌定位分析提供品牌定位建议', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '品牌定位建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的品牌定位情况。首先，请提供2024年中国消费金融贷款公司的品牌定位研究报告。然后，获取蚂蚁金服与京东金融的品牌定位评分进行对比分析。接着，获取蚂蚁金服的实时品牌定位信息。最后，基于品牌定位分析，提供一些品牌定位建议。"
            }
        ]
    },
    "134": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsuranceResearch.get_insurance_study_report",
                "FinancialEducation.get_successful_cases",
                "InsuranceTools.get_practical_tools",
                "InsuranceAdvisor.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsuranceResearch.get_insurance_study_report",
                "args": {
                    "topic": "financial education impact on insurance choices"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialEducation.get_successful_cases",
                "args": {
                    "topic": "insurance selection"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsuranceTools.get_practical_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsuranceAdvisor.provide_recommendations",
                "args": {
                    "researchReport": "id:0",
                    "successfulCases": "id:1",
                    "practicalTools": "id:2"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsuranceResearch.get_insurance_study_report', {'name': 'InsuranceResearch.get_insurance_study_report', 'description': 'Retrieve research reports on the impact of financial education on insurance choices.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research report.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The research report content.'}]}], ['FinancialEducation.get_successful_cases', {'name': 'FinancialEducation.get_successful_cases', 'description': 'Get successful cases of insurance selection through financial education.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the successful cases.'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of successful cases.'}]}], ['InsuranceTools.get_practical_tools', {'name': 'InsuranceTools.get_practical_tools', 'description': 'Retrieve practical tools for insurance selection.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': 'A list of practical tools.'}]}], ['InsuranceAdvisor.provide_recommendations', {'name': 'InsuranceAdvisor.provide_recommendations', 'description': 'Provide insurance selection recommendations based on research reports, successful cases, and practical tools.', 'required_parameters': [{'name': 'researchReport', 'type': 'STRING', 'description': 'The ID of the research report.'}, {'name': 'successfulCases', 'type': 'STRING', 'description': 'The ID of the successful cases.'}, {'name': 'practicalTools', 'type': 'STRING', 'description': 'The ID of the practical tools.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'The insurance selection recommendations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对保险选择的影响。首先，请获取关于保险选择的研究报告。然后，获取一些通过金融教育成功选择保险的案例。接着，获取一些保险选择的实用工具。最后，基于这些信息，为我提供一些保险选择的建议。"
            }
        ]
    },
    "501": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "OnlineTravelReport.get_latest_report",
                "OnlineTravelReport.analyze_cases",
                "InvestmentTracker.query_investment",
                "OnlineTravelAdvisor.provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "OnlineTravelReport.get_latest_report",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "OnlineTravelReport.analyze_cases",
                "args": {
                    "report_id": "latest"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InvestmentTracker.query_investment",
                "args": {
                    "case_ids": [
                        "success_case_1",
                        "failure_case_1"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "OnlineTravelAdvisor.provide_suggestions",
                "args": {
                    "analysis_results": "latest",
                    "investment_data": "latest"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['OnlineTravelReport.get_latest_report', {'name': 'OnlineTravelReport.get_latest_report', 'description': '获取最新的互联网在线旅游发展报告。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report_id', 'description': '报告的唯一标识符。'}]}], ['OnlineTravelReport.analyze_cases', {'name': 'OnlineTravelReport.analyze_cases', 'description': '分析报告中提到的在线旅游成功案例和失败案例。', 'required_parameters': [{'name': 'report_id', 'type': 'STRING', 'description': '报告的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'case_ids', 'description': '案例的唯一标识符列表。'}]}], ['InvestmentTracker.query_investment', {'name': 'InvestmentTracker.query_investment', 'description': '查询当前市场上对这些在线旅游的投资情况。', 'required_parameters': [{'name': 'case_ids', 'type': 'LIST', 'description': '案例的唯一标识符列表。'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_data', 'description': '投资情况的详细数据。'}]}], ['OnlineTravelAdvisor.provide_suggestions', {'name': 'OnlineTravelAdvisor.provide_suggestions', 'description': '基于分析和投资情况，提供在线旅游发展建议。', 'required_parameters': [{'name': 'analysis_results', 'type': 'STRING', 'description': '分析结果的唯一标识符。'}, {'name': 'investment_data', 'type': 'STRING', 'description': '投资数据的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '发展建议的详细内容。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解互联网经济的在线旅游发展。首先，获取最新的互联网在线旅游发展报告。接着，分析报告中提到的在线旅游成功案例和失败案例。然后，查询当前市场上对这些在线旅游的投资情况。最后，基于这些信息，提供一些在线旅游发展建议。"
            }
        ]
    },
    "490": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ReportFetcher.get_latest_report",
                "CaseAnalyzer.analyze_success_cases",
                "CaseAnalyzer.analyze_failure_cases",
                "InvestmentTracker.query_investment_status",
                "RecommendationGenerator.generate_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ReportFetcher.get_latest_report",
                "args": {
                    "topic": "互联网供应链管理"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CaseAnalyzer.analyze_success_cases",
                "args": {
                    "report_id": "report_id_from_previous_step"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "CaseAnalyzer.analyze_failure_cases",
                "args": {
                    "report_id": "report_id_from_previous_step"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "InvestmentTracker.query_investment_status",
                "args": {
                    "case_ids": [
                        "success_case_ids_from_previous_step",
                        "failure_case_ids_from_previous_step"
                    ]
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RecommendationGenerator.generate_recommendations",
                "args": {
                    "investment_status": "investment_status_from_previous_step"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ReportFetcher.get_latest_report', {'name': 'ReportFetcher.get_latest_report', 'description': '获取最新的特定主题报告。', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': '报告的主题。'}], 'optional_parameters': [], 'return_data': [{'name': 'report_id', 'description': '报告的唯一标识符。'}]}], ['CaseAnalyzer.analyze_success_cases', {'name': 'CaseAnalyzer.analyze_success_cases', 'description': '分析报告中提到的成功案例。', 'required_parameters': [{'name': 'report_id', 'type': 'STRING', 'description': '报告的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'success_case_ids', 'description': '成功案例的唯一标识符列表。'}]}], ['CaseAnalyzer.analyze_failure_cases', {'name': 'CaseAnalyzer.analyze_failure_cases', 'description': '分析报告中提到的失败案例。', 'required_parameters': [{'name': 'report_id', 'type': 'STRING', 'description': '报告的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'failure_case_ids', 'description': '失败案例的唯一标识符列表。'}]}], ['InvestmentTracker.query_investment_status', {'name': 'InvestmentTracker.query_investment_status', 'description': '查询当前市场上对特定案例的投资情况。', 'required_parameters': [{'name': 'case_ids', 'type': 'LIST', 'description': '案例的唯一标识符列表。'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_status', 'description': '投资情况的详细信息。'}]}], ['RecommendationGenerator.generate_recommendations', {'name': 'RecommendationGenerator.generate_recommendations', 'description': '基于投资情况生成供应链管理建议。', 'required_parameters': [{'name': 'investment_status', 'type': 'STRING', 'description': '投资情况的详细信息。'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': '生成的供应链管理建议。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解互联网经济的供应链管理。首先，获取最新的互联网供应链管理报告。接着，分析报告中提到的供应链管理成功案例和失败案例。然后，查询当前市场上对这些供应链管理的投资情况。最后，基于这些信息，提供一些供应链管理建议。"
            }
        ]
    },
    "334": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "YahooFinance.get_stock_data",
                "QuantitativeAnalysis.calculate_volatility",
                "QuantitativeAnalysis.calculate_returns",
                "MachineLearning.train_model",
                "MachineLearning.predict_future_prices",
                "QuantitativeInvestment.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "YahooFinance.get_stock_data",
                "args": {
                    "ticker": "TSLA",
                    "start_date": "2018-01-01",
                    "end_date": "2023-01-01"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "QuantitativeAnalysis.calculate_volatility",
                "args": {
                    "data": "{{0.data}}"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "QuantitativeAnalysis.calculate_returns",
                "args": {
                    "data": "{{0.data}}"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "MachineLearning.train_model",
                "args": {
                    "data": "{{0.data}}",
                    "volatility": "{{1.volatility}}",
                    "returns": "{{2.returns}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MachineLearning.predict_future_prices",
                "args": {
                    "model": "{{3.model}}",
                    "data": "{{0.data}}"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "QuantitativeInvestment.generate_strategy",
                "args": {
                    "predictions": "{{4.predictions}}"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['YahooFinance.get_stock_data', {'name': 'YahooFinance.get_stock_data', 'description': 'Get historical stock data from Yahoo Finance', 'required_parameters': [{'name': 'ticker', 'description': 'stock ticker symbol', 'type': 'STRING'}, {'name': 'start_date', 'description': 'start date of the data range', 'type': 'STRING'}, {'name': 'end_date', 'description': 'end date of the data range', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'historical stock price data'}]}],\n['QuantitativeAnalysis.calculate_volatility', {'name': 'QuantitativeAnalysis.calculate_volatility', 'description': 'Calculate the volatility of stock prices', 'required_parameters': [{'name': 'data', 'description': 'historical stock price data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'volatility', 'description': 'calculated volatility'}]}],\n['QuantitativeAnalysis.calculate_returns', {'name': 'QuantitativeAnalysis.calculate_returns', 'description': 'Calculate the returns of stock prices', 'required_parameters': [{'name': 'data', 'description': 'historical stock price data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'returns', 'description': 'calculated returns'}]}],\n['MachineLearning.train_model', {'name': 'MachineLearning.train_model', 'description': 'Train a machine learning model to predict stock prices', 'required_parameters': [{'name': 'data', 'description': 'historical stock price data', 'type': 'STRING'}, {'name': 'volatility', 'description': 'calculated volatility', 'type': 'STRING'}, {'name': 'returns', 'description': 'calculated returns', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'model', 'description': 'trained machine learning model'}]}],\n['MachineLearning.predict_future_prices', {'name': 'MachineLearning.predict_future_prices', 'description': 'Predict future stock prices using a trained model', 'required_parameters': [{'name': 'model', 'description': 'trained machine learning model', 'type': 'STRING'}, {'name': 'data', 'description': 'historical stock price data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'predictions', 'description': 'predicted future stock prices'}]}],\n['QuantitativeInvestment.generate_strategy', {'name': 'QuantitativeInvestment.generate_strategy', 'description': 'Generate a quantitative investment strategy based on predictions', 'required_parameters': [{'name': 'predictions', 'description': 'predicted future stock prices', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'generated investment strategy'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想分析特斯拉公司的量化投资策略。首先，请获取特斯拉公司过去五年的股票价格数据。然后，计算其波动率和收益率。接下来，使用机器学习模型预测未来一年的股票价格趋势。最后，基于预测结果，提供一个量化投资策略建议。"
            }
        ]
    },
    "373": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "FarmLink.get_user_growth_data",
                "Farmigo.get_user_growth_data",
                "MarketAnalysis.analyze_agricultural_market",
                "Survey.get_farmer_satisfaction_data",
                "Recommendation.provide_agricultural_market_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FarmLink.get_user_growth_data",
                "args": {}
            },
            {
                "id": 1,
                "prev": [],
                "name": "Farmigo.get_user_growth_data",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "MarketAnalysis.analyze_agricultural_market",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Survey.get_farmer_satisfaction_data",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "Recommendation.provide_agricultural_market_suggestions",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['FarmLink.get_user_growth_data', {'name': 'FarmLink.get_user_growth_data', 'description': 'Get user growth data from FarmLink platform', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}], ['Farmigo.get_user_growth_data', {'name': 'Farmigo.get_user_growth_data', 'description': 'Get user growth data from Farmigo platform', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}], ['MarketAnalysis.analyze_agricultural_market', {'name': 'MarketAnalysis.analyze_agricultural_market', 'description': 'Analyze changes in the agricultural market', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'changes in the agricultural market'}]}], ['Survey.get_farmer_satisfaction_data', {'name': 'Survey.get_farmer_satisfaction_data', 'description': 'Get farmer satisfaction data from shared agriculture', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'farmer satisfaction data'}]}], ['Recommendation.provide_agricultural_market_suggestions', {'name': 'Recommendation.provide_agricultural_market_suggestions', 'description': 'Provide suggestions for agricultural market development based on data', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'suggestions for agricultural market development'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对农业的影响。首先，获取共享经济平台（如FarmLink和Farmigo）的用户增长数据。接着，分析农业市场的变化情况。然后，获取农民对共享农业的满意度调查数据。最后，基于这些数据，提供一些关于农业市场发展的建议。"
            }
        ]
    },
    "513": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "DataFetcher.get_financial_crisis_data",
                "DataFetcher.get_tech_consumption_data",
                "DataAnalyzer.analyze_correlation",
                "DataFetcher.get_current_consumption_data",
                "RecommendationGenerator.generate_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "DataFetcher.get_financial_crisis_data",
                "args": {
                    "crisis_periods": "2008, 2010, 2015"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataFetcher.get_tech_consumption_data",
                "args": {
                    "student_type": "graduates",
                    "periods": "2008, 2010, 2015"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAnalyzer.analyze_correlation",
                "args": {
                    "data_type": "tech_consumption",
                    "correlation_with": "financial_crisis"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "DataFetcher.get_current_consumption_data",
                "args": {
                    "student_type": "graduates",
                    "period": "2023"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RecommendationGenerator.generate_recommendations",
                "args": {
                    "data_type": "tech_consumption",
                    "context": "financial_crisis"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['DataFetcher.get_financial_crisis_data', {'name': 'DataFetcher.get_financial_crisis_data', 'description': 'Fetch data on financial crises during specified periods.', 'required_parameters': [{'name': 'crisis_periods', 'type': 'STRING', 'description': 'comma-separated list of crisis periods'}], 'optional_parameters': [], 'return_data': [{'name': 'crisis_data', 'description': 'data on financial crises'}]}], ['DataFetcher.get_tech_consumption_data', {'name': 'DataFetcher.get_tech_consumption_data', 'description': 'Fetch data on tech product consumption by students during specified periods.', 'required_parameters': [{'name': 'student_type', 'type': 'STRING', 'description': 'type of student (e.g., graduates, undergraduates)'}], 'optional_parameters': [{'name': 'periods', 'type': 'STRING', 'description': 'comma-separated list of periods'}], 'return_data': [{'name': 'consumption_data', 'description': 'data on tech product consumption'}]}], ['DataAnalyzer.analyze_correlation', {'name': 'DataAnalyzer.analyze_correlation', 'description': 'Analyze the correlation between two types of data.', 'required_parameters': [{'name': 'data_type', 'type': 'STRING', 'description': 'type of data to analyze'}], 'optional_parameters': [{'name': 'correlation_with', 'type': 'STRING', 'description': 'type of data to correlate with'}], 'return_data': [{'name': 'correlation_result', 'description': 'correlation analysis result'}]}], ['DataFetcher.get_current_consumption_data', {'name': 'DataFetcher.get_current_consumption_data', 'description': 'Fetch current data on tech product consumption by students.', 'required_parameters': [{'name': 'student_type', 'type': 'STRING', 'description': 'type of student (e.g., graduates, undergraduates)'}], 'optional_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'current period'}], 'return_data': [{'name': 'current_consumption_data', 'description': 'current data on tech product consumption'}]}], ['RecommendationGenerator.generate_recommendations', {'name': 'RecommendationGenerator.generate_recommendations', 'description': 'Generate recommendations based on provided data.', 'required_parameters': [{'name': 'data_type', 'type': 'STRING', 'description': 'type of data to base recommendations on'}], 'optional_parameters': [{'name': 'context', 'type': 'STRING', 'description': 'context for recommendations'}], 'return_data': [{'name': 'recommendations', 'description': 'generated recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融危机对刚毕业大学生的科技产品消费影响。首先，获取过去几次金融危机期间大学生科技产品消费的变化数据。接着，分析这些变化与科技发展的关系。然后，获取当前经济环境下大学生的科技产品消费情况。最后，基于这些数据，提供一些应对金融危机的科技产品消费建议。"
            }
        ]
    },
    "122": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialInstitution.get_anti_fraud_regulations",
                "FinancialInstitution.analyze_regulations",
                "FinancialInstitution.check_compliance",
                "FinancialInstitution.provide_compliance_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialInstitution.get_anti_fraud_regulations",
                "args": {
                    "institution_name": "GlobalBank"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.analyze_regulations",
                "args": {
                    "regulations": "retrieved_regulations"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialInstitution.check_compliance",
                "args": {
                    "institution_name": "GlobalBank",
                    "regulations": "analyzed_regulations"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialInstitution.provide_compliance_strategy",
                "args": {
                    "compliance_status": "compliance_check_result"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialInstitution.get_anti_fraud_regulations', {'name': 'FinancialInstitution.get_anti_fraud_regulations', 'description': 'Retrieve the anti-fraud regulations and requirements for a specified financial institution.', 'required_parameters': [{'name': 'institution_name', 'description': 'The name of the financial institution.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'regulations', 'description': 'The anti-fraud regulations and requirements.'}]}], ['FinancialInstitution.analyze_regulations', {'name': 'FinancialInstitution.analyze_regulations', 'description': 'Analyze the content of the retrieved anti-fraud regulations and requirements.', 'required_parameters': [{'name': 'regulations', 'description': 'The regulations to be analyzed.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'The analysis of the regulations.'}]}], ['FinancialInstitution.check_compliance', {'name': 'FinancialInstitution.check_compliance', 'description': 'Check if the specified financial institution complies with all anti-fraud regulations and requirements.', 'required_parameters': [{'name': 'institution_name', 'description': 'The name of the financial institution.', 'type': 'STRING'}, {'name': 'regulations', 'description': 'The regulations to check against.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'compliance_status', 'description': 'The compliance status of the institution.'}]}], ['FinancialInstitution.provide_compliance_strategy', {'name': 'FinancialInstitution.provide_compliance_strategy', 'description': 'Provide strategies for improving anti-fraud compliance based on the compliance status.', 'required_parameters': [{'name': 'compliance_status', 'description': 'The compliance status of the institution.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'compliance_strategy', 'description': 'The recommended compliance strategies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某金融机构的反欺诈合规情况。首先，获取该机构的反欺诈法规和要求。然后，分析这些法规和要求的具体内容。接着，查询该机构是否符合所有反欺诈合规条件。最后，基于这些信息，提供一些反欺诈合规策略建议。"
            }
        ]
    },
    "400": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "DataAnalysis.analyze_sustainability_data",
                "Comparison.compare_sustainability",
                "Recommendation.provide_sustainability_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "Green Economy Project Sustainability Indicators"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_sustainability_data",
                "args": {
                    "data": "{{0.return_data.pub_info}}"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Comparison.compare_sustainability",
                "args": {
                    "green_economy_data": "{{1.return_data}}",
                    "other_projects_data": "{{0.return_data.pub_info}}"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Recommendation.provide_sustainability_recommendations",
                "args": {
                    "comparison_result": "{{2.return_data}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['DataAnalysis.analyze_sustainability_data', {'name': 'DataAnalysis.analyze_sustainability_data', 'description': 'Analyze sustainability data of green economy projects', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'result of the analysis'}]}], ['Comparison.compare_sustainability', {'name': 'Comparison.compare_sustainability', 'description': 'Compare sustainability of green economy projects with other projects', 'required_parameters': [{'name': 'green_economy_data', 'description': 'data of green economy projects', 'type': 'STRING'}, {'name': 'other_projects_data', 'description': 'data of other projects', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_result', 'description': 'result of the comparison'}]}], ['Recommendation.provide_sustainability_recommendations', {'name': 'Recommendation.provide_sustainability_recommendations', 'description': 'Provide recommendations to improve sustainability of green economy projects', 'required_parameters': [{'name': 'comparison_result', 'description': 'result of the comparison', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解绿色经济项目的可持续发展性。首先，获取过去一年内绿色经济项目的可持续发展指标数据。接着，分析这些项目的可持续发展能力。然后，比较绿色经济项目与其他项目的可持续发展性。最后，提供一些关于如何提高绿色经济项目可持续发展性的建议。"
            }
        ]
    },
    "54": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RetailData.get_latest_sales",
                "RetailData.analyze_policy_impact",
                "RetailData.compare_sales_under_policies",
                "RetailData.predict_future_sales",
                "Email.send"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RetailData.get_latest_sales",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RetailData.analyze_policy_impact",
                "args": {
                    "sales_data": "latest_sales_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RetailData.compare_sales_under_policies",
                "args": {
                    "policy_data": "policy_adjustments"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RetailData.predict_future_sales",
                "args": {
                    "analysis_data": "comparison_results"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "Email.send",
                "args": {
                    "address": "retailanalyst@example.com",
                    "title": "Retail Sales Forecast",
                    "body": "Here is the analysis and forecast based on the latest retail sales data and monetary policy adjustments. Please find the attached file for detailed information.",
                    "attachment": "/path/to/retail_forecast.pdf"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RetailData.get_latest_sales', {'name': 'RetailData.get_latest_sales', 'description': 'Retrieve the latest retail sales data.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'sales_data', 'description': 'The latest retail sales data.'}]}], ['RetailData.analyze_policy_impact', {'name': 'RetailData.analyze_policy_impact', 'description': 'Analyze the impact of monetary policy adjustments on retail sales.', 'required_parameters': [{'name': 'sales_data', 'type': 'STRING', 'description': 'The latest retail sales data.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact_analysis', 'description': 'The analysis of policy impact on retail sales.'}]}], ['RetailData.compare_sales_under_policies', {'name': 'RetailData.compare_sales_under_policies', 'description': 'Compare retail sales under different monetary policies.', 'required_parameters': [{'name': 'policy_data', 'type': 'STRING', 'description': 'The data of policy adjustments.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_results', 'description': 'The comparison results of retail sales under different policies.'}]}], ['RetailData.predict_future_sales', {'name': 'RetailData.predict_future_sales', 'description': 'Predict future retail sales based on current analysis.', 'required_parameters': [{'name': 'analysis_data', 'type': 'STRING', 'description': 'The analysis data for prediction.'}], 'optional_parameters': [], 'return_data': [{'name': 'future_sales_prediction', 'description': 'The prediction of future retail sales.'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解当前的货币政策对零售业的影响。首先，请获取最新的零售销售数据。然后，分析货币政策调整对零售业的即时反应。接下来，比较不同货币政策下的零售销售变化。最后，请提供基于分析的零售业预测。"
            }
        ]
    },
    "512": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "DataFetcher.get_historical_training_participation_rates",
                "DataFetcher.analyze_employment_market_trends",
                "DataFetcher.get_current_training_participation_rates",
                "DataFetcher.provide_training_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "DataFetcher.get_historical_training_participation_rates",
                "args": {
                    "financial_crisis_periods": [
                        "2008-2009",
                        "2001-2002"
                    ]
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataFetcher.analyze_employment_market_trends",
                "args": {
                    "participation_rates": "historical_data",
                    "employment_market_data": "historical_employment_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataFetcher.get_current_training_participation_rates",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "DataFetcher.provide_training_recommendations",
                "args": {
                    "historical_analysis": "analysis_result",
                    "current_participation_rates": "current_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['DataFetcher.get_historical_training_participation_rates', {'name': 'DataFetcher.get_historical_training_participation_rates', 'description': 'Get the participation rates of skill training for university graduates during specified financial crisis periods.', 'required_parameters': [{'name': 'financial_crisis_periods', 'type': 'LIST', 'description': 'a list of financial crisis periods in the format YYYY-YYYY'}], 'optional_parameters': [], 'return_data': [{'name': 'participation_rates', 'description': 'the participation rates during the specified periods.'}]}], ['DataFetcher.analyze_employment_market_trends', {'name': 'DataFetcher.analyze_employment_market_trends', 'description': 'Analyze the relationship between skill training participation rates and employment market trends.', 'required_parameters': [{'name': 'participation_rates', 'type': 'STRING', 'description': 'the participation rates data.'}, {'name': 'employment_market_data', 'type': 'STRING', 'description': 'the employment market data.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'the analysis result of the relationship.'}]}], ['DataFetcher.get_current_training_participation_rates', {'name': 'DataFetcher.get_current_training_participation_rates', 'description': 'Get the current participation rates of skill training for university graduates.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'current_participation_rates', 'description': 'the current participation rates.'}]}], ['DataFetcher.provide_training_recommendations', {'name': 'DataFetcher.provide_training_recommendations', 'description': 'Provide recommendations for skill training based on historical analysis and current participation rates.', 'required_parameters': [{'name': 'historical_analysis', 'type': 'STRING', 'description': 'the historical analysis result.'}, {'name': 'current_participation_rates', 'type': 'STRING', 'description': 'the current participation rates data.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'the recommended skill training strategies.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解金融危机对刚毕业大学生的技能培训影响。首先，获取过去几次金融危机期间大学生技能培训参与率的变化数据。接着，分析这些变化与就业市场的关系。然后，获取当前经济环境下大学生的技能培训情况。最后，基于这些数据，提供一些应对金融危机的技能培训建议。"
            }
        ]
    },
    "126": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialData.get_fraud_statistics",
                "FinancialData.get_education_success_cases",
                "FinancialData.get_education_content",
                "Email.send"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialData.get_fraud_statistics",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialData.get_education_success_cases",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "FinancialData.get_education_content",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "Email.send",
                "args": {
                    "address": "financialadvisor@example.com",
                    "title": "Financial Education and Fraud Prevention",
                    "body": "Here are the latest statistics on financial fraud, successful cases of fraud prevention through financial education, and key content from financial education courses on fraud prevention. Based on these, here are some recommendations to prevent financial fraud:\n\n1. Stay informed about common fraud schemes.\n2. Verify the legitimacy of financial institutions and advisors.\n3. Use strong, unique passwords for all financial accounts.\n4. Regularly monitor your financial statements for any unauthorized transactions.\n5. Educate yourself and your family about financial literacy.",
                    "attachment": "/path/to/fraud_prevention.pdf"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialData.get_fraud_statistics', {'name': 'FinancialData.get_fraud_statistics', 'description': 'Retrieve the latest statistics on financial fraud.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'statistics', 'description': 'The latest statistics on financial fraud.'}]}], ['FinancialData.get_education_success_cases', {'name': 'FinancialData.get_education_success_cases', 'description': 'Retrieve cases where financial education successfully prevented fraud.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'Cases where financial education successfully prevented fraud.'}]}], ['FinancialData.get_education_content', {'name': 'FinancialData.get_education_content', 'description': 'Retrieve content from financial education courses on fraud prevention.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'Content from financial education courses on fraud prevention.'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解金融教育对预防金融诈骗的作用。首先，请获取关于金融诈骗的最新统计数据。然后，获取一些通过金融教育成功预防诈骗的案例。接着，获取一些金融教育课程中关于诈骗预防的内容。最后，基于这些信息，为我提供一些预防金融诈骗的建议。"
            }
        ]
    },
    "329": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "TaxSurvey.get_latest_results",
                "TaxSurvey.get_historical_data",
                "TaxSurvey.get_current_tools",
                "TaxSurvey.analyze_and_suggest"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaxSurvey.get_latest_results",
                "args": {
                    "year": "2024"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxSurvey.get_historical_data",
                "args": {
                    "year": "2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxSurvey.get_current_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxSurvey.analyze_and_suggest",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['TaxSurvey.get_latest_results', {'name': 'TaxSurvey.get_latest_results', 'description': 'Get the latest results of a tax social survey for a specific year', 'required_parameters': [{'name': 'year', 'description': 'the year of the survey', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'survey_results', 'description': 'the latest survey results'}]}], ['TaxSurvey.get_historical_data', {'name': 'TaxSurvey.get_historical_data', 'description': 'Get historical data of a tax social survey for a specific year', 'required_parameters': [{'name': 'year', 'description': 'the year of the survey', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'historical_data', 'description': 'historical survey data'}]}], ['TaxSurvey.get_current_tools', {'name': 'TaxSurvey.get_current_tools', 'description': 'Get the current tools used in tax social surveys', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': 'list of current tools'}]}], ['TaxSurvey.analyze_and_suggest', {'name': 'TaxSurvey.analyze_and_suggest', 'description': 'Analyze the results and historical data to provide suggestions for future surveys', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'list of suggestions for future surveys'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国居民的税务社会调查。首先，请提供2024年中国居民税务社会调查的最新结果。然后，获取过去一年中国居民税务社会调查的案例数据。接着，获取当前税务社会调查工具的使用情况。最后，基于结果和案例分析，提供一些调查建议。"
            }
        ]
    },
    "132": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ResearchReports.get_startup_research",
                "SuccessStories.get_financial_education_success_cases",
                "StartupTools.get_useful_tools",
                "ResearchReports.get_startup_research",
                "SuccessStories.get_financial_education_success_cases",
                "StartupTools.get_useful_tools",
                "FinishAction"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ResearchReports.get_startup_research",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "SuccessStories.get_financial_education_success_cases",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StartupTools.get_useful_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ResearchReports.get_startup_research', {'name': 'ResearchReports.get_startup_research', 'description': '获取关于创业的研究报告', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'reports', 'description': '包含创业研究报告的列表'}]}], ['SuccessStories.get_financial_education_success_cases', {'name': 'SuccessStories.get_financial_education_success_cases', 'description': '获取通过金融教育成功创业的案例', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '包含成功创业案例的列表'}]}], ['StartupTools.get_useful_tools', {'name': 'StartupTools.get_useful_tools', 'description': '获取创业的实用工具', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': '包含实用工具的列表'}]}], ['FinishAction', {'name': 'FinishAction', 'description': '结束操作', 'required_parameters': [], 'optional_parameters': [], 'return_data': []}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对创业的影响。首先，请获取关于创业的研究报告。然后，获取一些通过金融教育成功创业的案例。接着，获取一些创业的实用工具。最后，基于这些信息，为我提供一些创业的建议。"
            }
        ]
    },
    "248": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PersonalFinance.get_donation_history",
                "PersonalFinance.get_retirement_age",
                "TechDonation.get_donation_return_rates",
                "TaxAdvisor.get_donation_tax_benefits",
                "TechDonation.create_donation_plan"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PersonalFinance.get_donation_history",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PersonalFinance.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TechDonation.get_donation_return_rates",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxAdvisor.get_donation_tax_benefits",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "TechDonation.create_donation_plan",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PersonalFinance.get_donation_history', {'name': 'PersonalFinance.get_donation_history', 'description': 'Retrieve the user's current donation habits.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'donation_history', 'description': 'A list of past donations including amount, date, and recipient.'}]}], ['PersonalFinance.get_retirement_age', {'name': 'PersonalFinance.get_retirement_age', 'description': 'Get the user's estimated retirement age.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirement_age', 'description': 'The estimated retirement age.'}]}], ['TechDonation.get_donation_return_rates', {'name': 'TechDonation.get_donation_return_rates', 'description': 'Retrieve the return rates for donations to various tech institutions.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'return_rates', 'description': 'A list of return rates for different tech institutions.'}]}], ['TaxAdvisor.get_donation_tax_benefits', {'name': 'TaxAdvisor.get_donation_tax_benefits', 'description': 'Get the tax benefits for tech donations in the user's region.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tax_benefits', 'description': 'A list of tax benefits for tech donations.'}]}], ['TechDonation.create_donation_plan', {'name': 'TechDonation.create_donation_plan', 'description': 'Create a retirement donation plan based on the provided data.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'donation_plan', 'description': 'A detailed plan for retirement tech donations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要评估退休后的科技捐赠计划。首先，获取我当前的科技捐赠习惯和预计退休年龄。然后，获取不同科技机构的捐赠回报率。接着，获取我所在地区的科技捐赠税收优惠。最后，提供一个基于这些数据的退休科技捐赠计划。"
            }
        ]
    },
    "184": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketResearch.get_market_report",
                "MarketResearch.get_company_market_share",
                "FinancialData.get_company_valuation",
                "InvestmentAdvisor.provide_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketResearch.get_market_report",
                "args": {
                    "year": "2024",
                    "market": "China consumer finance loan"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketResearch.get_company_market_share",
                "args": {
                    "company": "Ant Financial",
                    "market": "China consumer finance loan"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "MarketResearch.get_company_market_share",
                "args": {
                    "company": "JD Finance",
                    "market": "China consumer finance loan"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "FinancialData.get_company_valuation",
                "args": {
                    "company": "Ant Financial"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InvestmentAdvisor.provide_investment_advice",
                "args": {
                    "market_report": "MarketResearch.get_market_report",
                    "market_share_data": [
                        "MarketResearch.get_company_market_share",
                        "MarketResearch.get_company_market_share"
                    ],
                    "company_valuation": "FinancialData.get_company_valuation"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketResearch.get_market_report', {'name': 'MarketResearch.get_market_report', 'description': 'Retrieve the market research report for a specified year and market.', 'required_parameters': [{'name': 'year', 'type': 'STRING', 'description': 'The year of the report.'}, {'name': 'market', 'type': 'STRING', 'description': 'The market to research.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The market research report including market size, growth rate, and key players.'}]}], ['MarketResearch.get_company_market_share', {'name': 'MarketResearch.get_company_market_share', 'description': 'Retrieve the market share of a company in a specified market.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'market', 'type': 'STRING', 'description': 'The market to research.'}], 'optional_parameters': [], 'return_data': [{'name': 'market_share', 'description': 'The market share of the company in percentage.'}]}], ['FinancialData.get_company_valuation', {'name': 'FinancialData.get_company_valuation', 'description': 'Retrieve the real-time market valuation of a company.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}], 'optional_parameters': [], 'return_data': [{'name': 'valuation', 'description': 'The real-time market valuation of the company in USD.'}]}], ['InvestmentAdvisor.provide_investment_advice', {'name': 'InvestmentAdvisor.provide_investment_advice', 'description': 'Provide investment advice based on market research and company data.', 'required_parameters': [{'name': 'market_report', 'type': 'STRING', 'description': 'The market research report.'}, {'name': 'market_share_data', 'type': 'LIST', 'description': 'A list of market share data for companies.'}, {'name': 'company_valuation', 'type': 'STRING', 'description': 'The company valuation data.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice based on the provided data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的市场现状。首先，请提供2024年中国消费金融贷款市场的研究报告。然后，获取蚂蚁金服与京东金融的市场份额数据进行对比分析。接着，获取蚂蚁金服的实时市场估值。最后，基于市场表现和竞争分析，提供一些投资建议。"
            }
        ]
    },
    "8": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "LinkedIn.get_job_history",
                "Glassdoor.get_job_history",
                "LinkedIn.get_current_jobs",
                "Glassdoor.get_current_jobs",
                "DataAnalysis.analyze_job_trends",
                "Strategy.generate_investment_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "LinkedIn.get_job_history",
                "args": {
                    "duration": "1 year",
                    "category": "FinTech"
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "Glassdoor.get_job_history",
                "args": {
                    "duration": "1 year",
                    "category": "FinTech"
                }
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "LinkedIn.get_current_jobs",
                "args": {
                    "category": "FinTech"
                }
            },
            {
                "id": 3,
                "prev": [
                    0,
                    1
                ],
                "name": "Glassdoor.get_current_jobs",
                "args": {
                    "category": "FinTech"
                }
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "DataAnalysis.analyze_job_trends",
                "args": {
                    "platforms": [
                        "LinkedIn",
                        "Glassdoor"
                    ],
                    "category": "FinTech"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "Strategy.generate_investment_strategy",
                "args": {
                    "trends": "analysis_result"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['LinkedIn.get_job_history', {'name': 'LinkedIn.get_job_history', 'description': 'Retrieve job posting history from LinkedIn for a specified duration and category.', 'required_parameters': [{'name': 'duration', 'description': 'The duration for which to retrieve job history.', 'type': 'STRING'}, {'name': 'category', 'description': 'The category of jobs to retrieve.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'job_history', 'description': 'The job posting history data.'}]}], ['Glassdoor.get_job_history', {'name': 'Glassdoor.get_job_history', 'description': 'Retrieve job posting history from Glassdoor for a specified duration and category.', 'required_parameters': [{'name': 'duration', 'description': 'The duration for which to retrieve job history.', 'type': 'STRING'}, {'name': 'category', 'description': 'The category of jobs to retrieve.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'job_history', 'description': 'The job posting history data.'}]}], ['LinkedIn.get_current_jobs', {'name': 'LinkedIn.get_current_jobs', 'description': 'Retrieve current job postings from LinkedIn for a specified category.', 'required_parameters': [{'name': 'category', 'description': 'The category of jobs to retrieve.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'current_jobs', 'description': 'The current job postings data.'}]}], ['Glassdoor.get_current_jobs', {'name': 'Glassdoor.get_current_jobs', 'description': 'Retrieve current job postings from Glassdoor for a specified category.', 'required_parameters': [{'name': 'category', 'description': 'The category of jobs to retrieve.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'current_jobs', 'description': 'The current job postings data.'}]}], ['DataAnalysis.analyze_job_trends', {'name': 'DataAnalysis.analyze_job_trends', 'description': 'Analyze job trends based on data from specified platforms and category.', 'required_parameters': [{'name': 'platforms', 'description': 'The platforms from which data is retrieved.', 'type': 'LIST'}, {'name': 'category', 'description': 'The category of jobs to analyze.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'The analyzed job trends data.'}]}], ['Strategy.generate_investment_strategy', {'name': 'Strategy.generate_investment_strategy', 'description': 'Generate an investment strategy based on analyzed trends.', 'required_parameters': [{'name': 'trends', 'description': 'The analyzed trends data.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'The generated investment strategy.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解当前的金融科技人才市场趋势。首先，获取LinkedIn和Glassdoor过去一年的金融科技职位发布历史数据。然后，获取当前LinkedIn和Glassdoor的实时金融科技职位发布数据。接着，分析这两个平台的金融科技职位需求趋势。最后，基于分析结果，提供一个金融科技人才投资策略建议。"
            }
        ]
    },
    "211": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinance.get_retention_rate_report",
                "ChinaFinance.get_company_retention_rate",
                "ChinaFinance.get_real_time_retention_rate",
                "ChinaFinance.get_retention_rate_analysis",
                "ChinaFinance.get_retention_rate_recommendation"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinance.get_retention_rate_report",
                "args": {
                    "year": 2024
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_company_retention_rate",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_company_retention_rate",
                "args": {
                    "company": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ChinaFinance.get_retention_rate_analysis",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ChinaFinance.get_real_time_retention_rate",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "ChinaFinance.get_retention_rate_recommendation",
                "args": {}
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinance.get_retention_rate_report', {'name': 'ChinaFinance.get_retention_rate_report', 'description': '获取中国消费金融贷款公司在指定年份的用户留存率研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '指定年份'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '用户留存率研究报告'}]}], ['ChinaFinance.get_company_retention_rate', {'name': 'ChinaFinance.get_company_retention_rate', 'description': '获取指定消费金融贷款公司的用户留存率数据', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'retention_rate', 'description': '用户留存率数据'}]}], ['ChinaFinance.get_real_time_retention_rate', {'name': 'ChinaFinance.get_real_time_retention_rate', 'description': '获取指定消费金融贷款公司的实时用户留存率信息', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'real_time_retention_rate', 'description': '实时用户留存率信息'}]}], ['ChinaFinance.get_retention_rate_analysis', {'name': 'ChinaFinance.get_retention_rate_analysis', 'description': '对获取的用户留存率数据进行对比分析', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': '用户留存率对比分析结果'}]}], ['ChinaFinance.get_retention_rate_recommendation', {'name': 'ChinaFinance.get_retention_rate_recommendation', 'description': '基于用户留存率分析，提供用户留存率建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendation', 'description': '用户留存率建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的用户留存率情况。首先，请提供2024年中国消费金融贷款公司的用户留存率研究报告。然后，获取蚂蚁金服与京东金融的用户留存率数据进行对比分析。接着，获取蚂蚁金服的实时用户留存率信息。最后，基于用户留存率分析，提供一些用户留存率建议。"
            }
        ]
    },
    "240": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "UserProfile.get_cultural_habits",
                "UserProfile.get_retirement_age",
                "CulturalActivities.get_cost_and_return",
                "GovernmentSubsidies.get_cultural_subsidies",
                "BudgetPlanner.generate_cultural_budget"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "UserProfile.get_cultural_habits",
                "args": {}
            },
            {
                "id": 1,
                "prev": [],
                "name": "UserProfile.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "CulturalActivities.get_cost_and_return",
                "args": {
                    "culturalHabits": "UserProfile.get_cultural_habits",
                    "retirementAge": "UserProfile.get_retirement_age"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GovernmentSubsidies.get_cultural_subsidies",
                "args": {
                    "region": "UserProfile.get_cultural_habits"
                }
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "BudgetPlanner.generate_cultural_budget",
                "args": {
                    "costAndReturn": "CulturalActivities.get_cost_and_return",
                    "subsidies": "GovernmentSubsidies.get_cultural_subsidies"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['UserProfile.get_cultural_habits', {'name': 'UserProfile.get_cultural_habits', 'description': 'Retrieve the user's current cultural activity habits.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'culturalHabits', 'description': 'A list of cultural activities the user currently engages in.'}]}], ['UserProfile.get_retirement_age', {'name': 'UserProfile.get_retirement_age', 'description': 'Retrieve the user's expected retirement age.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': 'The user's expected retirement age.'}]}], ['CulturalActivities.get_cost_and_return', {'name': 'CulturalActivities.get_cost_and_return', 'description': 'Get the cost and return rate of different cultural activities.', 'required_parameters': [{'name': 'culturalHabits', 'type': 'STRING', 'description': 'The cultural habits of the user.'}, {'name': 'retirementAge', 'type': 'NUMBER', 'description': 'The user's expected retirement age.'}], 'optional_parameters': [], 'return_data': [{'name': 'costAndReturn', 'description': 'A list of cultural activities with their associated costs and return rates.'}]}], ['GovernmentSubsidies.get_cultural_subsidies', {'name': 'GovernmentSubsidies.get_cultural_subsidies', 'description': 'Retrieve the cultural activity subsidies available in the user's region.', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': 'The region where the user resides.'}], 'optional_parameters': [], 'return_data': [{'name': 'subsidies', 'description': 'A list of subsidies available for cultural activities in the user's region.'}]}], ['BudgetPlanner.generate_cultural_budget', {'name': 'BudgetPlanner.generate_cultural_budget', 'description': 'Generate a budget for cultural activities based on cost, return rate, and subsidies.', 'required_parameters': [{'name': 'costAndReturn', 'type': 'STRING', 'description': 'The cost and return data of cultural activities.'}, {'name': 'subsidies', 'type': 'STRING', 'description': 'The subsidies available for cultural activities.'}], 'optional_parameters': [], 'return_data': [{'name': 'budget', 'description': 'A budget plan for cultural activities during retirement.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解退休后的文化活动计划。首先，获取我当前的文化活动习惯和预计退休年龄。然后，获取不同文化活动的成本和回报率。接着，获取我所在地区的文化活动补贴政策。最后，提供一个基于这些数据的退休文化活动预算。"
            }
        ]
    },
    "188": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinanceTech.get_tech_report",
                "TechRating.get_company_rating",
                "TechUpdate.get_real_time_updates",
                "TechAnalysis.provide_tech_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinanceTech.get_tech_report",
                "args": {
                    "year": 2024
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TechRating.get_company_rating",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "TechRating.get_company_rating",
                "args": {
                    "company": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "TechAnalysis.provide_tech_suggestions",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "TechUpdate.get_real_time_updates",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinanceTech.get_tech_report', {'name': 'ChinaFinanceTech.get_tech_report', 'description': '获取中国消费金融贷款公司在特定年份的技术应用研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '技术应用研究报告的内容'}]}], ['TechRating.get_company_rating', {'name': 'TechRating.get_company_rating', 'description': '获取特定公司在技术应用方面的评分', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'rating', 'description': '技术应用评分'}]}], ['TechUpdate.get_real_time_updates', {'name': 'TechUpdate.get_real_time_updates', 'description': '获取特定公司的实时技术更新信息', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'updates', 'description': '实时技术更新信息'}]}], ['TechAnalysis.provide_tech_suggestions', {'name': 'TechAnalysis.provide_tech_suggestions', 'description': '基于技术应用分析提供技术应用建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '技术应用建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的技术应用情况。首先，请提供2024年中国消费金融贷款公司的技术应用研究报告。然后，获取蚂蚁金服与京东金融的技术应用评分进行对比分析。接着，获取蚂蚁金服的实时技术更新信息。最后，基于技术应用分析，提供一些技术应用建议。"
            }
        ]
    },
    "128": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ResearchReport.get_report",
                "CaseStudy.get_case",
                "FinancialTool.get_tools",
                "Email.send"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ResearchReport.get_report",
                "args": {
                    "topic": "家庭财务管理"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CaseStudy.get_case",
                "args": {
                    "topic": "金融教育改善家庭财务状况"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "FinancialTool.get_tools",
                "args": {
                    "category": "家庭财务管理"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "Email.send",
                "args": {
                    "address": "financialadvisor@example.com",
                    "title": "家庭财务管理建议",
                    "body": "基于研究报告和案例分析，以下是一些家庭财务管理的建议：\n\n1. 制定预算并坚持执行。\n2. 建立紧急基金。\n3. 定期进行财务教育。\n4. 使用财务管理工具。\n\n请查看附件了解更多详细信息。",
                    "attachment": "/path/to/financial_management_advice.pdf"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ResearchReport.get_report', {'name': 'ResearchReport.get_report', 'description': '获取特定主题的研究报告', 'required_parameters': [{'name': 'topic', 'description': '研究报告的主题', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '研究报告的内容'}]}], ['CaseStudy.get_case', {'name': 'CaseStudy.get_case', 'description': '获取特定主题的案例研究', 'required_parameters': [{'name': 'topic', 'description': '案例研究的主题', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'case', 'description': '案例研究的内容'}]}], ['FinancialTool.get_tools', {'name': 'FinancialTool.get_tools', 'description': '获取特定类别的财务管理工具', 'required_parameters': [{'name': 'category', 'description': '工具的类别', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': '财务管理工具的列表'}]}], ['Email.send', {'name': 'Email.send', 'description': '发送电子邮件', 'required_parameters': [{'name': 'address', 'description': '收件人的电子邮件地址', 'type': 'STRING'}, {'name': 'title', 'description': '电子邮件的标题', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': '电子邮件的内容', 'type': 'STRING'}, {'name': 'attachment', 'description': '附件的路径', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': '发送电子邮件的状态'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对家庭财务管理的影响。首先，请获取关于家庭财务管理的研究报告。然后，获取一些通过金融教育改善家庭财务状况的案例。接着，获取一些家庭财务管理的实用工具。最后，基于这些信息，为我提供一些家庭财务管理的建议。"
            }
        ]
    },
    "282": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ArxivSearch.get_arxiv_article_information",
                "PolygonFinance.get_ticker_news",
                "CompanyFinance.get_financial_statements",
                "BehavioralFinance.analyze_data_for_framing_effect",
                "InvestmentStrategy.provide_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ArxivSearch.get_arxiv_article_information",
                "args": {
                    "query": "framework effect in behavioral finance"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PolygonFinance.get_ticker_news",
                "args": {
                    "ticker": "AAPL"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CompanyFinance.get_financial_statements",
                "args": {
                    "company": "Apple Inc.",
                    "period": "last year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BehavioralFinance.analyze_data_for_framing_effect",
                "args": {
                    "financial_data": "Apple Inc. financial statements"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InvestmentStrategy.provide_strategies",
                "args": {
                    "analysis_results": "Framing effect analysis results"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['CompanyFinance.get_financial_statements', {'name': 'CompanyFinance.get_financial_statements', 'description': 'Retrieve the financial statements of a company for a specified period.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'The name of the company.'}, {'name': 'period', 'type': 'STRING', 'description': 'The period for which the financial statements are required.'}], 'optional_parameters': [], 'return_data': [{'name': 'financial_statements', 'description': 'The financial statements of the company for the specified period.'}]}], ['BehavioralFinance.analyze_data_for_framing_effect', {'name': 'BehavioralFinance.analyze_data_for_framing_effect', 'description': 'Analyze financial data to identify signs of framing effect.', 'required_parameters': [{'name': 'financial_data', 'type': 'STRING', 'description': 'The financial data to be analyzed.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': 'The results of the analysis indicating the presence of framing effect.'}]}], ['InvestmentStrategy.provide_strategies', {'name': 'InvestmentStrategy.provide_strategies', 'description': 'Provide investment strategies based on the analysis results.', 'required_parameters': [{'name': 'analysis_results', 'type': 'STRING', 'description': 'The results of the analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': 'The investment strategies to avoid framing effect.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解行为金融学中的框架效应如何影响投资者决策。首先，请获取关于框架效应的最新研究报告。然后，获取某知名公司在过去一年的财务报表数据。接着，分析这些数据中是否存在框架效应的迹象。最后，基于分析结果，为我提供一些避免框架效应的投资策略。"
            }
        ]
    },
    "228": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialActivityTracker.get_current_habits",
                "RetirementPlanner.get_retirement_age",
                "SocialActivityCost.get_activity_costs",
                "GovernmentSubsidies.get_social_activity_subsidies",
                "BudgetPlanner.create_social_activity_budget"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialActivityTracker.get_current_habits",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RetirementPlanner.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SocialActivityCost.get_activity_costs",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GovernmentSubsidies.get_social_activity_subsidies",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "BudgetPlanner.create_social_activity_budget",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialActivityTracker.get_current_habits', {'name': 'SocialActivityTracker.get_current_habits', 'description': 'Retrieve the current social activity habits of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'habits', 'description': 'A list of current social activities including frequency and type'}]}], ['RetirementPlanner.get_retirement_age', {'name': 'RetirementPlanner.get_retirement_age', 'description': 'Get the estimated retirement age of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': 'The estimated retirement age'}]}], ['SocialActivityCost.get_activity_costs', {'name': 'SocialActivityCost.get_activity_costs', 'description': 'Retrieve the costs associated with various social activities.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'costs', 'description': 'A list of social activities and their associated costs'}]}], ['GovernmentSubsidies.get_social_activity_subsidies', {'name': 'GovernmentSubsidies.get_social_activity_subsidies', 'description': 'Get the subsidies available for social activities in the user's region.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'subsidies', 'description': 'A list of subsidies available for social activities'}]}], ['BudgetPlanner.create_social_activity_budget', {'name': 'BudgetPlanner.create_social_activity_budget', 'description': 'Create a budget for social activities based on the provided data.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'budget', 'description': 'A detailed budget for social activities'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估退休后的社交活动计划。首先，获取我当前的社交活动习惯和预计退休年龄。然后，获取不同社交活动的成本。接着，获取我所在地区的社交活动补贴政策。最后，提供一个基于这些数据的退休社交活动预算。"
            }
        ]
    },
    "56": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CarSalesData.get_latest_sales",
                "MonetaryPolicy.get_policy_changes",
                "CarSalesData.analyze_sales_impact",
                "CarSalesData.compare_sales_under_policies",
                "CarSalesData.predict_industry_trends"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CarSalesData.get_latest_sales",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MonetaryPolicy.get_policy_changes",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "CarSalesData.analyze_sales_impact",
                "args": {
                    "sales_data": "latest_sales",
                    "policy_changes": "policy_changes"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CarSalesData.compare_sales_under_policies",
                "args": {
                    "sales_data": "latest_sales",
                    "policy_changes": "policy_changes"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CarSalesData.predict_industry_trends",
                "args": {
                    "sales_data": "latest_sales",
                    "policy_changes": "policy_changes"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CarSalesData.get_latest_sales', {'name': 'CarSalesData.get_latest_sales', 'description': '获取最新的汽车销售数据', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'sales_data', 'description': '最新的汽车销售数据'}]}], ['MonetaryPolicy.get_policy_changes', {'name': 'MonetaryPolicy.get_policy_changes', 'description': '获取最新的货币政策调整信息', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'policy_changes', 'description': '最新的货币政策调整信息'}]}], ['CarSalesData.analyze_sales_impact', {'name': 'CarSalesData.analyze_sales_impact', 'description': '分析货币政策调整对汽车销售的即时反应', 'required_parameters': [{'name': 'sales_data', 'type': 'STRING', 'description': '最新的汽车销售数据'}, {'name': 'policy_changes', 'type': 'STRING', 'description': '最新的货币政策调整信息'}], 'optional_parameters': [], 'return_data': [{'name': 'impact_analysis', 'description': '货币政策调整对汽车销售的即时反应'}]}], ['CarSalesData.compare_sales_under_policies', {'name': 'CarSalesData.compare_sales_under_policies', 'description': '比较不同货币政策下的汽车销售变化', 'required_parameters': [{'name': 'sales_data', 'type': 'STRING', 'description': '最新的汽车销售数据'}, {'name': 'policy_changes', 'type': 'STRING', 'description': '最新的货币政策调整信息'}], 'optional_parameters': [], 'return_data': [{'name': 'sales_comparison', 'description': '不同货币政策下的汽车销售变化'}]}], ['CarSalesData.predict_industry_trends', {'name': 'CarSalesData.predict_industry_trends', 'description': '基于分析的汽车行业预测', 'required_parameters': [{'name': 'sales_data', 'type': 'STRING', 'description': '最新的汽车销售数据'}, {'name': 'policy_changes', 'type': 'STRING', 'description': '最新的货币政策调整信息'}], 'optional_parameters': [], 'return_data': [{'name': 'industry_prediction', 'description': '基于分析的汽车行业预测'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估当前的货币政策对汽车行业的影响。首先，请获取最新的汽车销售数据。然后，分析货币政策调整对汽车销售的即时反应。接下来，比较不同货币政策下的汽车销售变化。最后，请提供基于分析的汽车行业预测。"
            }
        ]
    },
    "437": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "LegalInfo.get_standard_rental_terms",
                "LegalInfo.get_regional_rental_differences",
                "LegalInfo.get_local_legal_consultation",
                "LegalInfo.get_rental_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "LegalInfo.get_standard_rental_terms",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "LegalInfo.get_regional_rental_differences",
                "args": {
                    "regions": [
                        "North America",
                        "Europe",
                        "Asia"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "LegalInfo.get_local_legal_consultation",
                "args": {
                    "city": "New York"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "LegalInfo.get_rental_advice",
                "args": {
                    "contract_terms": [
                        "lease duration",
                        "rental price",
                        "maintenance responsibilities"
                    ]
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['LegalInfo.get_standard_rental_terms', {'name': 'LegalInfo.get_standard_rental_terms', 'description': 'Get the standard terms of a rental contract.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'terms', 'description': 'the standard terms of a rental contract.'}]}], ['LegalInfo.get_regional_rental_differences', {'name': 'LegalInfo.get_regional_rental_differences', 'description': 'Get the differences in rental contracts across different regions.', 'required_parameters': [{'name': 'regions', 'type': 'LIST', 'description': 'the list of regions to compare.'}], 'optional_parameters': [], 'return_data': [{'name': 'differences', 'description': 'the differences in rental contracts across the specified regions.'}]}], ['LegalInfo.get_local_legal_consultation', {'name': 'LegalInfo.get_local_legal_consultation', 'description': 'Get legal consultation for rental contracts in a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city for which to get legal consultation.'}], 'optional_parameters': [], 'return_data': [{'name': 'consultation', 'description': 'the legal consultation for rental contracts in the specified city.'}]}], ['LegalInfo.get_rental_advice', {'name': 'LegalInfo.get_rental_advice', 'description': 'Get advice based on specific terms of a rental contract.', 'required_parameters': [{'name': 'contract_terms', 'type': 'LIST', 'description': 'the list of terms to get advice on.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'the advice based on the specified contract terms.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解租房合同的相关信息。首先，获取当前租房合同的标准条款。接着，提供不同地区的租房合同差异。然后，请获取我所在城市的租房合同法律咨询。最后，提供一些基于合同条款的租房建议。"
            }
        ]
    },
    "495": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "AIReport.get_latest_report",
                "AIReport.analyze_cases",
                "Investment.query_market_data",
                "AIAdvisor.provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "AIReport.get_latest_report",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "AIReport.analyze_cases",
                "args": {
                    "report_id": "latest"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Investment.query_market_data",
                "args": {
                    "case_ids": [
                        "success_1",
                        "failure_2"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AIAdvisor.provide_suggestions",
                "args": {
                    "analysis_data": "success_1, failure_2, investment_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['AIReport.get_latest_report', {'name': 'AIReport.get_latest_report', 'description': '获取最新的互联网人工智能发展报告。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report_id', 'description': '报告的唯一标识符。'}]}], ['AIReport.analyze_cases', {'name': 'AIReport.analyze_cases', 'description': '分析报告中提到的人工智能成功案例和失败案例。', 'required_parameters': [{'name': 'report_id', 'type': 'STRING', 'description': '报告的唯一标识符。'}], 'optional_parameters': [], 'return_data': [{'name': 'case_ids', 'description': '成功和失败案例的唯一标识符列表。'}]}], ['Investment.query_market_data', {'name': 'Investment.query_market_data', 'description': '查询当前市场上对这些人工智能的投资情况。', 'required_parameters': [{'name': 'case_ids', 'type': 'LIST', 'description': '成功和失败案例的唯一标识符列表。'}], 'optional_parameters': [], 'return_data': [{'name': 'investment_data', 'description': '投资情况的详细数据。'}]}], ['AIAdvisor.provide_suggestions', {'name': 'AIAdvisor.provide_suggestions', 'description': '基于分析和投资数据，提供人工智能发展建议。', 'required_parameters': [{'name': 'analysis_data', 'type': 'STRING', 'description': '分析和投资数据的组合字符串。'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '发展建议的详细内容。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解互联网经济的人工智能发展。首先，获取最新的互联网人工智能发展报告。接着，分析报告中提到的人工智能成功案例和失败案例。然后，查询当前市场上对这些人工智能的投资情况。最后，基于这些信息，提供一些人工智能发展建议。"
            }
        ]
    },
    "163": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialData.get_historical_prices",
                "EconomicIndicator.get_impact_analysis",
                "FinancialData.get_real_time_volume",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialData.get_historical_prices",
                "args": {
                    "ticker": "XAG",
                    "period": "5y"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomicIndicator.get_impact_analysis",
                "args": {
                    "ticker": "XAG"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialData.get_real_time_volume",
                "args": {
                    "ticker": "XAG"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "ticker": "XAG",
                    "historical_data": "FinancialData.get_historical_prices",
                    "impact_analysis": "EconomicIndicator.get_impact_analysis",
                    "real_time_volume": "FinancialData.get_real_time_volume"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialData.get_historical_prices', {'name': 'FinancialData.get_historical_prices', 'description': '获取指定股票代码的历史价格数据', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': '股票代码'}, {'name': 'period', 'type': 'STRING', 'description': '时间周期，如5y表示5年'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': '历史价格数据列表'}]}], ['EconomicIndicator.get_impact_analysis', {'name': 'EconomicIndicator.get_impact_analysis', 'description': '获取全球经济指标对指定股票价格的影响分析', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': '股票代码'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': '影响分析报告'}]}], ['FinancialData.get_real_time_volume', {'name': 'FinancialData.get_real_time_volume', 'description': '获取指定股票的实时交易量', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': '股票代码'}], 'optional_parameters': [], 'return_data': [{'name': 'volume', 'description': '实时交易量'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': '基于历史数据、影响分析和实时交易量生成投资策略', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': '股票代码'}, {'name': 'historical_data', 'type': 'STRING', 'description': '历史价格数据来源'}, {'name': 'impact_analysis', 'type': 'STRING', 'description': '影响分析数据来源'}, {'name': 'real_time_volume', 'type': 'STRING', 'description': '实时交易量数据来源'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '生成的投资策略'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想评估白银市场的投资机会。首先，请获取白银在过去五年的年度价格数据。然后，获取全球经济指标对白银价格的影响分析。接下来，获取白银的实时交易量。最后，请提供基于这些数据的投资策略。"
            }
        ]
    },
    "65": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Portfolio.get_current_portfolio",
                "MarketTrend.get_trend",
                "PortfolioOptimizer.optimize",
                "Portfolio.calculate_expected_return",
                "Portfolio.calculate_risk",
                "PortfolioAdvisor.provide_adjustment_guidance"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Portfolio.get_current_portfolio",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketTrend.get_trend",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "PortfolioOptimizer.optimize",
                "args": {
                    "current_portfolio": "Portfolio.get_current_portfolio",
                    "market_trend": "MarketTrend.get_trend"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Portfolio.calculate_expected_return",
                "args": {
                    "optimized_portfolio": "PortfolioOptimizer.optimize"
                }
            },
            {
                "id": 4,
                "prev": [
                    2
                ],
                "name": "Portfolio.calculate_risk",
                "args": {
                    "optimized_portfolio": "PortfolioOptimizer.optimize"
                }
            },
            {
                "id": 5,
                "prev": [
                    3,
                    4
                ],
                "name": "PortfolioAdvisor.provide_adjustment_guidance",
                "args": {
                    "expected_return": "Portfolio.calculate_expected_return",
                    "risk": "Portfolio.calculate_risk"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Portfolio.get_current_portfolio', {'name': 'Portfolio.get_current_portfolio', 'description': 'Retrieve the current investment portfolio and its performance.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'portfolio', 'description': 'The current investment portfolio.'}, {'name': 'performance', 'description': 'The performance of the current portfolio.'}]}], ['MarketTrend.get_trend', {'name': 'MarketTrend.get_trend', 'description': 'Get the current market trends.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'trend', 'description': 'The current market trend.'}]}], ['PortfolioOptimizer.optimize', {'name': 'PortfolioOptimizer.optimize', 'description': 'Optimize the investment portfolio based on market trends and investment goals.', 'required_parameters': [{'name': 'current_portfolio', 'type': 'STRING', 'description': 'The current investment portfolio.'}, {'name': 'market_trend', 'type': 'STRING', 'description': 'The current market trend.'}], 'optional_parameters': [], 'return_data': [{'name': 'optimized_portfolio', 'description': 'The optimized investment portfolio.'}]}], ['Portfolio.calculate_expected_return', {'name': 'Portfolio.calculate_expected_return', 'description': 'Calculate the expected return of the optimized portfolio.', 'required_parameters': [{'name': 'optimized_portfolio', 'type': 'STRING', 'description': 'The optimized investment portfolio.'}], 'optional_parameters': [], 'return_data': [{'name': 'expected_return', 'description': 'The expected return of the optimized portfolio.'}]}], ['Portfolio.calculate_risk', {'name': 'Portfolio.calculate_risk', 'description': 'Calculate the risk of the optimized portfolio.', 'required_parameters': [{'name': 'optimized_portfolio', 'type': 'STRING', 'description': 'The optimized investment portfolio.'}], 'optional_parameters': [], 'return_data': [{'name': 'risk', 'description': 'The risk of the optimized portfolio.'}]}], ['PortfolioAdvisor.provide_adjustment_guidance', {'name': 'PortfolioAdvisor.provide_adjustment_guidance', 'description': 'Provide guidance on how to adjust the portfolio based on expected return and risk.', 'required_parameters': [{'name': 'expected_return', 'type': 'STRING', 'description': 'The expected return of the optimized portfolio.'}, {'name': 'risk', 'type': 'STRING', 'description': 'The risk of the optimized portfolio.'}], 'optional_parameters': [], 'return_data': [{'name': 'adjustment_guidance', 'description': 'Guidance on how to adjust the portfolio.'}]}]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行投资组合优化。首先，请获取我当前的投资组合及其表现。然后，根据市场趋势和我的投资目标，推荐一个优化后的投资组合。接下来，计算优化后的投资组合的预期收益和风险。最后，提供一个投资组合调整的指导。"
            }
        ]
    },
    "50": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BondMarket.get_yield_data",
                "BondMarket.analyze_policy_impact",
                "BondMarket.compare_yield_changes",
                "BondMarket.predict_market",
                "Email.send"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BondMarket.get_yield_data",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BondMarket.analyze_policy_impact",
                "args": {
                    "yield_data": "latest_yield_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BondMarket.compare_yield_changes",
                "args": {
                    "policy_changes": "policy_changes_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BondMarket.predict_market",
                "args": {
                    "analysis_results": "analysis_results_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "Email.send",
                "args": {
                    "address": "analyst@example.com",
                    "title": "Bond Market Analysis Report",
                    "body": "Here is the latest analysis of the bond market based on current monetary policy. Please find the attached file for detailed insights.",
                    "attachment": "/path/to/bond_market_analysis.pdf"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BondMarket.get_yield_data', {'name': 'BondMarket.get_yield_data', 'description': 'Retrieve the latest yield data for bonds.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'yield_data', 'description': 'The latest yield data for bonds.'}]}], ['BondMarket.analyze_policy_impact', {'name': 'BondMarket.analyze_policy_impact', 'description': 'Analyze the impact of monetary policy adjustments on the bond market.', 'required_parameters': [{'name': 'yield_data', 'type': 'STRING', 'description': 'The latest yield data for bonds.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact_analysis', 'description': 'The analysis of the impact of monetary policy on the bond market.'}]}], ['BondMarket.compare_yield_changes', {'name': 'BondMarket.compare_yield_changes', 'description': 'Compare the changes in bond yields under different monetary policies.', 'required_parameters': [{'name': 'policy_changes', 'type': 'STRING', 'description': 'The data of policy changes.'}], 'optional_parameters': [], 'return_data': [{'name': 'yield_comparison', 'description': 'The comparison of bond yields under different policies.'}]}], ['BondMarket.predict_market', {'name': 'BondMarket.predict_market', 'description': 'Predict the future trends of the bond market based on the analysis.', 'required_parameters': [{'name': 'analysis_results', 'type': 'STRING', 'description': 'The results of the analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'market_prediction', 'description': 'The prediction of the bond market trends.'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想评估当前的货币政策对债券市场的影响。首先，请获取最新的债券收益率数据。然后，分析货币政策调整对债券市场的即时反应。接下来，比较不同货币政策下的债券收益率变化。最后，请提供基于分析的债券市场预测。"
            }
        ]
    },
    "474": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "IndustryDataAPI.get_manufacturing_IP_data",
                "IndustryDataAPI.get_service_IP_data",
                "CaseStudyAPI.get_entity_IP_cases",
                "ManagementAdviceAPI.get_IP_management_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "keywords": "知识产权",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_manufacturing_IP_data",
                "args": {
                    "time_range": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_service_IP_data",
                "args": {
                    "time_range": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "CaseStudyAPI.get_entity_IP_cases",
                "args": {
                    "industry": "实体经济"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ManagementAdviceAPI.get_IP_management_tips",
                "args": {
                    "industry": "实体经济"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': '获取最近一段时间内的新闻，返回新闻列表。', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': '搜索的关键词'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': '时间范围，如1 year, 6 months等'}], 'return_data': [{'name': 'news_list', 'description': '新闻列表，每条新闻包含标题和摘要'}]}], ['IndustryDataAPI.get_manufacturing_IP_data', {'name': 'IndustryDataAPI.get_manufacturing_IP_data', 'description': '获取制造业的知识产权数据。', 'required_parameters': [], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': '时间范围，如1 year, 6 months等'}], 'return_data': [{'name': 'IP_data', 'description': '知识产权数据，包含专利数量、商标数量等'}]}], ['IndustryDataAPI.get_service_IP_data', {'name': 'IndustryDataAPI.get_service_IP_data', 'description': '获取服务业的知识产权数据。', 'required_parameters': [], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': '时间范围，如1 year, 6 months等'}], 'return_data': [{'name': 'IP_data', 'description': '知识产权数据，包含专利数量、商标数量等'}]}], ['CaseStudyAPI.get_entity_IP_cases', {'name': 'CaseStudyAPI.get_entity_IP_cases', 'description': '获取知名实体企业的知识产权案例。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '行业名称'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '知识产权案例列表，每个案例包含企业名称、案例摘要和知识产权策略'}]}], ['ManagementAdviceAPI.get_IP_management_tips', {'name': 'ManagementAdviceAPI.get_IP_management_tips', 'description': '获取关于如何在实体经济中进行知识产权管理的建议。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '行业名称'}], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': '知识产权管理建议列表'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的知识产权情况。首先，获取最近一年的知识产权新闻。接着，提供制造业和服务业的知识产权数据。然后，请获取一些知名实体企业的知识产权案例，并分析其知识产权策略。最后，提供一些关于如何在实体经济中进行知识产权管理的建议。"
            }
        ]
    },
    "383": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TaskRabbit.get_user_growth_data",
                "MarketAnalysis.analyze_social_service_market",
                "Survey.get_provider_satisfaction_data",
                "Recommendation.generate_market_development_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaskRabbit.get_user_growth_data",
                "args": {
                    "platform": "TaskRabbit"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketAnalysis.analyze_social_service_market",
                "args": {
                    "data": "TaskRabbit.get_user_growth_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Survey.get_provider_satisfaction_data",
                "args": {
                    "platform": "TaskRabbit"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Recommendation.generate_market_development_suggestions",
                "args": {
                    "data": "Survey.get_provider_satisfaction_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TaskRabbit.get_user_growth_data', {'name': 'TaskRabbit.get_user_growth_data', 'description': 'Get user growth data from TaskRabbit platform', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}],\n['MarketAnalysis.analyze_social_service_market', {'name': 'MarketAnalysis.analyze_social_service_market', 'description': 'Analyze changes in the social service market based on provided data', 'required_parameters': [{'name': 'data', 'description': 'data to analyze', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'changes in the social service market'}]}],\n['Survey.get_provider_satisfaction_data', {'name': 'Survey.get_provider_satisfaction_data', 'description': 'Get satisfaction survey data from service providers on a specific platform', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'satisfaction survey data'}]}],\n['Recommendation.generate_market_development_suggestions', {'name': 'Recommendation.generate_market_development_suggestions', 'description': 'Generate suggestions for market development based on provided data', 'required_parameters': [{'name': 'data', 'description': 'data to analyze', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'market development suggestions'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对社会服务的影响。首先，获取共享经济平台（如TaskRabbit和Handy）的用户增长数据。接着，分析社会服务市场的变化情况。然后，获取服务提供者对共享服务的满意度调查数据。最后，基于这些数据，提供一些关于社会服务市场发展的建议。"
            }
        ]
    },
    "379": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "UberEats.get_user_growth_data",
                "MarketAnalysis.analyze_restaurant_market",
                "ConsumerSurvey.get_satisfaction_data",
                "MarketRecommendation.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "UberEats.get_user_growth_data",
                "args": {
                    "time_period": "2020-2023"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketAnalysis.analyze_restaurant_market",
                "args": {
                    "data_source": "UberEats.get_user_growth_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ConsumerSurvey.get_satisfaction_data",
                "args": {
                    "platform": "UberEats"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketRecommendation.provide_recommendations",
                "args": {
                    "analysis_data": "MarketAnalysis.analyze_restaurant_market",
                    "satisfaction_data": "ConsumerSurvey.get_satisfaction_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['UberEats.get_user_growth_data', {'name': 'UberEats.get_user_growth_data', 'description': 'Get user growth data for UberEats over a specified time period', 'required_parameters': [{'name': 'time_period', 'description': 'time period for data retrieval', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over the specified period'}]}],\n['MarketAnalysis.analyze_restaurant_market', {'name': 'MarketAnalysis.analyze_restaurant_market', 'description': 'Analyze the changes in the restaurant market based on provided data', 'required_parameters': [{'name': 'data_source', 'description': 'source of data for analysis', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'changes in the restaurant market'}]}],\n['ConsumerSurvey.get_satisfaction_data', {'name': 'ConsumerSurvey.get_satisfaction_data', 'description': 'Get consumer satisfaction data for a specified platform', 'required_parameters': [{'name': 'platform', 'description': 'platform for which to retrieve satisfaction data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_scores', 'description': 'consumer satisfaction scores'}]}],\n['MarketRecommendation.provide_recommendations', {'name': 'MarketRecommendation.provide_recommendations', 'description': 'Provide recommendations for the restaurant market based on analysis and satisfaction data', 'required_parameters': [{'name': 'analysis_data', 'description': 'data source for market analysis', 'type': 'STRING'}, {'name': 'satisfaction_data', 'description': 'data source for consumer satisfaction', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'market development recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对餐饮行业的影响。首先，获取共享经济平台（如UberEats和DoorDash）的用户增长数据。接着，分析餐饮市场的变化情况。然后，获取消费者对共享餐饮的满意度调查数据。最后，基于这些数据，提供一些关于餐饮市场发展的建议。"
            }
        ]
    },
    "283": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_ticker_news",
                "ArxivSearch.get_arxiv_article_information",
                "MarketData.get_industry_performance",
                "MarketData.analyze_data"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ArxivSearch.get_arxiv_article_information",
                "args": {
                    "query": "representativeness heuristic in behavioral finance"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketData.get_industry_performance",
                "args": {
                    "industry": "technology",
                    "period": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketData.analyze_data",
                "args": {
                    "data": "market_performance_data",
                    "analysis_type": "representativeness_heuristic"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['MarketData.get_industry_performance', {'name': 'MarketData.get_industry_performance', 'description': 'Retrieve the market performance data for a specific industry over a specified period.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'The name of the industry.'}, {'name': 'period', 'type': 'STRING', 'description': 'The period for which to retrieve data, e.g., 1 year, 6 months.'}], 'optional_parameters': [], 'return_data': [{'name': 'performance_data', 'description': 'A list of market performance data including dates and corresponding values.'}]}], ['MarketData.analyze_data', {'name': 'MarketData.analyze_data', 'description': 'Analyze the provided market data for specific patterns or heuristics.', 'required_parameters': [{'name': 'data', 'type': 'STRING', 'description': 'The market performance data to analyze.'}, {'name': 'analysis_type', 'type': 'STRING', 'description': 'The type of analysis to perform, e.g., representativeness_heuristic.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': 'The results of the analysis, including any detected patterns or heuristics.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究行为金融学中的代表性偏差如何影响市场动态。首先，请获取关于代表性偏差的最新学术论文。然后，获取某热门行业在过去一年的市场表现数据。接着，分析这些数据中是否存在代表性偏差的迹象。最后，基于分析结果，为我提供一些减少代表性偏差的投资建议。"
            }
        ]
    },
    "518": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinanceAPI.get_funding_methods",
                "FinanceAPI.get_successful_cases",
                "FinanceAPI.get_popular_tools",
                "FinanceAPI.get_strategies"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinanceAPI.get_funding_methods",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinanceAPI.get_successful_cases",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinanceAPI.get_popular_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinanceAPI.get_strategies",
                "args": {
                    "company_size": "medium",
                    "industry": "technology"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinanceAPI.get_funding_methods', {'name': 'FinanceAPI.get_funding_methods', 'description': '获取企业融资的主要方式和流程。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'methods', 'description': '融资方式列表'}]}], ['FinanceAPI.get_successful_cases', {'name': 'FinanceAPI.get_successful_cases', 'description': '获取一些成功融资的案例。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '成功融资案例列表'}]}], ['FinanceAPI.get_popular_tools', {'name': 'FinanceAPI.get_popular_tools', 'description': '获取当前市场上流行的融资工具。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': '流行融资工具列表'}]}], ['FinanceAPI.get_strategies', {'name': 'FinanceAPI.get_strategies', 'description': '基于企业的规模和行业，提供一些融资策略建议。', 'required_parameters': [{'name': 'company_size', 'type': 'STRING', 'description': '企业规模'}, {'name': 'industry', 'type': 'STRING', 'description': '行业'}], 'optional_parameters': [], 'return_data': [{'name': 'strategies', 'description': '融资策略建议列表'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解企业融资的基本知识。首先，获取企业融资的主要方式和流程。然后，获取一些成功融资的案例。接着，获取当前市场上流行的融资工具。最后，基于企业的规模和行业，提供一些融资策略建议。"
            }
        ]
    },
    "138": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CreditScoreResearch.get_research_report",
                "CreditScoreResearch.get_success_cases",
                "CreditScoreTools.get_practical_tools",
                "CreditScoreImprovement.get_improvement_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CreditScoreResearch.get_research_report",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CreditScoreResearch.get_success_cases",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CreditScoreTools.get_practical_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CreditScoreImprovement.get_improvement_tips",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CreditScoreResearch.get_research_report', {'name': 'CreditScoreResearch.get_research_report', 'description': '获取关于信用评分的研究报告', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '研究报告的详细内容'}]}], ['CreditScoreResearch.get_success_cases', {'name': 'CreditScoreResearch.get_success_cases', 'description': '获取通过金融教育成功提高信用评分的案例', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '成功案例的详细内容'}]}], ['CreditScoreTools.get_practical_tools', {'name': 'CreditScoreTools.get_practical_tools', 'description': '获取信用评分的实用工具', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': '实用工具的详细内容'}]}], ['CreditScoreImprovement.get_improvement_tips', {'name': 'CreditScoreImprovement.get_improvement_tips', 'description': '基于研究报告、成功案例和实用工具，提供提高信用评分的建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': '提高信用评分的建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对信用评分的影响。首先，请获取关于信用评分的研究报告。然后，获取一些通过金融教育成功提高信用评分的案例。接着，获取一些信用评分的实用工具。最后，基于这些信息，为我提供一些提高信用评分的建议。"
            }
        ]
    },
    "371": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "MarketResearch.get_user_growth_data",
                "MarketResearch.analyze_market_changes",
                "Survey.get_patient_satisfaction_data",
                "MarketResearch.provide_market_development_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketResearch.get_user_growth_data",
                "args": {
                    "platform": "Doctor on Demand"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketResearch.get_user_growth_data",
                "args": {
                    "platform": "Teladoc"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketResearch.analyze_market_changes",
                "args": {
                    "platforms": [
                        "Doctor on Demand",
                        "Teladoc"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Survey.get_patient_satisfaction_data",
                "args": {
                    "platforms": [
                        "Doctor on Demand",
                        "Teladoc"
                    ]
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MarketResearch.provide_market_development_suggestions",
                "args": {
                    "data": [
                        "user_growth_data",
                        "market_changes_data",
                        "patient_satisfaction_data"
                    ]
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}],\n['MarketResearch.get_user_growth_data', {'name': 'MarketResearch.get_user_growth_data', 'description': 'Get user growth data for a specific platform', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}],\n['MarketResearch.analyze_market_changes', {'name': 'MarketResearch.analyze_market_changes', 'description': 'Analyze market changes based on provided data', 'required_parameters': [{'name': 'platforms', 'description': 'list of platforms to analyze', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'analysis of market changes'}]}],\n['Survey.get_patient_satisfaction_data', {'name': 'Survey.get_patient_satisfaction_data', 'description': 'Get patient satisfaction data for specific platforms', 'required_parameters': [{'name': 'platforms', 'description': 'list of platforms to analyze', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'patient satisfaction data'}]}],\n['MarketResearch.provide_market_development_suggestions', {'name': 'MarketResearch.provide_market_development_suggestions', 'description': 'Provide market development suggestions based on provided data', 'required_parameters': [{'name': 'data', 'description': 'list of data types to analyze', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'market development suggestions'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对医疗健康的影响。首先，获取共享经济平台（如Doctor on Demand和Teladoc）的用户增长数据。接着，分析医疗健康市场的变化情况。然后，获取患者对在线医疗的满意度调查数据。最后，基于这些数据，提供一些关于医疗健康市场发展的建议。"
            }
        ]
    },
    "66": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CreditCard.list_offers",
                "CreditCard.recommend",
                "CreditCard.calculate_savings",
                "CreditCard.apply_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CreditCard.list_offers",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CreditCard.recommend",
                "args": {
                    "consumption_habits": "frequent_traveler"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CreditCard.calculate_savings",
                "args": {
                    "card_id": 12345,
                    "annual_spending": 20000
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CreditCard.apply_link",
                "args": {
                    "card_id": 12345
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CreditCard.list_offers', {'name': 'CreditCard.list_offers', 'description': 'List all current credit card offers.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'offers', 'description': 'A list of current credit card offers.'}]}], ['CreditCard.recommend', {'name': 'CreditCard.recommend', 'description': 'Recommend the best credit card based on user's consumption habits.', 'required_parameters': [{'name': 'consumption_habits', 'type': 'STRING', 'description': 'The user's consumption habits.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommended_card', 'description': 'The recommended credit card.'}]}], ['CreditCard.calculate_savings', {'name': 'CreditCard.calculate_savings', 'description': 'Calculate the annual savings if the user uses the recommended credit card.', 'required_parameters': [{'name': 'card_id', 'type': 'NUMBER', 'description': 'The ID of the recommended credit card.'}, {'name': 'annual_spending', 'type': 'NUMBER', 'description': 'The user's annual spending.'}], 'optional_parameters': [], 'return_data': [{'name': 'annual_savings', 'description': 'The annual savings.'}]}], ['CreditCard.apply_link', {'name': 'CreditCard.apply_link', 'description': 'Provide a link to apply for the recommended credit card.', 'required_parameters': [{'name': 'card_id', 'type': 'NUMBER', 'description': 'The ID of the recommended credit card.'}], 'optional_parameters': [], 'return_data': [{'name': 'apply_link', 'description': 'The link to apply for the credit card.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解信用卡的优惠活动。首先，请列出所有信用卡的当前优惠活动。然后，根据我的消费习惯，推荐最适合我的信用卡。接下来，计算如果我使用推荐的信用卡，每年可以节省的费用。最后，提供一个信用卡申请的链接。"
            }
        ]
    },
    "488": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "UserBehaviorReport.get_latest_report",
                "UserBehaviorReport.analyze_trends",
                "MarketReaction.query_current_reactions",
                "UserBehaviorAnalysis.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "UserBehaviorReport.get_latest_report",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "UserBehaviorReport.analyze_trends",
                "args": {
                    "report_data": "latest_report"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MarketReaction.query_current_reactions",
                "args": {
                    "trends_data": "analyzed_trends"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "UserBehaviorAnalysis.provide_recommendations",
                "args": {
                    "market_reactions": "current_reactions"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['UserBehaviorReport.get_latest_report', {'name': 'UserBehaviorReport.get_latest_report', 'description': '获取最新的互联网用户行为报告。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report_data', 'description': '最新的互联网用户行为报告数据。'}]}], ['UserBehaviorReport.analyze_trends', {'name': 'UserBehaviorReport.analyze_trends', 'description': '分析报告中提到的用户行为变化和趋势。', 'required_parameters': [{'name': 'report_data', 'type': 'STRING', 'description': '最新的互联网用户行为报告数据。'}], 'optional_parameters': [], 'return_data': [{'name': 'trends_data', 'description': '分析后的用户行为变化和趋势数据。'}]}], ['MarketReaction.query_current_reactions', {'name': 'MarketReaction.query_current_reactions', 'description': '查询当前市场上对这些用户行为的反应情况。', 'required_parameters': [{'name': 'trends_data', 'type': 'STRING', 'description': '分析后的用户行为变化和趋势数据。'}], 'optional_parameters': [], 'return_data': [{'name': 'market_reactions', 'description': '当前市场上对用户行为的反应情况数据。'}]}], ['UserBehaviorAnalysis.provide_recommendations', {'name': 'UserBehaviorAnalysis.provide_recommendations', 'description': '基于市场反应提供用户行为分析建议。', 'required_parameters': [{'name': 'market_reactions', 'type': 'STRING', 'description': '当前市场上对用户行为的反应情况数据。'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': '基于市场反应的用户行为分析建议。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解互联网经济的用户行为。首先，获取最新的互联网用户行为报告。接着，分析报告中提到的用户行为变化和趋势。然后，查询当前市场上对这些用户行为的反应情况。最后，基于这些信息，提供一些用户行为分析建议。"
            }
        ]
    },
    "242": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CommunityService.get_current_service_habits",
                "CommunityService.get_retirement_age",
                "CommunityService.get_service_cost_and_return",
                "CommunityService.get_local_subsidy_policy",
                "CommunityService.generate_service_plan"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CommunityService.get_current_service_habits",
                "args": {}
            },
            {
                "id": 1,
                "prev": [],
                "name": "CommunityService.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "CommunityService.get_service_cost_and_return",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CommunityService.get_local_subsidy_policy",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CommunityService.generate_service_plan",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CommunityService.get_current_service_habits', {'name': 'CommunityService.get_current_service_habits', 'description': '获取用户当前的社区服务习惯', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'service_habits', 'description': '用户当前的社区服务习惯'}]}], ['CommunityService.get_retirement_age', {'name': 'CommunityService.get_retirement_age', 'description': '获取用户的预计退休年龄', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirement_age', 'description': '用户的预计退休年龄'}]}], ['CommunityService.get_service_cost_and_return', {'name': 'CommunityService.get_service_cost_and_return', 'description': '获取不同社区服务的成本和回报率', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cost_and_return', 'description': '不同社区服务的成本和回报率'}]}], ['CommunityService.get_local_subsidy_policy', {'name': 'CommunityService.get_local_subsidy_policy', 'description': '获取用户所在地区的社区服务补贴政策', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'subsidy_policy', 'description': '用户所在地区的社区服务补贴政策'}]}], ['CommunityService.generate_service_plan', {'name': 'CommunityService.generate_service_plan', 'description': '基于获取的数据生成退休社区服务建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'service_plan', 'description': '基于数据的退休社区服务建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解退休后的社区服务计划。首先，获取我当前的社区服务习惯和预计退休年龄。然后，获取不同社区服务的成本和回报率。接着，获取我所在地区的社区服务补贴政策。最后，提供一个基于这些数据的退休社区服务建议。"
            }
        ]
    },
    "376": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Flexe.get_user_growth_data",
                "ShipBob.get_user_growth_data",
                "LogisticsMarket.analyze_market_changes",
                "LogisticsCompany.get_satisfaction_survey_data",
                "FinishAction"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Flexe.get_user_growth_data",
                "args": {}
            },
            {
                "id": 1,
                "prev": [],
                "name": "ShipBob.get_user_growth_data",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "LogisticsMarket.analyze_market_changes",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "LogisticsCompany.get_satisfaction_survey_data",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Flexe.get_user_growth_data', {'name': 'Flexe.get_user_growth_data', 'description': 'Get user growth data from Flexe platform', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}],\n['ShipBob.get_user_growth_data', {'name': 'ShipBob.get_user_growth_data', 'description': 'Get user growth data from ShipBob platform', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}],\n['LogisticsMarket.analyze_market_changes', {'name': 'LogisticsMarket.analyze_market_changes', 'description': 'Analyze changes in the logistics market', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'changes in the logistics market'}]}],\n['LogisticsCompany.get_satisfaction_survey_data', {'name': 'LogisticsCompany.get_satisfaction_survey_data', 'description': 'Get satisfaction survey data from logistics companies', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'satisfaction survey data'}]}],\n['FinishAction', {'name': 'FinishAction', 'description': 'Finish the action sequence', 'required_parameters': [], 'optional_parameters': [], 'return_data': []}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对物流行业的影响。首先，获取共享经济平台（如Flexe和ShipBob）的用户增长数据。接着，分析物流市场的变化情况。然后，获取物流公司对共享物流的满意度调查数据。最后，基于这些数据，提供一些关于物流市场发展的建议。"
            }
        ]
    },
    "153": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RetirementResearch.get_research_report",
                "FinancialEducation.get_success_cases",
                "RetirementTools.get_practical_tools",
                "FinancialAdvisor.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RetirementResearch.get_research_report",
                "args": {
                    "topic": "retirement income management"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialEducation.get_success_cases",
                "args": {
                    "topic": "retirement income management"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RetirementTools.get_practical_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialAdvisor.provide_recommendations",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RetirementResearch.get_research_report', {'name': 'RetirementResearch.get_research_report', 'description': 'get the most recent research reports relating to a specific topic', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research report'}], 'optional_parameters': [], 'return_data': [{'name': 'results', 'description': 'A list of research reports including title, summary, and author'}]}], ['FinancialEducation.get_success_cases', {'name': 'FinancialEducation.get_success_cases', 'description': 'This function retrieves successful cases of financial education applied to a specific topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the financial education'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of successful cases including title, summary, and outcomes'}]}], ['RetirementTools.get_practical_tools', {'name': 'RetirementTools.get_practical_tools', 'description': 'This function retrieves practical tools for retirement income management.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': 'A list of practical tools including name, description, and usage'}]}], ['FinancialAdvisor.provide_recommendations', {'name': 'FinancialAdvisor.provide_recommendations', 'description': 'This function provides recommendations based on the gathered information.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'A list of recommendations including title, summary, and details'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对退休收入管理的影响。首先，请获取关于退休收入管理的研究报告。然后，获取一些通过金融教育成功进行退休收入管理的案例。接着，获取一些退休收入管理的实用工具。最后，基于这些信息，为我提供一些退休收入管理的建议。"
            }
        ]
    },
    "380": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Gigster.get_user_growth_data",
                "TaskRabbit.get_user_growth_data",
                "SportsMarket.analyze_market_changes",
                "AthleteSurvey.get_satisfaction_data",
                "MarketDevelopment.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Gigster.get_user_growth_data",
                "args": {
                    "time_period": "2020-2023"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaskRabbit.get_user_growth_data",
                "args": {
                    "time_period": "2020-2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "SportsMarket.analyze_market_changes",
                "args": {
                    "data_sources": [
                        "Gigster",
                        "TaskRabbit"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AthleteSurvey.get_satisfaction_data",
                "args": {
                    "survey_period": "2023"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MarketDevelopment.provide_recommendations",
                "args": {
                    "analysis_data": [
                        "user_growth",
                        "market_changes",
                        "satisfaction_data"
                    ]
                }
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Gigster.get_user_growth_data', {'name': 'Gigster.get_user_growth_data', 'description': 'Get user growth data from Gigster platform', 'required_parameters': [{'name': 'time_period', 'description': 'time period for data retrieval', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over the specified period'}]}],\n['TaskRabbit.get_user_growth_data', {'name': 'TaskRabbit.get_user_growth_data', 'description': 'Get user growth data from TaskRabbit platform', 'required_parameters': [{'name': 'time_period', 'description': 'time period for data retrieval', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over the specified period'}]}],\n['SportsMarket.analyze_market_changes', {'name': 'SportsMarket.analyze_market_changes', 'description': 'Analyze changes in the sports market based on provided data sources', 'required_parameters': [{'name': 'data_sources', 'description': 'list of data sources to analyze', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'analysis of market changes based on data sources'}]}],\n['AthleteSurvey.get_satisfaction_data', {'name': 'AthleteSurvey.get_satisfaction_data', 'description': 'Get satisfaction survey data from athletes', 'required_parameters': [{'name': 'survey_period', 'description': 'period of the survey', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'satisfaction data from athletes'}]}],\n['MarketDevelopment.provide_recommendations', {'name': 'MarketDevelopment.provide_recommendations', 'description': 'Provide recommendations for market development based on analysis data', 'required_parameters': [{'name': 'analysis_data', 'description': 'list of data to base recommendations on', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'recommendations for market development'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对体育行业的影响。首先，获取共享经济平台（如Gigster和TaskRabbit）的用户增长数据。接着，分析体育市场的变化情况。然后，获取运动员对共享体育的满意度调查数据。最后，基于这些数据，提供一些关于体育市场发展的建议。"
            }
        ]
    },
    "475": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "IndustryDataAPI.get_CRM_data",
                "CaseStudyAPI.get_CRM_cases",
                "CRMAdviceAPI.get_management_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "topic": "customer relationship management",
                    "period": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_CRM_data",
                "args": {
                    "industry": "manufacturing",
                    "data_type": "CRM"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_CRM_data",
                "args": {
                    "industry": "service",
                    "data_type": "CRM"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "CaseStudyAPI.get_CRM_cases",
                "args": {
                    "industry": "real economy",
                    "case_type": "CRM"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "CRMAdviceAPI.get_management_tips",
                "args": {
                    "industry": "real economy",
                    "topic": "CRM"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': 'Get recent news articles on a specific topic within a specified period.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'the topic of the news'}], 'optional_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'the time period for the news, e.g., 1 year'}]}], ['IndustryDataAPI.get_CRM_data', {'name': 'IndustryDataAPI.get_CRM_data', 'description': 'Get CRM data for a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry name'}], 'optional_parameters': [{'name': 'data_type', 'type': 'STRING', 'description': 'the type of data, e.g., CRM'}]}], ['CaseStudyAPI.get_CRM_cases', {'name': 'CaseStudyAPI.get_CRM_cases', 'description': 'Get CRM case studies for a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry name'}], 'optional_parameters': [{'name': 'case_type', 'type': 'STRING', 'description': 'the type of case study, e.g., CRM'}]}], ['CRMAdviceAPI.get_management_tips', {'name': 'CRMAdviceAPI.get_management_tips', 'description': 'Get management tips for CRM in a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry name'}], 'optional_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'the topic of advice, e.g., CRM'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的客户关系管理情况。首先，获取最近一年的客户关系管理新闻。接着，提供制造业和服务业的客户关系管理数据。然后，请获取一些知名实体企业的客户关系管理案例，并分析其关系管理策略。最后，提供一些关于如何在实体经济中进行客户关系管理的建议。"
            }
        ]
    },
    "520": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateFinance.get_basic_concepts",
                "RealEstateFinance.get_common_methods",
                "RealEstateFinance.get_success_cases",
                "RealEstateFinance.get_current_trends",
                "RealEstateFinance.provide_personalized_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateFinance.get_basic_concepts",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateFinance.get_common_methods",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateFinance.get_success_cases",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RealEstateFinance.get_current_trends",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RealEstateFinance.provide_personalized_advice",
                "args": {
                    "financial_status": "your_financial_status"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateFinance.get_basic_concepts', {'name': 'RealEstateFinance.get_basic_concepts', 'description': '获取房地产融资的基本概念。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'concepts', 'description': '房地产融资的基本概念列表'}]}], ['RealEstateFinance.get_common_methods', {'name': 'RealEstateFinance.get_common_methods', 'description': '获取房地产融资的常见方式。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'methods', 'description': '房地产融资的常见方式列表'}]}], ['RealEstateFinance.get_success_cases', {'name': 'RealEstateFinance.get_success_cases', 'description': '获取房地产融资的成功案例。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '房地产融资的成功案例列表'}]}], ['RealEstateFinance.get_current_trends', {'name': 'RealEstateFinance.get_current_trends', 'description': '获取当前房地产市场的融资趋势。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': '当前房地产市场的融资趋势列表'}]}], ['RealEstateFinance.provide_personalized_advice', {'name': 'RealEstateFinance.provide_personalized_advice', 'description': '基于用户的财务状况，提供房地产融资的建议。', 'required_parameters': [{'name': 'financial_status', 'type': 'STRING', 'description': '用户的财务状况描述'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': '基于财务状况的房地产融资建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解房地产融资的相关知识。首先，获取房地产融资的基本概念和常见方式。然后，获取一些房地产融资的成功案例。接着，获取当前房地产市场的融资趋势。最后，基于我的财务状况，提供一些房地产融资的建议。"
            }
        ]
    },
    "89": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TechInvestment.get_available_projects",
                "TechInvestment.recommend_project",
                "TechInvestment.calculate_returns",
                "TechInvestment.get_consultation_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TechInvestment.get_available_projects",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TechInvestment.recommend_project",
                "args": {
                    "budget": 500000,
                    "risk_preference": "moderate"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TechInvestment.calculate_returns",
                "args": {
                    "projectId": 12345
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TechInvestment.get_consultation_link",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TechInvestment.get_available_projects', {'name': 'TechInvestment.get_available_projects', 'description': 'Retrieve a list of currently available tech investment projects.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'projects', 'description': 'A list of available tech projects, each containing id, name, and description.'}]}], ['TechInvestment.recommend_project', {'name': 'TechInvestment.recommend_project', 'description': 'Recommend a tech investment project based on the user's budget and risk preference.', 'required_parameters': [{'name': 'budget', 'type': 'NUMBER', 'description': 'The user's investment budget.'}, {'name': 'risk_preference', 'type': 'STRING', 'description': 'The user's risk preference (e.g., low, moderate, high).'}], 'optional_parameters': [], 'return_data': [{'name': 'recommended_project', 'description': 'The recommended tech project, containing id, name, and description.'}]}], ['TechInvestment.calculate_returns', {'name': 'TechInvestment.calculate_returns', 'description': 'Calculate the potential returns and risks of investing in a specific tech project.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the tech project.'}], 'optional_parameters': [], 'return_data': [{'name': 'returns', 'description': 'The potential returns of the investment.'}, {'name': 'risks', 'description': 'The potential risks of the investment.'}]}], ['TechInvestment.get_consultation_link', {'name': 'TechInvestment.get_consultation_link', 'description': 'Get a link to a tech investment consultation service.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'link', 'description': 'The link to the tech investment consultation service.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行科技投资。首先，请获取当前可用的科技项目信息。然后，根据我的投资预算和风险偏好，推荐一个科技投资项目。接下来，计算如果我投资推荐的科技项目，可能的收益和风险。最后，提供一个科技投资咨询的链接。"
            }
        ]
    },
    "481": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.search_news",
                "IndustryDataAPI.get_customer_experience",
                "CaseStudyAPI.get_entity_case",
                "StrategyAPI.analyze_experience_strategy",
                "RecommendationAPI.get_improvement_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.search_news",
                "args": {
                    "query": "customer experience",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_customer_experience",
                "args": {
                    "industry": "Manufacturing"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_customer_experience",
                "args": {
                    "industry": "Service"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "CaseStudyAPI.get_entity_case",
                "args": {
                    "entity_name": "知名实体企业"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "StrategyAPI.analyze_experience_strategy",
                "args": {
                    "case_study": "知名实体企业的客户体验案例"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "RecommendationAPI.get_improvement_tips",
                "args": {
                    "industry": "实体经济"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.search_news', {'name': 'NewsAPI.search_news', 'description': 'Search for news articles based on a query and time range.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the search query'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the news search, e.g., 1 year'}]}], ['IndustryDataAPI.get_customer_experience', {'name': 'IndustryDataAPI.get_customer_experience', 'description': 'Get customer experience data for a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry name'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'the customer experience data'}]}], ['CaseStudyAPI.get_entity_case', {'name': 'CaseStudyAPI.get_entity_case', 'description': 'Get customer experience case studies for a specific entity.', 'required_parameters': [{'name': 'entity_name', 'type': 'STRING', 'description': 'the entity name'}], 'optional_parameters': [], 'return_data': [{'name': 'case_study', 'description': 'the customer experience case study'}]}], ['StrategyAPI.analyze_experience_strategy', {'name': 'StrategyAPI.analyze_experience_strategy', 'description': 'Analyze the customer experience strategy based on a case study.', 'required_parameters': [{'name': 'case_study', 'type': 'STRING', 'description': 'the case study to analyze'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'the analysis of the experience strategy'}]}], ['RecommendationAPI.get_improvement_tips', {'name': 'RecommendationAPI.get_improvement_tips', 'description': 'Get recommendations for improving customer experience in a specific industry.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry name'}], 'optional_parameters': [], 'return_data': [{'name': 'tips', 'description': 'the improvement tips'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解实体经济的客户体验情况。首先，获取最近一年的客户体验新闻。接着，提供制造业和服务业的客户体验数据。然后，请获取一些知名实体企业的客户体验案例，并分析其体验策略。最后，提供一些关于如何在实体经济中提升客户体验的建议。"
            }
        ]
    },
    "193": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinance.get_data_security_report",
                "ChinaFinance.get_company_data_security_score",
                "ChinaFinance.get_real_time_data_security_check",
                "ChinaFinance.provide_data_security_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinance.get_data_security_report",
                "args": {
                    "year": 2024
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_company_data_security_score",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_company_data_security_score",
                "args": {
                    "company": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ChinaFinance.get_real_time_data_security_check",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ChinaFinance.provide_data_security_recommendations",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinance.get_data_security_report', {'name': 'ChinaFinance.get_data_security_report', 'description': '获取中国消费金融贷款公司在指定年份的数据安全研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '数据安全研究报告的内容'}]}], ['ChinaFinance.get_company_data_security_score', {'name': 'ChinaFinance.get_company_data_security_score', 'description': '获取指定公司在数据安全方面的评分', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'score', 'description': '数据安全评分'}]}], ['ChinaFinance.get_real_time_data_security_check', {'name': 'ChinaFinance.get_real_time_data_security_check', 'description': '获取指定公司的实时数据安全检查结果', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'check_result', 'description': '实时数据安全检查结果'}]}], ['ChinaFinance.provide_data_security_recommendations', {'name': 'ChinaFinance.provide_data_security_recommendations', 'description': '基于数据安全分析，提供数据安全建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': '数据安全建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的数据安全情况。首先，请提供2024年中国消费金融贷款公司的数据安全研究报告。然后，获取蚂蚁金服与京东金融的数据安全评分进行对比分析。接着，获取蚂蚁金服的实时数据安全检查结果。最后，基于数据安全分析，提供一些数据安全建议。"
            }
        ]
    },
    "363": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "TaskRabbit.get_user_distribution",
                "Airbnb.get_user_distribution",
                "IncomeDistribution.analyze_income_distribution",
                "PublicSurvey.get_survey_data",
                "PolicyRecommendation.generate_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaskRabbit.get_user_distribution",
                "args": {
                    "platform": "TaskRabbit"
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "Airbnb.get_user_distribution",
                "args": {
                    "platform": "Airbnb"
                }
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "IncomeDistribution.analyze_income_distribution",
                "args": {
                    "platform_data": [
                        "TaskRabbit",
                        "Airbnb"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PublicSurvey.get_survey_data",
                "args": {
                    "topic": "共享经济公平性"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "PolicyRecommendation.generate_recommendations",
                "args": {
                    "data": [
                        "user_distribution",
                        "income_distribution",
                        "survey_data"
                    ]
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['TaskRabbit.get_user_distribution', {'name': 'TaskRabbit.get_user_distribution', 'description': 'Get user distribution data from TaskRabbit', 'required_parameters': [{'name': 'platform', 'description': 'platform name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_distribution', 'description': 'user distribution data'}]}], ['Airbnb.get_user_distribution', {'name': 'Airbnb.get_user_distribution', 'description': 'Get user distribution data from Airbnb', 'required_parameters': [{'name': 'platform', 'description': 'platform name', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_distribution', 'description': 'user distribution data'}]}], ['IncomeDistribution.analyze_income_distribution', {'name': 'IncomeDistribution.analyze_income_distribution', 'description': 'Analyze income distribution changes', 'required_parameters': [{'name': 'platform_data', 'description': 'list of platform data', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'income_distribution', 'description': 'income distribution changes'}]}], ['PublicSurvey.get_survey_data', {'name': 'PublicSurvey.get_survey_data', 'description': 'Get public survey data on a specific topic', 'required_parameters': [{'name': 'topic', 'description': 'survey topic', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'survey_data', 'description': 'survey data on the topic'}]}], ['PolicyRecommendation.generate_recommendations', {'name': 'PolicyRecommendation.generate_recommendations', 'description': 'Generate policy recommendations based on data', 'required_parameters': [{'name': 'data', 'description': 'list of data to analyze', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'policy recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对社会公平的影响。首先，获取共享经济平台（如TaskRabbit和Airbnb）的用户分布数据。接着，分析社会收入分配的变化情况。然后，获取公众对共享经济公平性的认知调查数据。最后，基于这些数据，提供一些关于社会公平政策优化的建议。"
            }
        ]
    },
    "450": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SocialSecurity.get_contribution_rate",
                "InvestmentPolicy.get_city_policies",
                "InvestmentAdvisor.get_personal_advice",
                "RiskAssessment.evaluate_risk",
                "InvestmentGuide.create_guide"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SocialSecurity.get_contribution_rate",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InvestmentPolicy.get_city_policies",
                "args": {
                    "city": "Beijing"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InvestmentAdvisor.get_personal_advice",
                "args": {
                    "age": 30,
                    "income": 50000,
                    "risk_tolerance": "medium"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RiskAssessment.evaluate_risk",
                "args": {
                    "investment_amount": 10000,
                    "investment_type": "stocks"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InvestmentGuide.create_guide",
                "args": {
                    "investment_plan": "balanced"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SocialSecurity.get_contribution_rate', {'name': 'SocialSecurity.get_contribution_rate', 'description': 'Get the contribution rate and base for social security and housing fund in a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'contribution_rate', 'description': 'the contribution rate for social security and housing fund.'}, {'name': 'base', 'description': 'the base amount for contribution.'}]}], ['InvestmentPolicy.get_city_policies', {'name': 'InvestmentPolicy.get_city_policies', 'description': 'Get the investment policies in a specific city.', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': 'the city name'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': 'the list of investment policies in the city.'}]}], ['InvestmentAdvisor.get_personal_advice', {'name': 'InvestmentAdvisor.get_personal_advice', 'description': 'Get personalized investment advice based on age, income, and risk tolerance.', 'required_parameters': [{'name': 'age', 'type': 'NUMBER', 'description': 'the age of the investor.'}, {'name': 'income', 'type': 'NUMBER', 'description': 'the annual income of the investor.'}, {'name': 'risk_tolerance', 'type': 'STRING', 'description': 'the risk tolerance level of the investor (low, medium, high)'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'the personalized investment advice.'}]}], ['RiskAssessment.evaluate_risk', {'name': 'RiskAssessment.evaluate_risk', 'description': 'Evaluate the risk of an investment based on the amount and type.', 'required_parameters': [{'name': 'investment_amount', 'type': 'NUMBER', 'description': 'the amount of money to be invested.'}, {'name': 'investment_type', 'type': 'STRING', 'description': 'the type of investment (stocks, bonds, real estate, etc.)'}], 'optional_parameters': [], 'return_data': [{'name': 'risk_level', 'description': 'the risk level of the investment.'}]}], ['InvestmentGuide.create_guide', {'name': 'InvestmentGuide.create_guide', 'description': 'Create an investment guide based on the investment plan.', 'required_parameters': [{'name': 'investment_plan', 'type': 'STRING', 'description': 'the type of investment plan (conservative, balanced, aggressive)'}], 'optional_parameters': [], 'return_data': [{'name': 'guide', 'description': 'the investment guide.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解社保和公积金的缴纳对个人投资的影响。首先，获取社保和公积金的缴纳比例和基数。然后，获取不同城市的投资政策。接着，获取个人投资的建议和风险评估。最后，提供一个投资建议指南，帮助我合理规划个人投资。"
            }
        ]
    },
    "69": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "RealEstateMarket.get_hot_markets",
                "RealEstateInvestment.recommend_project",
                "RealEstateInvestment.calculate_returns",
                "RealEstateInvestment.calculate_risks",
                "RealEstateInvestment.get_consultation_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "RealEstateMarket.get_hot_markets",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RealEstateInvestment.recommend_project",
                "args": {
                    "budget": 500000,
                    "risk_preference": "moderate"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RealEstateInvestment.calculate_returns",
                "args": {
                    "project_id": 12345
                }
            },
            {
                "id": 3,
                "prev": [
                    1
                ],
                "name": "RealEstateInvestment.calculate_risks",
                "args": {
                    "project_id": 12345
                }
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "RealEstateInvestment.get_consultation_link",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['RealEstateMarket.get_hot_markets', {'name': 'RealEstateMarket.get_hot_markets', 'description': 'This function retrieves the current hot real estate markets.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'markets', 'description': 'A list of hot real estate markets, each containing name and location.'}]}], ['RealEstateInvestment.recommend_project', {'name': 'RealEstateInvestment.recommend_project', 'description': 'This function recommends a real estate investment project based on the user's budget and risk preference.', 'required_parameters': [{'name': 'budget', 'type': 'NUMBER', 'description': 'The investment budget.'}, {'name': 'risk_preference', 'type': 'STRING', 'description': 'The user's risk preference (e.g., low, moderate, high).'}], 'optional_parameters': [], 'return_data': [{'name': 'project', 'description': 'The recommended real estate project, containing id, name, and location.'}]}], ['RealEstateInvestment.calculate_returns', {'name': 'RealEstateInvestment.calculate_returns', 'description': 'This function calculates the potential returns of a recommended real estate investment project.', 'required_parameters': [{'name': 'project_id', 'type': 'NUMBER', 'description': 'The ID of the recommended project.'}], 'optional_parameters': [], 'return_data': [{'name': 'returns', 'description': 'The potential returns of the project, including annual yield and total return.'}]}], ['RealEstateInvestment.calculate_risks', {'name': 'RealEstateInvestment.calculate_risks', 'description': 'This function calculates the potential risks of a recommended real estate investment project.', 'required_parameters': [{'name': 'project_id', 'type': 'NUMBER', 'description': 'The ID of the recommended project.'}], 'optional_parameters': [], 'return_data': [{'name': 'risks', 'description': 'The potential risks of the project, including market risk and liquidity risk.'}]}], ['RealEstateInvestment.get_consultation_link', {'name': 'RealEstateInvestment.get_consultation_link', 'description': 'This function provides a link to a real estate investment consultation service.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'link', 'description': 'The link to the consultation service.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行房地产投资。首先，请获取当前热门房地产市场的信息。然后，根据我的投资预算和风险偏好，推荐一个房地产投资项目。接下来，计算如果我投资推荐的房地产项目，可能的收益和风险。最后，提供一个房地产投资咨询的链接。"
            }
        ]
    },
    "74": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MarketData.get_current_price",
                "InvestmentStrategy.recommend",
                "InvestmentStrategy.calculate_return",
                "InvestmentStrategy.calculate_risk",
                "TradingPlatform.get_login_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketData.get_current_price",
                "args": {
                    "metal": "Gold"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MarketData.get_current_price",
                "args": {
                    "metal": "Silver"
                }
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "InvestmentStrategy.recommend",
                "args": {
                    "budget": 5000,
                    "risk_preference": "moderate"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentStrategy.calculate_return",
                "args": {
                    "strategy": "recommended_strategy"
                }
            },
            {
                "id": 4,
                "prev": [
                    2
                ],
                "name": "InvestmentStrategy.calculate_risk",
                "args": {
                    "strategy": "recommended_strategy"
                }
            },
            {
                "id": 5,
                "prev": [
                    3,
                    4
                ],
                "name": "TradingPlatform.get_login_link",
                "args": {}
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MarketData.get_current_price', {'name': 'MarketData.get_current_price', 'description': '获取当前贵金属的市场价格', 'required_parameters': [{'name': 'metal', 'description': '贵金属的名称，如Gold, Silver', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'price', 'description': '当前价格'}]}], ['InvestmentStrategy.recommend', {'name': 'InvestmentStrategy.recommend', 'description': '根据投资预算和风险偏好推荐贵金属投资策略', 'required_parameters': [{'name': 'budget', 'description': '投资预算', 'type': 'NUMBER'}, {'name': 'risk_preference', 'description': '风险偏好，如low, moderate, high', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '推荐的投资策略'}]}], ['InvestmentStrategy.calculate_return', {'name': 'InvestmentStrategy.calculate_return', 'description': '计算按照推荐策略进行投资的可能收益', 'required_parameters': [{'name': 'strategy', 'description': '投资策略', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'return', 'description': '可能的收益'}]}], ['InvestmentStrategy.calculate_risk', {'name': 'InvestmentStrategy.calculate_risk', 'description': '计算按照推荐策略进行投资的可能风险', 'required_parameters': [{'name': 'strategy', 'description': '投资策略', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'risk', 'description': '可能的风险'}]}], ['TradingPlatform.get_login_link', {'name': 'TradingPlatform.get_login_link', 'description': '获取贵金属交易平台的登录链接', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'link', 'description': '登录链接'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行贵金属投资。首先，请获取当前贵金属的市场价格。然后，根据我的投资预算和风险偏好，推荐一个贵金属投资策略。接下来，计算如果我按照推荐的策略进行投资，可能的收益和风险。最后，提供一个贵金属交易平台的登录链接。"
            }
        ]
    },
    "431": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsuranceMarket.get_rental_insurance_prices",
                "InsuranceMarket.compare_insurance_products",
                "InsuranceMarket.get_purchase_conditions",
                "InsuranceMarket.provide_personalized_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsuranceMarket.get_rental_insurance_prices",
                "args": {
                    "location": "New York"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceMarket.compare_insurance_products",
                "args": {
                    "location": "New York"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "InsuranceMarket.get_purchase_conditions",
                "args": {
                    "location": "New York"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InsuranceMarket.provide_personalized_advice",
                "args": {
                    "location": "New York",
                    "personal_needs": "low-cost coverage"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsuranceMarket.get_rental_insurance_prices', {'name': 'InsuranceMarket.get_rental_insurance_prices', 'description': 'Get the current market prices for rental insurance in a specified location', 'required_parameters': [{'name': 'location', 'description': 'location where the insurance is needed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': 'list of current rental insurance prices'}]}],\n['InsuranceMarket.compare_insurance_products', {'name': 'InsuranceMarket.compare_insurance_products', 'description': 'Compare rental insurance products from different companies in a specified location', 'required_parameters': [{'name': 'location', 'description': 'location where the insurance is needed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparisons', 'description': 'comparison data of different insurance products'}]}],\n['InsuranceMarket.get_purchase_conditions', {'name': 'InsuranceMarket.get_purchase_conditions', 'description': 'Get the purchase conditions for rental insurance in a specified location', 'required_parameters': [{'name': 'location', 'description': 'location where the insurance is needed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'conditions', 'description': 'list of purchase conditions for rental insurance'}]}],\n['InsuranceMarket.provide_personalized_advice', {'name': 'InsuranceMarket.provide_personalized_advice', 'description': 'Provide personalized insurance advice based on personal needs and location', 'required_parameters': [{'name': 'location', 'description': 'location where the insurance is needed', 'type': 'STRING'}, {'name': 'personal_needs', 'description': 'personal needs for insurance coverage', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'personalized insurance advice'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解租房保险的相关信息。首先，获取当前租房保险的市场价格。接着，提供不同保险公司的租房保险产品比较。然后，请获取我所在城市的租房保险购买条件。最后，提供一些基于个人需求的保险建议。"
            }
        ]
    },
    "250": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_ticker_news",
                "StockMarketAPI.get_index_data",
                "StockMarketAPI.get_stock_price",
                "InvestmentAdvisor.provide_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PolygonFinance.get_ticker_news",
                "args": {
                    "ticker": "中国人民银行"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockMarketAPI.get_index_data",
                "args": {
                    "index": "上证指数",
                    "days": 7
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockMarketAPI.get_stock_price",
                "args": {
                    "ticker": "腾讯"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvisor.provide_investment_advice",
                "args": {
                    "ticker": "腾讯",
                    "policy_news": "中国人民银行政策发布的新闻和市场反应分析",
                    "market_data": "上证指数的波动情况",
                    "stock_price": "腾讯的实时股票价格"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['StockMarketAPI.get_index_data', {'name': 'StockMarketAPI.get_index_data', 'description': 'Retrieve the historical data of a stock market index over a specified period.', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The name of the stock market index.'}, {'name': 'days', 'type': 'NUMBER', 'description': 'The number of days to retrieve data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'A list of historical data points including date and closing value.'}]}], ['StockMarketAPI.get_stock_price', {'name': 'StockMarketAPI.get_stock_price', 'description': 'Get the current stock price of a specified ticker.', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The stock ticker symbol.'}], 'optional_parameters': [], 'return_data': [{'name': 'price', 'description': 'The current stock price.'}]}], ['InvestmentAdvisor.provide_investment_advice', {'name': 'InvestmentAdvisor.provide_investment_advice', 'description': 'Provide investment advice based on recent policy changes and market data.', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'The stock ticker symbol.'}, {'name': 'policy_news', 'type': 'STRING', 'description': 'Recent policy news and market reactions.'}, {'name': 'market_data', 'type': 'STRING', 'description': 'Market data including index fluctuations.'}, {'name': 'stock_price', 'type': 'STRING', 'description': 'The current stock price.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Investment advice based on the provided data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解近期与中国人民银行政策有关的市场波动。首先，获取最近中国人民银行政策发布的新闻和市场反应分析。接着，提供过去七天内上证指数的波动情况。然后，获取腾讯的实时股票价格。最后，请基于政策变化和市场波动，提供一些针对腾讯的投资建议。"
            }
        ]
    },
    "146": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialResearch.get_asset_allocation_report",
                "FinancialEducation.get_successful_cases",
                "FinancialTools.get_practical_tools",
                "FinancialAdvisor.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialResearch.get_asset_allocation_report",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialEducation.get_successful_cases",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialTools.get_practical_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialAdvisor.provide_recommendations",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialResearch.get_asset_allocation_report', {'name': 'FinancialResearch.get_asset_allocation_report', 'description': 'Retrieve the latest research reports on asset allocation.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A detailed report on asset allocation strategies and their impact.'}]}], ['FinancialEducation.get_successful_cases', {'name': 'FinancialEducation.get_successful_cases', 'description': 'Get successful cases of asset allocation through financial education.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of successful asset allocation cases.'}]}], ['FinancialTools.get_practical_tools', {'name': 'FinancialTools.get_practical_tools', 'description': 'Retrieve practical tools for asset allocation.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': 'A list of practical tools for asset allocation.'}]}], ['FinancialAdvisor.provide_recommendations', {'name': 'FinancialAdvisor.provide_recommendations', 'description': 'Provide asset allocation recommendations based on the gathered information.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'Asset allocation recommendations.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对资产配置的影响。首先，请获取关于资产配置的研究报告。然后，获取一些通过金融教育成功进行资产配置的案例。接着，获取一些资产配置的实用工具。最后，基于这些信息，为我提供一些资产配置的建议。"
            }
        ]
    },
    "477": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.search_news",
                "IndustryAPI.get_quality_control_data",
                "CompanyAPI.get_quality_control_case",
                "QualityControlAPI.provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.search_news",
                "args": {
                    "query": "实体经济质量控制",
                    "period": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "IndustryAPI.get_quality_control_data",
                "args": {
                    "industry": "制造业",
                    "period": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "IndustryAPI.get_quality_control_data",
                "args": {
                    "industry": "服务业",
                    "period": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CompanyAPI.get_quality_control_case",
                "args": {
                    "companies": "知名实体企业"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "QualityControlAPI.provide_suggestions",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.search_news', {'name': 'NewsAPI.search_news', 'description': 'Search for news articles based on a query and a specified period.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the search query'}], 'optional_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'the time period for the search, e.g., 1 year'}]}], ['IndustryAPI.get_quality_control_data', {'name': 'IndustryAPI.get_quality_control_data', 'description': 'Get quality control data for a specific industry over a specified period.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry name'}], 'optional_parameters': [{'name': 'period', 'type': 'STRING', 'description': 'the time period for the data, e.g., 1 year'}]}], ['CompanyAPI.get_quality_control_case', {'name': 'CompanyAPI.get_quality_control_case', 'description': 'Get quality control cases from specific companies.', 'required_parameters': [{'name': 'companies', 'type': 'STRING', 'description': 'the names of the companies'}], 'optional_parameters': []}], ['QualityControlAPI.provide_suggestions', {'name': 'QualityControlAPI.provide_suggestions', 'description': 'Provide suggestions for quality control in the real economy.', 'required_parameters': [], 'optional_parameters': []}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解实体经济的质量控制情况。首先，获取最近一年的质量控制新闻。接着，提供制造业和服务业的质量控制数据。然后，请获取一些知名实体企业的质量控制案例，并分析其控制策略。最后，提供一些关于如何在实体经济中进行质量控制的建议。"
            }
        ]
    },
    "461": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "EconomyAPI.get_innovation_data",
                "CompanyAPI.get_innovation_cases",
                "InnovationAPI.get_innovation_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "topic": "实体经济创新",
                    "period": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomyAPI.get_innovation_data",
                "args": {
                    "sectors": [
                        "制造业",
                        "服务业"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CompanyAPI.get_innovation_cases",
                "args": {
                    "companies": [
                        "华为",
                        "阿里巴巴",
                        "腾讯"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InnovationAPI.get_innovation_suggestions",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': '获取指定主题和时间段的新闻。', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': '新闻主题'}], 'optional_parameters': [{'name': 'period', 'type': 'STRING', 'description': '时间段，如1年、6个月等'}], 'return_data': [{'name': 'news_list', 'description': '新闻列表，包含标题和摘要'}]}], ['EconomyAPI.get_innovation_data', {'name': 'EconomyAPI.get_innovation_data', 'description': '获取指定行业的创新投入数据。', 'required_parameters': [{'name': 'sectors', 'type': 'LIST', 'description': '行业列表，如制造业、服务业'}], 'optional_parameters': [], 'return_data': [{'name': 'innovation_data', 'description': '创新投入数据，包含行业、投入金额和时间'}]}], ['CompanyAPI.get_innovation_cases', {'name': 'CompanyAPI.get_innovation_cases', 'description': '获取指定企业的创新案例。', 'required_parameters': [{'name': 'companies', 'type': 'LIST', 'description': '企业列表'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': '创新案例列表，包含企业名称、创新项目和成果'}]}], ['InnovationAPI.get_innovation_suggestions', {'name': 'InnovationAPI.get_innovation_suggestions', 'description': '获取关于如何在实体经济中进行创新的建议。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '创新建议列表'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的创新情况。首先，获取最近一年的实体经济创新新闻。接着，提供制造业和服务业的创新投入数据。然后，请获取一些知名实体企业的创新案例，并分析其创新模式。最后，提供一些关于如何在实体经济中进行创新的建议。"
            }
        ]
    },
    "59": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CentralBank.get_latest_monetary_policy",
                "InfrastructureInvestment.get_latest_data",
                "InfrastructureInvestment.analyze_monetary_policy_impact",
                "InfrastructureInvestment.compare_investment_changes",
                "InfrastructureInvestment.predict_future_investment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InfrastructureInvestment.get_latest_data",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CentralBank.get_latest_monetary_policy",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "InfrastructureInvestment.analyze_monetary_policy_impact",
                "args": {
                    "investment_data": "latest_data",
                    "monetary_policy": "latest_policy"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InfrastructureInvestment.compare_investment_changes",
                "args": {
                    "previous_policy": "previous_policy",
                    "current_policy": "latest_policy"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "InfrastructureInvestment.predict_future_investment",
                "args": {
                    "analysis_result": "analysis_result"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CentralBank.get_latest_monetary_policy', {'name': 'CentralBank.get_latest_monetary_policy', 'description': 'Retrieve the latest monetary policy from the central bank.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'policy', 'description': 'The latest monetary policy.'}]}], ['InfrastructureInvestment.get_latest_data', {'name': 'InfrastructureInvestment.get_latest_data', 'description': 'Get the latest data on infrastructure investment.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'investment_data', 'description': 'The latest infrastructure investment data.'}]}], ['InfrastructureInvestment.analyze_monetary_policy_impact', {'name': 'InfrastructureInvestment.analyze_monetary_policy_impact', 'description': 'Analyze the impact of monetary policy adjustments on infrastructure investment.', 'required_parameters': [{'name': 'investment_data', 'type': 'STRING', 'description': 'The latest infrastructure investment data.'}, {'name': 'monetary_policy', 'type': 'STRING', 'description': 'The latest monetary policy.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'The analysis result of monetary policy impact on infrastructure investment.'}]}], ['InfrastructureInvestment.compare_investment_changes', {'name': 'InfrastructureInvestment.compare_investment_changes', 'description': 'Compare infrastructure investment changes under different monetary policies.', 'required_parameters': [{'name': 'previous_policy', 'type': 'STRING', 'description': 'The previous monetary policy.'}, {'name': 'current_policy', 'type': 'STRING', 'description': 'The current monetary policy.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_result', 'description': 'The comparison result of infrastructure investment changes under different policies.'}]}], ['InfrastructureInvestment.predict_future_investment', {'name': 'InfrastructureInvestment.predict_future_investment', 'description': 'Predict future infrastructure investment based on the analysis.', 'required_parameters': [{'name': 'analysis_result', 'type': 'STRING', 'description': 'The analysis result of monetary policy impact on infrastructure investment.'}], 'optional_parameters': [], 'return_data': [{'name': 'prediction', 'description': 'The prediction of future infrastructure investment.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解当前的货币政策对基础设施建设的影响。首先，请获取最新的基础设施建设投资数据。然后，分析货币政策调整对基础设施建设的即时反应。接下来，比较不同货币政策下的基础设施建设投资变化。最后，请提供基于分析的基础设施建设预测。"
            }
        ]
    },
    "145": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialResearch.get_risk_management_report",
                "FinancialEducation.get_successful_cases",
                "RiskManagementTools.get_tools",
                "RiskManagement.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialResearch.get_risk_management_report",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialEducation.get_successful_cases",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "RiskManagementTools.get_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RiskManagement.provide_recommendations",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialResearch.get_risk_management_report', {'name': 'FinancialResearch.get_risk_management_report', 'description': 'Retrieve the latest research reports on risk management.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A detailed report on risk management research'}]}], ['FinancialEducation.get_successful_cases', {'name': 'FinancialEducation.get_successful_cases', 'description': 'Get successful cases where financial education has been used to effectively manage risks.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of successful risk management cases using financial education'}]}], ['RiskManagementTools.get_tools', {'name': 'RiskManagementTools.get_tools', 'description': 'Retrieve a list of practical tools for risk management.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': 'A list of risk management tools'}]}], ['RiskManagement.provide_recommendations', {'name': 'RiskManagement.provide_recommendations', 'description': 'Provide recommendations based on the gathered information.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'A list of risk management recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解金融教育对风险管理的影响。首先，请获取关于风险管理的研究报告。然后，获取一些通过金融教育成功进行风险管理的案例。接着，获取一些风险管理的实用工具。最后，基于这些信息，为我提供一些风险管理的建议。"
            }
        ]
    },
    "377": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "RetailMarket.analyze_market_changes",
                "ConsumerSurvey.get_satisfaction_data",
                "RetailMarket.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "共享经济对零售行业的影响"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RetailMarket.analyze_market_changes",
                "args": {
                    "platform_data": "Rent the Runway, ThredUp"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ConsumerSurvey.get_satisfaction_data",
                "args": {
                    "survey_type": "共享零售"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "RetailMarket.provide_recommendations",
                "args": {
                    "analysis_data": "共享经济平台用户增长数据, 零售市场变化情况, 消费者满意度调查数据"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['RetailMarket.analyze_market_changes', {'name': 'RetailMarket.analyze_market_changes', 'description': 'Analyze changes in the retail market based on provided data', 'required_parameters': [{'name': 'platform_data', 'description': 'data from specific platforms', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'market_trends', 'description': 'trends observed in the retail market'}]}], ['ConsumerSurvey.get_satisfaction_data', {'name': 'ConsumerSurvey.get_satisfaction_data', 'description': 'Retrieve satisfaction data from consumer surveys', 'required_parameters': [{'name': 'survey_type', 'description': 'type of survey to retrieve data from', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_scores', 'description': 'scores indicating consumer satisfaction'}]}], ['RetailMarket.provide_recommendations', {'name': 'RetailMarket.provide_recommendations', 'description': 'Provide recommendations based on analysis data', 'required_parameters': [{'name': 'analysis_data', 'description': 'data used for analysis', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of recommendations for retail market development'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对零售行业的影响。首先，获取共享经济平台（如Rent the Runway和ThredUp）的用户增长数据。接着，分析零售市场的变化情况。然后，获取消费者对共享零售的满意度调查数据。最后，基于这些数据，提供一些关于零售市场发展的建议。"
            }
        ]
    },
    "472": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "DataAPI.get_financial_data",
                "CaseStudyAPI.get_entity_cases",
                "StrategyAPI.analyze_financial_strategy",
                "RecommendationAPI.get_financial_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "topic": "供应链金融",
                    "period": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAPI.get_financial_data",
                "args": {
                    "sector": "制造业",
                    "financial_type": "供应链金融"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAPI.get_financial_data",
                "args": {
                    "sector": "服务业",
                    "financial_type": "供应链金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CaseStudyAPI.get_entity_cases",
                "args": {
                    "entity_type": "知名实体企业",
                    "financial_type": "供应链金融"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "StrategyAPI.analyze_financial_strategy",
                "args": {
                    "case_data": "知名实体企业的供应链金融案例"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "RecommendationAPI.get_financial_recommendations",
                "args": {
                    "sector": "实体经济",
                    "financial_type": "供应链金融"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': '获取最近一段时间内某个主题的新闻。', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': '新闻主题'}], 'optional_parameters': [{'name': 'period', 'type': 'STRING', 'description': '时间段，例如1年'}]}], ['DataAPI.get_financial_data', {'name': 'DataAPI.get_financial_data', 'description': '获取某个行业或领域的金融数据。', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': '行业或领域'}], 'optional_parameters': [{'name': 'financial_type', 'type': 'STRING', 'description': '金融数据类型'}]}], ['CaseStudyAPI.get_entity_cases', {'name': 'CaseStudyAPI.get_entity_cases', 'description': '获取某个实体类型的案例研究。', 'required_parameters': [{'name': 'entity_type', 'type': 'STRING', 'description': '实体类型'}], 'optional_parameters': [{'name': 'financial_type', 'type': 'STRING', 'description': '金融类型'}]}], ['StrategyAPI.analyze_financial_strategy', {'name': 'StrategyAPI.analyze_financial_strategy', 'description': '分析某个案例的金融策略。', 'required_parameters': [{'name': 'case_data', 'type': 'STRING', 'description': '案例数据'}], 'optional_parameters': []}], ['RecommendationAPI.get_financial_recommendations', {'name': 'RecommendationAPI.get_financial_recommendations', 'description': '获取某个行业或领域的金融建议。', 'required_parameters': [{'name': 'sector', 'type': 'STRING', 'description': '行业或领域'}], 'optional_parameters': [{'name': 'financial_type', 'type': 'STRING', 'description': '金融类型'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的供应链金融情况。首先，获取最近一年的供应链金融新闻。接着，提供制造业和服务业的供应链金融数据。然后，请获取一些知名实体企业的供应链金融案例，并分析其金融策略。最后，提供一些关于如何在实体经济中进行供应链金融的建议。"
            }
        ]
    },
    "243": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "AgricultureInvestment.get_current_investment_status",
                "AgricultureInvestment.get_expected_retirement_age",
                "AgricultureInvestment.get_investment_product_returns",
                "AgricultureInvestment.get_local_tax_policies",
                "AgricultureInvestment.generate_investment_recommendation"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "AgricultureInvestment.get_current_investment_status",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "AgricultureInvestment.get_expected_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "AgricultureInvestment.get_investment_product_returns",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AgricultureInvestment.get_local_tax_policies",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "AgricultureInvestment.generate_investment_recommendation",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['AgricultureInvestment.get_current_investment_status', {'name': 'AgricultureInvestment.get_current_investment_status', 'description': 'Retrieve the current status of agricultural investments.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'investmentStatus', 'description': 'The current status of agricultural investments including types and amounts.'}]}], ['AgricultureInvestment.get_expected_retirement_age', {'name': 'AgricultureInvestment.get_expected_retirement_age', 'description': 'Get the expected retirement age of the user.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': 'The expected retirement age of the user.'}]}], ['AgricultureInvestment.get_investment_product_returns', {'name': 'AgricultureInvestment.get_investment_product_returns', 'description': 'Retrieve the returns of different agricultural investment products.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'productReturns', 'description': 'A list of agricultural investment products and their respective returns.'}]}], ['AgricultureInvestment.get_local_tax_policies', {'name': 'AgricultureInvestment.get_local_tax_policies', 'description': 'Get the tax policies related to agricultural investments in the user's region.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'taxPolicies', 'description': 'The tax policies related to agricultural investments in the user's region.'}]}], ['AgricultureInvestment.generate_investment_recommendation', {'name': 'AgricultureInvestment.generate_investment_recommendation', 'description': 'Generate a recommendation for agricultural investments based on the provided data.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendation', 'description': 'A recommendation for agricultural investments based on the provided data.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解退休后的农业投资计划。首先，获取我当前的农业投资情况和预计退休年龄。然后，获取不同农业投资产品的回报率。接着，获取我所在地区的农业投资税收政策。最后，提供一个基于这些数据的退休农业投资建议。"
            }
        ]
    },
    "338": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FacebookAnalytics.get_user_growth_data",
                "FacebookAnalytics.analyze_user_growth_trend",
                "FacebookAnalytics.predict_user_growth",
                "FacebookAnalytics.generate_user_growth_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FacebookAnalytics.get_user_growth_data",
                "args": {
                    "company": "Facebook",
                    "years": 5
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FacebookAnalytics.analyze_user_growth_trend",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FacebookAnalytics.predict_user_growth",
                "args": {
                    "model": "linear_regression",
                    "period": 1
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FacebookAnalytics.generate_user_growth_report",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FacebookAnalytics.get_user_growth_data', {'name': 'FacebookAnalytics.get_user_growth_data', 'description': 'Get user growth data for a specified company over a specified number of years', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}, {'name': 'years', 'description': 'number of years to retrieve data for', 'type': 'INTEGER'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth_data', 'description': 'data on user growth over the specified years'}]}],\n['FacebookAnalytics.analyze_user_growth_trend', {'name': 'FacebookAnalytics.analyze_user_growth_trend', 'description': 'Analyze the user growth trend based on the provided data', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'growth_trend', 'description': 'trend analysis of user growth'}]}],\n['FacebookAnalytics.predict_user_growth', {'name': 'FacebookAnalytics.predict_user_growth', 'description': 'Predict future user growth using a specified model', 'required_parameters': [{'name': 'model', 'description': 'model to use for prediction', 'type': 'STRING'}, {'name': 'period', 'description': 'period in years to predict', 'type': 'INTEGER'}], 'optional_parameters': [], 'return_data': [{'name': 'predicted_growth', 'description': 'predicted user growth for the specified period'}]}],\n['FacebookAnalytics.generate_user_growth_report', {'name': 'FacebookAnalytics.generate_user_growth_report', 'description': 'Generate a report based on the analyzed and predicted data', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'user growth potential report'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想评估Facebook公司的用户增长潜力。首先，请获取Facebook公司近五年的用户增长数据。然后，分析其用户增长趋势和用户活跃度。接下来，使用用户增长模型预测未来一年的用户增长情况。最后，提供一个基于预测的用户增长潜力报告。"
            }
        ]
    },
    "115": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "AMLCompliance.get_regulations",
                "AMLCompliance.analyze_regulations",
                "AMLCompliance.check_compliance",
                "AMLCompliance.provide_strategy_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "AMLCompliance.get_regulations",
                "args": {
                    "product_name": "High-Yield Savings Account"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "AMLCompliance.analyze_regulations",
                "args": {
                    "regulations": "AMLCompliance.get_regulations.return_data.regulations"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "AMLCompliance.check_compliance",
                "args": {
                    "product_name": "High-Yield Savings Account",
                    "regulations": "AMLCompliance.analyze_regulations.return_data.analyzed_regulations"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "AMLCompliance.provide_strategy_suggestions",
                "args": {
                    "compliance_status": "AMLCompliance.check_compliance.return_data.compliance_status"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['AMLCompliance.get_regulations', {'name': 'AMLCompliance.get_regulations', 'description': '获取特定金融产品的反洗钱法规和要求', 'required_parameters': [{'name': 'product_name', 'description': '金融产品的名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'regulations', 'description': '反洗钱法规和要求的列表'}]}], ['AMLCompliance.analyze_regulations', {'name': 'AMLCompliance.analyze_regulations', 'description': '分析反洗钱法规和要求的具体内容', 'required_parameters': [{'name': 'regulations', 'description': '反洗钱法规和要求的列表', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analyzed_regulations', 'description': '分析后的反洗钱法规和要求'}]}], ['AMLCompliance.check_compliance', {'name': 'AMLCompliance.check_compliance', 'description': '检查金融产品是否符合所有反洗钱合规条件', 'required_parameters': [{'name': 'product_name', 'description': '金融产品的名称', 'type': 'STRING'}, {'name': 'regulations', 'description': '分析后的反洗钱法规和要求', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'compliance_status', 'description': '合规状态'}]}], ['AMLCompliance.provide_strategy_suggestions', {'name': 'AMLCompliance.provide_strategy_suggestions', 'description': '基于合规状态提供反洗钱合规策略建议', 'required_parameters': [{'name': 'compliance_status', 'description': '合规状态', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy_suggestions', 'description': '反洗钱合规策略建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解某金融产品的反洗钱合规情况。首先，获取该产品的反洗钱法规和要求。然后，分析这些法规和要求的具体内容。接着，查询该产品是否符合所有反洗钱合规条件。最后，基于这些信息，提供一些反洗钱合规策略建议。"
            }
        ]
    },
    "429": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CityData.get_rental_investment_return_rate",
                "CityData.analyze_hot_area_investment_potential",
                "CityData.get_rental_vacancy_rate",
                "InvestmentAdvisor.provide_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CityData.get_rental_investment_return_rate",
                "args": {
                    "city": "New York"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CityData.analyze_hot_area_investment_potential",
                "args": {
                    "city": "New York",
                    "areas": [
                        "Manhattan",
                        "Brooklyn",
                        "Queens"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CityData.get_rental_vacancy_rate",
                "args": {
                    "city": "New York",
                    "area": "Manhattan"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvisor.provide_investment_advice",
                "args": {
                    "return_rate": "7.5%",
                    "vacancy_rate": "3.2%"
                }
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CityData.get_rental_investment_return_rate', {'name': 'CityData.get_rental_investment_return_rate', 'description': 'Get the rental investment return rate for a specific city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'return_rate', 'description': 'rental investment return rate'}]}],\n['CityData.analyze_hot_area_investment_potential', {'name': 'CityData.analyze_hot_area_investment_potential', 'description': 'Analyze the investment potential of hot areas in a city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}, {'name': 'areas', 'description': 'list of hot areas', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'potential_analysis', 'description': 'analysis of investment potential'}]}],\n['CityData.get_rental_vacancy_rate', {'name': 'CityData.get_rental_vacancy_rate', 'description': 'Get the rental vacancy rate for a specific area in a city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}, {'name': 'area', 'description': 'name of the area', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'vacancy_rate', 'description': 'rental vacancy rate'}]}],\n['InvestmentAdvisor.provide_investment_advice', {'name': 'InvestmentAdvisor.provide_investment_advice', 'description': 'Provide investment advice based on return rate and vacancy rate', 'required_parameters': [{'name': 'return_rate', 'description': 'rental investment return rate', 'type': 'STRING'}, {'name': 'vacancy_rate', 'description': 'rental vacancy rate', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'investment advice'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我正在考虑租房投资。首先，获取我所在城市的租房投资回报率。接着，提供几个热门区域的租房投资潜力分析。然后，请获取我所在区域的租房空置率。最后，提供一些基于投资回报率的投资建议。"
            }
        ]
    },
    "370": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Coursera.get_user_growth_data",
                "Udemy.get_user_growth_data",
                "MarketAnalysis.analyze_education_market",
                "Survey.get_student_satisfaction_data"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Coursera.get_user_growth_data",
                "args": {}
            },
            {
                "id": 1,
                "prev": [],
                "name": "Udemy.get_user_growth_data",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "MarketAnalysis.analyze_education_market",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Survey.get_student_satisfaction_data",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Coursera.get_user_growth_data', {'name': 'Coursera.get_user_growth_data', 'description': 'Get the user growth data from Coursera', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}],\n['Udemy.get_user_growth_data', {'name': 'Udemy.get_user_growth_data', 'description': 'Get the user growth data from Udemy', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'user_growth', 'description': 'user growth data over time'}]}],\n['MarketAnalysis.analyze_education_market', {'name': 'MarketAnalysis.analyze_education_market', 'description': 'Analyze the changes in the education market', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'market_changes', 'description': 'changes in the education market'}]}],\n['Survey.get_student_satisfaction_data', {'name': 'Survey.get_student_satisfaction_data', 'description': 'Get the student satisfaction data from online education surveys', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'student satisfaction data'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对教育培训的影响。首先，获取共享经济平台（如Coursera和Udemy）的用户增长数据。接着，分析教育培训市场的变化情况。然后，获取学生对在线教育的满意度调查数据。最后，基于这些数据，提供一些关于教育培训市场发展的建议。"
            }
        ]
    },
    "113": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialInstitution.get_anti_unfair_competition_policy",
                "FinancialInstitution.analyze_policy_effectiveness",
                "FinancialInstitution.query_violation_records",
                "FinancialInstitution.evaluate_management_level"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialInstitution.get_anti_unfair_competition_policy",
                "args": {
                    "institution_name": "Bank of Example"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.analyze_policy_effectiveness",
                "args": {
                    "policy_content": "Retrieved policy content"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialInstitution.query_violation_records",
                "args": {
                    "institution_name": "Bank of Example",
                    "time_period": "last year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialInstitution.evaluate_management_level",
                "args": {
                    "policy_effectiveness": "Analyzed effectiveness",
                    "violation_records": "Retrieved records"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialInstitution.get_anti_unfair_competition_policy', {'name': 'FinancialInstitution.get_anti_unfair_competition_policy', 'description': 'Retrieve the anti-unfair competition policy of a specified financial institution.', 'required_parameters': [{'name': 'institution_name', 'description': 'The name of the financial institution.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_content', 'description': 'The content of the anti-unfair competition policy.'}]}], ['FinancialInstitution.analyze_policy_effectiveness', {'name': 'FinancialInstitution.analyze_policy_effectiveness', 'description': 'Analyze the effectiveness of the anti-unfair competition policy.', 'required_parameters': [{'name': 'policy_content', 'description': 'The content of the policy to be analyzed.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'effectiveness_analysis', 'description': 'The analysis of the policy effectiveness.'}]}], ['FinancialInstitution.query_violation_records', {'name': 'FinancialInstitution.query_violation_records', 'description': 'Query the violation records of anti-unfair competition for a specified financial institution within a given time period.', 'required_parameters': [{'name': 'institution_name', 'description': 'The name of the financial institution.', 'type': 'STRING'}, {'name': 'time_period', 'description': 'The time period for which to query the records.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'violation_records', 'description': 'The list of violation records.'}]}], ['FinancialInstitution.evaluate_management_level', {'name': 'FinancialInstitution.evaluate_management_level', 'description': 'Evaluate the management level of anti-unfair competition based on policy effectiveness and violation records.', 'required_parameters': [{'name': 'policy_effectiveness', 'description': 'The effectiveness of the policy.', 'type': 'STRING'}, {'name': 'violation_records', 'description': 'The list of violation records.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'management_level_evaluation', 'description': 'The evaluation of the management level.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某金融机构的反不正当竞争措施。首先，获取该机构的反不正当竞争政策和程序。然后，分析这些政策和程序的有效性。接着，查询该机构在过去一年内是否有任何反不正当竞争违规记录。最后，基于这些信息，评估该机构的反不正当竞争管理水平。"
            }
        ]
    },
    "70": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CharitySearch.list_projects",
                "CharitySearch.get_project_details",
                "CharitySearch.calculate_impact",
                "CharitySearch.get_donation_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CharitySearch.list_projects",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CharitySearch.get_project_details",
                "args": {
                    "projectId": 12345
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "CharitySearch.get_project_details",
                "args": {
                    "projectId": 67890
                }
            },
            {
                "id": 3,
                "prev": [
                    0
                ],
                "name": "CharitySearch.get_project_details",
                "args": {
                    "projectId": 54321
                }
            },
            {
                "id": 4,
                "prev": [
                    1
                ],
                "name": "CharitySearch.calculate_impact",
                "args": {
                    "projectId": 12345,
                    "donationAmount": 500
                }
            },
            {
                "id": 5,
                "prev": [
                    2
                ],
                "name": "CharitySearch.calculate_impact",
                "args": {
                    "projectId": 67890,
                    "donationAmount": 500
                }
            },
            {
                "id": 6,
                "prev": [
                    3
                ],
                "name": "CharitySearch.calculate_impact",
                "args": {
                    "projectId": 54321,
                    "donationAmount": 500
                }
            },
            {
                "id": 7,
                "prev": [
                    4
                ],
                "name": "CharitySearch.get_donation_link",
                "args": {
                    "projectId": 12345
                }
            },
            {
                "id": 8,
                "prev": [
                    7
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CharitySearch.list_projects', {'name': 'CharitySearch.list_projects', 'description': 'This function lists all available charity projects.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'projects', 'description': 'a list of at most 3 projects, containing id, name, and goal.'}]}], ['CharitySearch.get_project_details', {'name': 'CharitySearch.get_project_details', 'description': 'This function retrieves the details of a charity project given its ID.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the project.'}], 'optional_parameters': [], 'return_data': [{'name': 'name', 'description': 'The name of the project.'}, {'name': 'goal', 'description': 'The goal of the project.'}, {'name': 'description', 'description': 'The description of the project.'}]}], ['CharitySearch.calculate_impact', {'name': 'CharitySearch.calculate_impact', 'description': 'This function calculates the social impact of a donation to a specific project.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the project.'}, {'name': 'donationAmount', 'type': 'NUMBER', 'description': 'The amount of the donation.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact', 'description': 'The estimated social impact of the donation.'}]}], ['CharitySearch.get_donation_link', {'name': 'CharitySearch.get_donation_link', 'description': 'This function retrieves the donation link for a specific project.', 'required_parameters': [{'name': 'projectId', 'type': 'NUMBER', 'description': 'The ID of the project.'}], 'optional_parameters': [], 'return_data': [{'name': 'link', 'description': 'The donation link for the project.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想进行慈善捐赠。首先，请列出所有可用的慈善项目及其目标。然后，根据我的捐赠意愿和财务状况，推荐一个慈善项目。接下来，计算如果我捐赠推荐的慈善项目，可以产生的社会影响。最后，提供一个慈善捐赠的链接。"
            }
        ]
    },
    "468": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "IndustryDataAPI.get_quality_management_data",
                "CompanyCaseAPI.get_quality_management_case",
                "QualityManagementAPI.get_management_strategy",
                "QualityManagementAPI.get_management_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "topic": "quality management",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_quality_management_data",
                "args": {
                    "industry": "manufacturing",
                    "time_range": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "IndustryDataAPI.get_quality_management_data",
                "args": {
                    "industry": "services",
                    "time_range": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CompanyCaseAPI.get_quality_management_case",
                "args": {
                    "company_name": "Toyota"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "QualityManagementAPI.get_management_strategy",
                "args": {
                    "company_name": "Toyota"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "QualityManagementAPI.get_management_recommendations",
                "args": {}
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': 'Get recent news articles on a specific topic within a given time range.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'the topic of the news'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the news, e.g., 1 year'}]}], ['IndustryDataAPI.get_quality_management_data', {'name': 'IndustryDataAPI.get_quality_management_data', 'description': 'Get quality management data for a specific industry within a given time range.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry name'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the data, e.g., 1 year'}]}], ['CompanyCaseAPI.get_quality_management_case', {'name': 'CompanyCaseAPI.get_quality_management_case', 'description': 'Get quality management case studies for a specific company.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'the name of the company'}], 'optional_parameters': []}], ['QualityManagementAPI.get_management_strategy', {'name': 'QualityManagementAPI.get_management_strategy', 'description': 'Get the quality management strategy of a specific company.', 'required_parameters': [{'name': 'company_name', 'type': 'STRING', 'description': 'the name of the company'}], 'optional_parameters': []}], ['QualityManagementAPI.get_management_recommendations', {'name': 'QualityManagementAPI.get_management_recommendations', 'description': 'Get recommendations for quality management in the real economy.', 'required_parameters': [], 'optional_parameters': []}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解实体经济的质量管理情况。首先，获取最近一年的质量管理新闻。接着，提供制造业和服务业的质量管理数据。然后，请获取一些知名实体企业的质量管理案例，并分析其质量管理策略。最后，提供一些关于如何在实体经济中进行质量管理的建议。"
            }
        ]
    },
    "341": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Spotify.get_market_share",
                "Spotify.get_user_subscription_data",
                "Spotify.get_music_library_size",
                "MarketPositionModel.evaluate_market_position"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Spotify.get_market_share",
                "args": {
                    "company": "Spotify"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "Spotify.get_user_subscription_data",
                "args": {
                    "company": "Spotify"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Spotify.get_music_library_size",
                "args": {
                    "company": "Spotify"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketPositionModel.evaluate_market_position",
                "args": {
                    "company": "Spotify"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Spotify.get_market_share', {'name': 'Spotify.get_market_share', 'description': 'Get the market share data for a specific company in the music streaming market', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'market_share', 'description': 'market share percentage of the company'}, {'name': 'competitors', 'description': 'list of main competitors and their market shares'}]}],\n['Spotify.get_user_subscription_data', {'name': 'Spotify.get_user_subscription_data', 'description': 'Get the user subscription data for a specific company', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'total_subscribers', 'description': 'total number of subscribers'}, {'name': 'subscription_growth', 'description': 'growth rate of subscriptions'}]}],\n['Spotify.get_music_library_size', {'name': 'Spotify.get_music_library_size', 'description': 'Get the music library size for a specific company', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'total_tracks', 'description': 'total number of tracks in the library'}, {'name': 'unique_artists', 'description': 'number of unique artists in the library'}]}],\n['MarketPositionModel.evaluate_market_position', {'name': 'MarketPositionModel.evaluate_market_position', 'description': 'Evaluate the market position of a specific company using a market position model', 'required_parameters': [{'name': 'company', 'description': 'name of the company', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'market_position_score', 'description': 'score indicating the market position of the company'}, {'name': 'competitive_analysis', 'description': 'detailed analysis of the company's competitive position'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想分析Spotify公司的音乐流媒体市场地位。首先，请获取Spotify公司及其主要竞争对手的市场份额数据。然后，分析其用户订阅量和音乐库规模。接下来，使用市场地位模型评估其在音乐流媒体市场的地位。最后，提供一个基于评估的市场地位报告。"
            }
        ]
    },
    "209": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinanceResearch.get_brand_awareness_report",
                "ChinaFinanceResearch.get_brand_awareness_score",
                "ChinaFinanceResearch.get_real_time_brand_awareness",
                "ChinaFinanceResearch.analyze_brand_awareness",
                "ChinaFinanceResearch.provide_brand_awareness_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinanceResearch.get_brand_awareness_report",
                "args": {
                    "year": 2024,
                    "industry": "消费金融贷款公司"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaFinanceResearch.get_brand_awareness_score",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ChinaFinanceResearch.get_brand_awareness_score",
                "args": {
                    "company": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ChinaFinanceResearch.analyze_brand_awareness",
                "args": {
                    "company1": "蚂蚁金服",
                    "company2": "京东金融"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ChinaFinanceResearch.get_real_time_brand_awareness",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "ChinaFinanceResearch.provide_brand_awareness_suggestions",
                "args": {
                    "company": "蚂蚁金服"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinanceResearch.get_brand_awareness_report', {'name': 'ChinaFinanceResearch.get_brand_awareness_report', 'description': '获取特定年份和行业的品牌知名度研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}, {'name': 'industry', 'type': 'STRING', 'description': '报告的行业'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '品牌知名度研究报告'}]}], ['ChinaFinanceResearch.get_brand_awareness_score', {'name': 'ChinaFinanceResearch.get_brand_awareness_score', 'description': '获取特定公司的品牌知名度评分', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'score', 'description': '品牌知名度评分'}]}], ['ChinaFinanceResearch.get_real_time_brand_awareness', {'name': 'ChinaFinanceResearch.get_real_time_brand_awareness', 'description': '获取特定公司的实时品牌知名度信息', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'real_time_info', 'description': '实时品牌知名度信息'}]}], ['ChinaFinanceResearch.analyze_brand_awareness', {'name': 'ChinaFinanceResearch.analyze_brand_awareness', 'description': '对比分析两家公司的品牌知名度评分', 'required_parameters': [{'name': 'company1', 'type': 'STRING', 'description': '第一家公司的名称'}, {'name': 'company2', 'type': 'STRING', 'description': '第二家公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': '品牌知名度对比分析结果'}]}], ['ChinaFinanceResearch.provide_brand_awareness_suggestions', {'name': 'ChinaFinanceResearch.provide_brand_awareness_suggestions', 'description': '基于品牌知名度分析提供建议', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': '公司的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '品牌知名度提升建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的品牌知名度情况。首先，请提供2024年中国消费金融贷款公司的品牌知名度研究报告。然后，获取蚂蚁金服与京东金融的品牌知名度评分进行对比分析。接着，获取蚂蚁金服的实时品牌知名度信息。最后，基于品牌知名度分析，提供一些品牌知名度建议。"
            }
        ]
    },
    "433": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CrimeRateAPI.get_crime_rate",
                "RentPriceAPI.get_median_rent_price",
                "SafetyScoreAPI.get_safety_score",
                "RecommendationAPI.get_rental_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CrimeRateAPI.get_crime_rate",
                "args": {
                    "city": "New York"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "RentPriceAPI.get_median_rent_price",
                "args": {
                    "city": "New York",
                    "crime_rate_threshold": "low"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "SafetyScoreAPI.get_safety_score",
                "args": {
                    "city": "New York",
                    "area": "Manhattan"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "RecommendationAPI.get_rental_recommendations",
                "args": {
                    "city": "New York",
                    "safety_score_threshold": "high"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CrimeRateAPI.get_crime_rate', {'name': 'CrimeRateAPI.get_crime_rate', 'description': 'Get the crime rate data for a specific city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'crime_rate', 'description': 'crime rate data for the city'}]}],\n['RentPriceAPI.get_median_rent_price', {'name': 'RentPriceAPI.get_median_rent_price', 'description': 'Get the median rent price for areas with a specified crime rate threshold in a city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}, {'name': 'crime_rate_threshold', 'description': 'threshold for crime rate (low, medium, high)', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'median_rent_price', 'description': 'median rent price for the specified areas'}]}],\n['SafetyScoreAPI.get_safety_score', {'name': 'SafetyScoreAPI.get_safety_score', 'description': 'Get the safety score for a specific area in a city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}, {'name': 'area', 'description': 'name of the area', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'safety_score', 'description': 'safety score for the specified area'}]}],\n['RecommendationAPI.get_rental_recommendations', {'name': 'RecommendationAPI.get_rental_recommendations', 'description': 'Get rental recommendations based on safety score threshold in a city', 'required_parameters': [{'name': 'city', 'description': 'name of the city', 'type': 'STRING'}, {'name': 'safety_score_threshold', 'description': 'threshold for safety score (low, medium, high)', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of rental recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我正在寻找一个安全的租房地点。首先，获取我所在城市的犯罪率数据。接着，提供几个低犯罪率区域的租房价格中位数。然后，请获取我所在区域的治安评分。最后，提供一些基于安全性的租房建议。"
            }
        ]
    },
    "275": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_ticker_news",
                "PolygonFinance.get_currency_exchange_rate",
                "PolygonFinance.get_stock_index_data",
                "PolygonFinance.get_market_analysis",
                "PolygonFinance.get_investment_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PolygonFinance.get_ticker_news",
                "args": {
                    "ticker": "BEL20"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PolygonFinance.get_currency_exchange_rate",
                "args": {
                    "from_currency": "EUR",
                    "to_currency": "USD",
                    "days": 7
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PolygonFinance.get_stock_index_data",
                "args": {
                    "index_name": "BEL20"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PolygonFinance.get_market_analysis",
                "args": {
                    "index_name": "BEL20",
                    "news_data": "PolygonFinance.get_ticker_news",
                    "exchange_rate_data": "PolygonFinance.get_currency_exchange_rate"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "PolygonFinance.get_investment_advice",
                "args": {
                    "index_name": "BEL20",
                    "analysis_data": "PolygonFinance.get_market_analysis"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.get_currency_exchange_rate', {'name': 'PolygonFinance.get_currency_exchange_rate', 'description': 'Get the exchange rate between two currencies over a specified number of days.', 'required_parameters': [{'name': 'from_currency', 'type': 'STRING', 'description': 'The currency to convert from.'}, {'name': 'to_currency', 'type': 'STRING', 'description': 'The currency to convert to.'}, {'name': 'days', 'type': 'NUMBER', 'description': 'The number of days to retrieve data for.'}], 'optional_parameters': [], 'return_data': [{'name': 'exchange_rates', 'description': 'A list of exchange rates over the specified days.'}]}], ['PolygonFinance.get_stock_index_data', {'name': 'PolygonFinance.get_stock_index_data', 'description': 'Get the latest data for a specific stock index.', 'required_parameters': [{'name': 'index_name', 'type': 'STRING', 'description': 'The name of the stock index.'}], 'optional_parameters': [], 'return_data': [{'name': 'index_data', 'description': 'The latest data for the specified stock index.'}]}], ['PolygonFinance.get_market_analysis', {'name': 'PolygonFinance.get_market_analysis', 'description': 'Analyze the market based on news, exchange rates, and stock index data.', 'required_parameters': [{'name': 'index_name', 'type': 'STRING', 'description': 'The name of the stock index.'}, {'name': 'news_data', 'type': 'STRING', 'description': 'The source of news data.'}, {'name': 'exchange_rate_data', 'type': 'STRING', 'description': 'The source of exchange rate data.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': 'The analysis results based on the provided data.'}]}], ['PolygonFinance.get_investment_advice', {'name': 'PolygonFinance.get_investment_advice', 'description': 'Provide investment advice based on market analysis.', 'required_parameters': [{'name': 'index_name', 'type': 'STRING', 'description': 'The name of the stock index.'}, {'name': 'analysis_data', 'type': 'STRING', 'description': 'The source of market analysis data.'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'The investment advice based on the analysis.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解近期与比利时央行政策有关的市场波动。首先，获取最近比利时央行政策发布的新闻和市场反应分析。接着，提供过去七天内欧元兑美元汇率的波动情况。然后，获取比利时BEL 20指数的实时数据。最后，请基于政策变化和市场波动，提供一些针对比利时BEL 20指数的投资建议。"
            }
        ]
    },
    "131": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialResearch.get_debt_management_report",
                "FinancialEducation.get_successful_debt_management_cases",
                "FinancialTools.get_debt_management_tools",
                "FinancialAdvisor.provide_debt_management_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialResearch.get_debt_management_report",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialEducation.get_successful_debt_management_cases",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialTools.get_debt_management_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialAdvisor.provide_debt_management_advice",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialResearch.get_debt_management_report', {'name': 'FinancialResearch.get_debt_management_report', 'description': 'Retrieve research reports on debt management.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'A detailed research report on debt management.'}]}], ['FinancialEducation.get_successful_debt_management_cases', {'name': 'FinancialEducation.get_successful_debt_management_cases', 'description': 'Get successful cases of debt management through financial education.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of successful debt management cases.'}]}], ['FinancialTools.get_debt_management_tools', {'name': 'FinancialTools.get_debt_management_tools', 'description': 'Retrieve practical tools for debt management.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': 'A list of debt management tools.'}]}], ['FinancialAdvisor.provide_debt_management_advice', {'name': 'FinancialAdvisor.provide_debt_management_advice', 'description': 'Provide advice on debt management based on the gathered information.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'Debt management advice based on the gathered information.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对债务管理的影响。首先，请获取关于债务管理的研究报告。然后，获取一些通过金融教育成功进行债务管理的案例。接着，获取一些债务管理的实用工具。最后，基于这些信息，为我提供一些债务管理的建议。"
            }
        ]
    },
    "425": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "DataAnalysis.analyze_trends",
                "Comparison.compare_impacts",
                "Recommendation.provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "大学生环保意识调查数据"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_trends",
                "args": {
                    "data": "最近五年内大学生环保意识调查数据"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Comparison.compare_impacts",
                "args": {
                    "trends": "分析结果的变化趋势",
                    "activities": "绿色经济活动"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Recommendation.provide_suggestions",
                "args": {
                    "comparison": "比较结果"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['DataAnalysis.analyze_trends', {'name': 'DataAnalysis.analyze_trends', 'description': 'Analyze trends in given data', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'trends', 'description': 'trends identified in the data'}]}], ['Comparison.compare_impacts', {'name': 'Comparison.compare_impacts', 'description': 'Compare the impacts of different activities on a given trend', 'required_parameters': [{'name': 'trends', 'description': 'trends to be compared', 'type': 'STRING'}, {'name': 'activities', 'description': 'activities to compare', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison', 'description': 'comparison results'}]}], ['Recommendation.provide_suggestions', {'name': 'Recommendation.provide_suggestions', 'description': 'Provide suggestions based on comparison results', 'required_parameters': [{'name': 'comparison', 'description': 'comparison results', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'suggested actions'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究绿色经济对大学生环保意识的影响。首先，获取最近五年内大学生环保意识调查数据。接着，分析这些调查结果的变化趋势。然后，比较绿色经济活动对大学生环保意识的影响程度。最后，提供一些关于如何提高大学生环保意识的建议。"
            }
        ]
    },
    "366": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "Airbnb.get_user_data_collection",
                "Uber.get_user_data_collection",
                "Airbnb.analyze_privacy_policy_changes",
                "Uber.analyze_privacy_policy_changes",
                "Survey.get_consumer_satisfaction_data",
                "Policy.optimize_privacy_policy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Airbnb.get_user_data_collection",
                "args": {
                    "platform": "Airbnb"
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "Uber.get_user_data_collection",
                "args": {
                    "platform": "Uber"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "Airbnb.analyze_privacy_policy_changes",
                "args": {
                    "platform": "Airbnb"
                }
            },
            {
                "id": 3,
                "prev": [
                    1
                ],
                "name": "Uber.analyze_privacy_policy_changes",
                "args": {
                    "platform": "Uber"
                }
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "Survey.get_consumer_satisfaction_data",
                "args": {
                    "platforms": [
                        "Airbnb",
                        "Uber"
                    ]
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "Policy.optimize_privacy_policy",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['Airbnb.get_user_data_collection', {'name': 'Airbnb.get_user_data_collection', 'description': 'Get user data collection details from Airbnb', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'data_collection_details', 'description': 'details of user data collection'}]}], ['Uber.get_user_data_collection', {'name': 'Uber.get_user_data_collection', 'description': 'Get user data collection details from Uber', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'data_collection_details', 'description': 'details of user data collection'}]}], ['Airbnb.analyze_privacy_policy_changes', {'name': 'Airbnb.analyze_privacy_policy_changes', 'description': 'Analyze changes in privacy protection policies of Airbnb', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_changes', 'description': 'details of privacy policy changes'}]}], ['Uber.analyze_privacy_policy_changes', {'name': 'Uber.analyze_privacy_policy_changes', 'description': 'Analyze changes in privacy protection policies of Uber', 'required_parameters': [{'name': 'platform', 'description': 'name of the platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_changes', 'description': 'details of privacy policy changes'}]}], ['Survey.get_consumer_satisfaction_data', {'name': 'Survey.get_consumer_satisfaction_data', 'description': 'Get consumer satisfaction survey data regarding privacy protection', 'required_parameters': [{'name': 'platforms', 'description': 'list of platforms to analyze', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'consumer satisfaction data'}]}], ['Policy.optimize_privacy_policy', {'name': 'Policy.optimize_privacy_policy', 'description': 'Provide recommendations for optimizing privacy protection policies', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of policy optimization recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对消费者隐私的影响。首先，获取共享经济平台（如Airbnb和Uber）的用户数据收集情况。接着，分析消费者隐私保护政策的变化情况。然后，获取消费者对隐私保护的满意度调查数据。最后，基于这些数据，提供一些关于隐私保护政策优化的建议。"
            }
        ]
    },
    "294": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "FinancialInstitution.get_investment_data",
                "DataAnalysis.analyze_data",
                "InvestmentAdvice.provide_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "现状偏差"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.get_investment_data",
                "args": {
                    "institution": "某大型金融机构",
                    "period": "过去一年"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAnalysis.analyze_data",
                "args": {
                    "data": "投资决策数据",
                    "bias": "现状偏差"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "InvestmentAdvice.provide_advice",
                "args": {
                    "analysis_result": "分析结果"
                }
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['FinancialInstitution.get_investment_data', {'name': 'FinancialInstitution.get_investment_data', 'description': 'Retrieve investment decision data from a specified financial institution over a specified period', 'required_parameters': [{'name': 'institution', 'description': 'name of the financial institution', 'type': 'STRING'}, {'name': 'period', 'description': 'time period for the data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'investment decision data'}]}], ['DataAnalysis.analyze_data', {'name': 'DataAnalysis.analyze_data', 'description': 'Analyze the provided data for specific biases', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}, {'name': 'bias', 'description': 'type of bias to look for', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'result of the data analysis'}]}], ['InvestmentAdvice.provide_advice', {'name': 'InvestmentAdvice.provide_advice', 'description': 'Provide investment advice based on the analysis result', 'required_parameters': [{'name': 'analysis_result', 'description': 'result of the data analysis', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'advice', 'description': 'investment advice'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想研究行为金融学中的现状偏差如何影响市场动态。首先，请获取关于现状偏差的最新学术论文。然后，获取某大型金融机构在过去一年的投资决策数据。接着，分析这些数据中是否存在现状偏差的迹象。最后，基于分析结果，为我提供一些避免现状偏差的投资建议。"
            }
        ]
    },
    "32": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PetInsurance.get_sales_data_by_breed",
                "PetInsurance.get_customer_reviews",
                "PetInsurance.get_sales_data_by_region",
                "Email.send"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PetInsurance.get_sales_data_by_breed",
                "args": {
                    "productId": "P12345"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PetInsurance.get_customer_reviews",
                "args": {
                    "productId": "P12345"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "PetInsurance.get_sales_data_by_region",
                "args": {
                    "productId": "P12345"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "Email.send",
                "args": {
                    "address": "marketing@example.com",
                    "title": "Pet Insurance Market Acceptance Report",
                    "body": "Here is the market acceptance report for the pet insurance product P12345:\n\n1. Sales data by breed:\n   - Breed A: 100 units\n   - Breed B: 150 units\n   - Breed C: 200 units\n\n2. Customer reviews:\n   - Review 1: Excellent coverage!\n   - Review 2: Great customer service.\n   - Review 3: Affordable and comprehensive.\n\n3. Sales data by region:\n   - Region A: 250 units\n   - Region B: 300 units\n   - Region C: 400 units\n\nPlease find the attached file for more detailed analysis.",
                    "attachment": "/path/to/market_acceptance_report.pdf"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['PetInsurance.get_sales_data_by_breed', {'name': 'PetInsurance.get_sales_data_by_breed', 'description': 'This function retrieves the sales data of a pet insurance product by breed.', 'required_parameters': [{'name': 'productId', 'type': 'STRING', 'description': 'The ID of the pet insurance product.'}], 'optional_parameters': [], 'return_data': [{'name': 'salesData', 'description': 'The sales data by breed, containing breed and units sold.'}]}], ['PetInsurance.get_customer_reviews', {'name': 'PetInsurance.get_customer_reviews', 'description': 'This function retrieves the customer reviews of a pet insurance product.', 'required_parameters': [{'name': 'productId', 'type': 'STRING', 'description': 'The ID of the pet insurance product.'}], 'optional_parameters': [], 'return_data': [{'name': 'reviews', 'description': 'The customer reviews, containing comment, rating, and date. At most 3 reviews are returned.'}]}], ['PetInsurance.get_sales_data_by_region', {'name': 'PetInsurance.get_sales_data_by_region', 'description': 'This function retrieves the sales data of a pet insurance product by region.', 'required_parameters': [{'name': 'productId', 'type': 'STRING', 'description': 'The ID of the pet insurance product.'}], 'optional_parameters': [], 'return_data': [{'name': 'salesData', 'description': 'The sales data by region, containing region and units sold.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某款宠物健康险产品的市场接受度。首先，获取该产品在不同宠物品种的销售数据。然后，获取该产品的客户评价数据。接着，分析该产品在不同地区的销售情况。最后，提供基于市场接受度的推广建议。"
            }
        ]
    },
    "393": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "DataAnalysis.analyze_risk_events",
                "Comparison.compare_risk_management",
                "Recommendation.provide_risk_management_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "绿色经济项目风险管理"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_risk_events",
                "args": {
                    "data": "GoogleScholar.search_google_scholar.return_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Comparison.compare_risk_management",
                "args": {
                    "green_economy_data": "DataAnalysis.analyze_risk_events.return_data",
                    "other_projects_data": "GoogleScholar.search_google_scholar.return_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Recommendation.provide_risk_management_suggestions",
                "args": {
                    "comparison_data": "Comparison.compare_risk_management.return_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['DataAnalysis.analyze_risk_events', {'name': 'DataAnalysis.analyze_risk_events', 'description': 'Analyze risk events data to determine occurrence rate and impact', 'required_parameters': [{'name': 'data', 'description': 'data to be analyzed', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'occurrence_rate', 'description': 'rate of risk events'}, {'name': 'impact_level', 'description': 'impact level of risk events'}]}], ['Comparison.compare_risk_management', {'name': 'Comparison.compare_risk_management', 'description': 'Compare risk management effectiveness between different projects', 'required_parameters': [{'name': 'green_economy_data', 'description': 'data of green economy projects', 'type': 'STRING'}, {'name': 'other_projects_data', 'description': 'data of other projects', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_result', 'description': 'comparison result of risk management effectiveness'}]}], ['Recommendation.provide_risk_management_suggestions', {'name': 'Recommendation.provide_risk_management_suggestions', 'description': 'Provide suggestions to improve risk management capabilities', 'required_parameters': [{'name': 'comparison_data', 'description': 'comparison data to base suggestions on', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'list of suggestions to improve risk management'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解绿色经济项目的风险管理。首先，获取过去一年内绿色经济项目的风险事件数据。接着，分析这些项目的风险发生率和影响程度。然后，比较绿色经济项目与其他项目的风险管理效果。最后，提供一些关于如何提高绿色经济项目风险管理能力的建议。"
            }
        ]
    },
    "316": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "TaxDatabase.query_tax_disputes",
                "ToolUsage.get_tool_usage_stats",
                "Analysis.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "2024年中国居民税务争议解决方法"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxDatabase.query_tax_disputes",
                "args": {
                    "year": "2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ToolUsage.get_tool_usage_stats",
                "args": {
                    "tool_type": "税务争议解决工具"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Analysis.provide_recommendations",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['TaxDatabase.query_tax_disputes', {'name': 'TaxDatabase.query_tax_disputes', 'description': 'Query tax dispute cases from the database', 'required_parameters': [{'name': 'year', 'description': 'year of the tax dispute cases', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'case_data', 'description': 'list of tax dispute cases'}]}], ['ToolUsage.get_tool_usage_stats', {'name': 'ToolUsage.get_tool_usage_stats', 'description': 'Get usage statistics of specific tools', 'required_parameters': [{'name': 'tool_type', 'description': 'type of the tool', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'usage_stats', 'description': 'usage statistics of the tool'}]}], ['Analysis.provide_recommendations', {'name': 'Analysis.provide_recommendations', 'description': 'Provide recommendations based on analysis', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国居民的税务争议解决方法。首先，请提供2024年中国居民税务争议解决的最新方法。然后，获取过去一年中国居民税务争议的案例数据。接着，获取当前税务争议解决工具的使用情况。最后，基于方法和案例分析，提供一些解决建议。"
            }
        ]
    },
    "390": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "DataAnalysis.analyze_carbon_emissions",
                "Comparison.compare_projects",
                "Recommendation.provide_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "green economy carbon emissions"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAnalysis.analyze_carbon_emissions",
                "args": {
                    "data": "carbon_emissions_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Comparison.compare_projects",
                "args": {
                    "green_economy_projects": "green_economy_projects_data",
                    "other_projects": "other_projects_data"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Recommendation.provide_suggestions",
                "args": {
                    "analysis_results": "analysis_results_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['DataAnalysis.analyze_carbon_emissions', {'name': 'DataAnalysis.analyze_carbon_emissions', 'description': 'Analyze carbon emissions data from green economy projects', 'required_parameters': [{'name': 'data', 'description': 'carbon emissions data', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': 'results of the carbon emissions analysis'}]}], ['Comparison.compare_projects', {'name': 'Comparison.compare_projects', 'description': 'Compare the environmental impact of green economy projects with other projects', 'required_parameters': [{'name': 'green_economy_projects', 'description': 'data of green economy projects', 'type': 'STRING'}, {'name': 'other_projects', 'description': 'data of other projects', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_results', 'description': 'results of the comparison'}]}], ['Recommendation.provide_suggestions', {'name': 'Recommendation.provide_suggestions', 'description': 'Provide suggestions for improving the environmental impact of green economy projects', 'required_parameters': [{'name': 'analysis_results', 'description': 'results of the analysis', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': 'list of suggestions for improvement'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想研究绿色经济对环境的影响。首先，获取过去十年内绿色经济相关项目的碳排放数据。接着，分析这些项目的环保效益。然后，比较绿色经济项目与其他项目的环保贡献。最后，提供一些关于如何进一步提高绿色经济项目环保效益的建议。"
            }
        ]
    },
    "3": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "DataFetch.get_user_growth",
                "DataFetch.get_market_share",
                "DataAnalysis.analyze_market_performance",
                "StrategyRecommendation.provide_investment_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "DataFetch.get_user_growth",
                "args": {
                    "platform": "Alipay",
                    "time_period": "last_year"
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "DataFetch.get_user_growth",
                "args": {
                    "platform": "WeChatPay",
                    "time_period": "last_year"
                }
            },
            {
                "id": 2,
                "prev": [
                    0,
                    1
                ],
                "name": "DataFetch.get_market_share",
                "args": {
                    "platforms": [
                        "Alipay",
                        "WeChatPay"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "DataAnalysis.analyze_market_performance",
                "args": {
                    "platforms": [
                        "Alipay",
                        "WeChatPay"
                    ],
                    "data": {
                        "user_growth": [
                            {
                                "platform": "Alipay",
                                "growth": "10%"
                            },
                            {
                                "platform": "WeChatPay",
                                "growth": "15%"
                            }
                        ],
                        "market_share": [
                            {
                                "platform": "Alipay",
                                "share": "55%"
                            },
                            {
                                "platform": "WeChatPay",
                                "share": "45%"
                            }
                        ]
                    }
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "StrategyRecommendation.provide_investment_strategy",
                "args": {
                    "analysis_result": {
                        "Alipay": {
                            "growth": "10%",
                            "market_share": "55%"
                        },
                        "WeChatPay": {
                            "growth": "15%",
                            "market_share": "45%"
                        }
                    }
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['DataFetch.get_user_growth', {'name': 'DataFetch.get_user_growth', 'description': '获取指定平台在过去一年的用户增长数据', 'required_parameters': [{'name': 'platform', 'description': '支付平台名称', 'type': 'STRING'}, {'name': 'time_period', 'description': '时间周期', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'growth', 'description': '用户增长百分比'}]}], ['DataFetch.get_market_share', {'name': 'DataFetch.get_market_share', 'description': '获取当前指定支付平台的市场份额', 'required_parameters': [{'name': 'platforms', 'description': '支付平台名称列表', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'share', 'description': '市场份额百分比'}]}], ['DataAnalysis.analyze_market_performance', {'name': 'DataAnalysis.analyze_market_performance', 'description': '分析指定支付平台的市场表现', 'required_parameters': [{'name': 'platforms', 'description': '支付平台名称列表', 'type': 'LIST'}, {'name': 'data', 'description': '包含用户增长和市场份额的数据', 'type': 'DICT'}], 'optional_parameters': [], 'return_data': [{'name': 'performance', 'description': '市场表现分析结果'}]}], ['StrategyRecommendation.provide_investment_strategy', {'name': 'StrategyRecommendation.provide_investment_strategy', 'description': '基于分析结果提供数字支付投资策略建议', 'required_parameters': [{'name': 'analysis_result', 'description': '市场分析结果', 'type': 'DICT'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': '投资策略建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我打算进行数字支付投资。首先，获取支付宝和微信支付过去一年的用户增长数据。然后，获取当前支付宝和微信支付的市场份额。接着，分析这两种支付方式的市场表现。最后，基于分析结果，提供一个数字支付投资策略建议。"
            }
        ]
    },
    "67": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Insurance.list_products",
                "Insurance.recommend_product",
                "Insurance.calculate_premium",
                "Insurance.get_application_link"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Insurance.list_products",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "Insurance.recommend_product",
                "args": {
                    "family_status": "married with two children",
                    "financial_status": "stable income, moderate savings"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Insurance.calculate_premium",
                "args": {
                    "product_id": 12345
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Insurance.get_application_link",
                "args": {
                    "product_id": 12345
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Insurance.list_products', {'name': 'Insurance.list_products', 'description': 'List all available insurance products and their coverage details.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'products', 'description': 'A list of insurance products, each containing id, name, and coverage details.'}]}], ['Insurance.recommend_product', {'name': 'Insurance.recommend_product', 'description': 'Recommend the most suitable insurance product based on family and financial status.', 'required_parameters': [{'name': 'family_status', 'type': 'STRING', 'description': 'The family status of the user.'}, {'name': 'financial_status', 'type': 'STRING', 'description': 'The financial status of the user.'}], 'optional_parameters': [], 'return_data': [{'name': 'recommended_product', 'description': 'The recommended insurance product, containing id, name, and coverage details.'}]}], ['Insurance.calculate_premium', {'name': 'Insurance.calculate_premium', 'description': 'Calculate the annual premium for a given insurance product.', 'required_parameters': [{'name': 'product_id', 'type': 'NUMBER', 'description': 'The ID of the insurance product.'}], 'optional_parameters': [], 'return_data': [{'name': 'annual_premium', 'description': 'The annual premium amount.'}]}], ['Insurance.get_application_link', {'name': 'Insurance.get_application_link', 'description': 'Get the application link for a given insurance product.', 'required_parameters': [{'name': 'product_id', 'type': 'NUMBER', 'description': 'The ID of the insurance product.'}], 'optional_parameters': [], 'return_data': [{'name': 'application_link', 'description': 'The link to apply for the insurance product.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想进行保险规划。首先，请列出所有可用的保险产品及其覆盖范围。然后，根据我的家庭状况和财务状况，推荐最适合我的保险产品。接下来，计算如果我选择推荐的保险产品，每年需要支付的保费。最后，提供一个保险申请的链接。"
            }
        ]
    },
    "167": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialData.get_historical_prices",
                "EconomicIndicators.get_global_economic_data",
                "FinancialData.get_real_time_volume",
                "InvestmentAdvisor.generate_recommendation"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialData.get_historical_prices",
                "args": {
                    "ticker": "Copper",
                    "period": "10Y"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomicIndicators.get_global_economic_data",
                "args": {
                    "indicator": "GDP",
                    "period": "10Y"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "EconomicIndicators.get_global_economic_data",
                "args": {
                    "indicator": "Inflation",
                    "period": "10Y"
                }
            },
            {
                "id": 3,
                "prev": [
                    0
                ],
                "name": "EconomicIndicators.get_global_economic_data",
                "args": {
                    "indicator": "Industrial Production",
                    "period": "10Y"
                }
            },
            {
                "id": 4,
                "prev": [
                    1,
                    2,
                    3
                ],
                "name": "FinancialData.get_real_time_volume",
                "args": {
                    "ticker": "Copper"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "InvestmentAdvisor.generate_recommendation",
                "args": {
                    "historical_prices": "FinancialData.get_historical_prices",
                    "economic_data": "EconomicIndicators.get_global_economic_data",
                    "real_time_volume": "FinancialData.get_real_time_volume"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialData.get_historical_prices', {'name': 'FinancialData.get_historical_prices', 'description': '获取某一资产在过去特定时间段内的历史价格数据', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': '资产的代码或名称'}, {'name': 'period', 'type': 'STRING', 'description': '时间段，如10Y表示十年'}], 'optional_parameters': [], 'return_data': [{'name': 'prices', 'description': '历史价格数据列表，包含日期和价格'}]}], ['EconomicIndicators.get_global_economic_data', {'name': 'EconomicIndicators.get_global_economic_data', 'description': '获取全球经济指标数据', 'required_parameters': [{'name': 'indicator', 'type': 'STRING', 'description': '经济指标名称，如GDP、Inflation等'}, {'name': 'period', 'type': 'STRING', 'description': '时间段，如10Y表示十年'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': '经济指标数据列表，包含日期和数值'}]}], ['FinancialData.get_real_time_volume', {'name': 'FinancialData.get_real_time_volume', 'description': '获取某一资产的实时交易量', 'required_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': '资产的代码或名称'}], 'optional_parameters': [], 'return_data': [{'name': 'volume', 'description': '实时交易量'}]}], ['InvestmentAdvisor.generate_recommendation', {'name': 'InvestmentAdvisor.generate_recommendation', 'description': '基于历史价格、经济指标数据和实时交易量生成投资建议', 'required_parameters': [{'name': 'historical_prices', 'type': 'STRING', 'description': '历史价格数据来源'}, {'name': 'economic_data', 'type': 'STRING', 'description': '经济指标数据来源'}, {'name': 'real_time_volume', 'type': 'STRING', 'description': '实时交易量数据来源'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendation', 'description': '投资建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想评估铜市场的投资机会。首先，请获取铜在过去十年的年度价格数据。然后，获取全球经济指标对铜价格的影响分析。接下来，获取铜的实时交易量。最后，请提供基于这些数据的投资建议。"
            }
        ]
    },
    "30": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "SalesData.get_sales_by_age",
                "CustomerSatisfaction.get_satisfaction_scores",
                "SalesData.get_sales_by_income_level",
                "MarketingRecommendation.generate_recommendation"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "SalesData.get_sales_by_age",
                "args": {
                    "product_name": "教育储蓄险"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CustomerSatisfaction.get_satisfaction_scores",
                "args": {
                    "product_name": "教育储蓄险"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "SalesData.get_sales_by_income_level",
                "args": {
                    "product_name": "教育储蓄险"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "MarketingRecommendation.generate_recommendation",
                "args": {
                    "product_name": "教育储蓄险",
                    "age_sales_data": "SalesData.get_sales_by_age",
                    "satisfaction_scores": "CustomerSatisfaction.get_satisfaction_scores",
                    "income_sales_data": "SalesData.get_sales_by_income_level"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['SalesData.get_sales_by_age', {'name': 'SalesData.get_sales_by_age', 'description': '获取某款产品在不同年龄段的销售数据', 'required_parameters': [{'name': 'product_name', 'type': 'STRING', 'description': '产品的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'sales_data', 'description': '不同年龄段的销售数据'}]}], ['CustomerSatisfaction.get_satisfaction_scores', {'name': 'CustomerSatisfaction.get_satisfaction_scores', 'description': '获取某款产品的客户满意度评分', 'required_parameters': [{'name': 'product_name', 'type': 'STRING', 'description': '产品的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_scores', 'description': '客户满意度评分'}]}], ['SalesData.get_sales_by_income_level', {'name': 'SalesData.get_sales_by_income_level', 'description': '获取某款产品在不同收入水平家庭的购买比例', 'required_parameters': [{'name': 'product_name', 'type': 'STRING', 'description': '产品的名称'}], 'optional_parameters': [], 'return_data': [{'name': 'sales_data', 'description': '不同收入水平家庭的购买比例'}]}], ['MarketingRecommendation.generate_recommendation', {'name': 'MarketingRecommendation.generate_recommendation', 'description': '基于市场潜力的推广建议', 'required_parameters': [{'name': 'product_name', 'type': 'STRING', 'description': '产品的名称'}, {'name': 'age_sales_data', 'type': 'STRING', 'description': '不同年龄段的销售数据'}, {'name': 'satisfaction_scores', 'type': 'STRING', 'description': '客户满意度评分'}, {'name': 'income_sales_data', 'type': 'STRING', 'description': '不同收入水平家庭的购买比例'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendation', 'description': '推广建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某款教育储蓄险产品的市场潜力。首先，获取该产品在不同年龄段的销售数据。然后，获取该产品的客户满意度评分。接着，分析该产品在不同收入水平家庭的购买比例。最后，提供基于市场潜力的推广建议。"
            }
        ]
    },
    "335": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Alibaba.get_financial_statements",
                "Alibaba.analyze_financial_statements",
                "Alibaba.calculate_financial_ratios",
                "Alibaba.evaluate_risk_management"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "Alibaba.get_financial_statements",
                "args": {
                    "company_name": "阿里巴巴",
                    "years": 3
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "Alibaba.analyze_financial_statements",
                "args": {
                    "statements": "{{0.financial_statements}}",
                    "analysis_type": [
                        "资产负债表",
                        "现金流量表"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "Alibaba.calculate_financial_ratios",
                "args": {
                    "analysis_results": "{{1.analysis_results}}",
                    "ratios": [
                        "财务杠杆比率",
                        "流动性比率"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Alibaba.evaluate_risk_management",
                "args": {
                    "ratios": "{{2.calculated_ratios}}"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Alibaba.get_financial_statements', {'name': 'Alibaba.get_financial_statements', 'description': '获取指定公司近几年的财务报表', 'required_parameters': [{'name': 'company_name', 'description': '公司名称', 'type': 'STRING'}, {'name': 'years', 'description': '年数', 'type': 'INTEGER'}], 'optional_parameters': [], 'return_data': [{'name': 'financial_statements', 'description': '财务报表数据'}]}],\n['Alibaba.analyze_financial_statements', {'name': 'Alibaba.analyze_financial_statements', 'description': '分析财务报表', 'required_parameters': [{'name': 'statements', 'description': '财务报表数据', 'type': 'JSON'}, {'name': 'analysis_type', 'description': '分析类型', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': '分析结果'}]}],\n['Alibaba.calculate_financial_ratios', {'name': 'Alibaba.calculate_financial_ratios', 'description': '计算财务比率', 'required_parameters': [{'name': 'analysis_results', 'description': '分析结果', 'type': 'JSON'}, {'name': 'ratios', 'description': '比率类型', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'calculated_ratios', 'description': '计算的比率'}]}],\n['Alibaba.evaluate_risk_management', {'name': 'Alibaba.evaluate_risk_management', 'description': '评估风险管理能力', 'required_parameters': [{'name': 'ratios', 'description': '计算的比率', 'type': 'JSON'}], 'optional_parameters': [], 'return_data': [{'name': 'risk_management_evaluation', 'description': '风险管理评估结果'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估阿里巴巴公司的风险管理能力。首先，请获取阿里巴巴公司近三年的财务报表。然后，分析其资产负债表和现金流量表。接下来，计算其财务杠杆比率和流动性比率。最后，基于这些指标，评估其风险管理能力。"
            }
        ]
    },
    "94": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "Email.send",
                "FinancialInstitution.get_data_protection_policy",
                "FinancialInstitution.analyze_policy_compliance",
                "FinancialInstitution.get_data_breach_records",
                "FinancialInstitution.evaluate_data_protection_level"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialInstitution.get_data_protection_policy",
                "args": {
                    "institution_name": "Bank of Example"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.analyze_policy_compliance",
                "args": {
                    "policy_content": "retrieved_policy_content"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.get_data_breach_records",
                "args": {
                    "institution_name": "Bank of Example",
                    "time_period": "last_year"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "FinancialInstitution.evaluate_data_protection_level",
                "args": {
                    "compliance_analysis": "compliance_analysis_result",
                    "breach_records": "breach_records_result"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "Email.send",
                "args": {
                    "address": "dataanalyst@example.com",
                    "title": "Data Protection Assessment Report",
                    "body": "Here is the assessment report for Bank of Example's data protection measures:\n\n1. Compliance Analysis: compliance_analysis_result\n2. Data Breach Records: breach_records_result\n3. Overall Evaluation: evaluation_result",
                    "attachment": "/path/to/assessment_report.pdf"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FinancialInstitution.get_data_protection_policy', {'name': 'FinancialInstitution.get_data_protection_policy', 'description': 'This function retrieves the data protection policy of a financial institution given its name.', 'required_parameters': [{'name': 'institution_name', 'type': 'STRING', 'description': 'The name of the financial institution.'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_content', 'description': 'The content of the data protection policy.'}]}], ['FinancialInstitution.analyze_policy_compliance', {'name': 'FinancialInstitution.analyze_policy_compliance', 'description': 'This function analyzes the compliance of a given data protection policy.', 'required_parameters': [{'name': 'policy_content', 'type': 'STRING', 'description': 'The content of the data protection policy.'}], 'optional_parameters': [], 'return_data': [{'name': 'compliance_analysis', 'description': 'The analysis result of the policy compliance.'}]}], ['FinancialInstitution.get_data_breach_records', {'name': 'FinancialInstitution.get_data_breach_records', 'description': 'This function retrieves the data breach records of a financial institution within a specified time period.', 'required_parameters': [{'name': 'institution_name', 'type': 'STRING', 'description': 'The name of the financial institution.'}, {'name': 'time_period', 'type': 'STRING', 'description': 'The time period for which to retrieve the records.'}], 'optional_parameters': [], 'return_data': [{'name': 'breach_records', 'description': 'The data breach records within the specified time period.'}]}], ['FinancialInstitution.evaluate_data_protection_level', {'name': 'FinancialInstitution.evaluate_data_protection_level', 'description': 'This function evaluates the overall data protection level of a financial institution based on compliance analysis and data breach records.', 'required_parameters': [{'name': 'compliance_analysis', 'type': 'STRING', 'description': 'The compliance analysis result.'}, {'name': 'breach_records', 'type': 'STRING', 'description': 'The data breach records.'}], 'optional_parameters': [], 'return_data': [{'name': 'evaluation_result', 'description': 'The overall evaluation of the data protection level.'}]}]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解某金融机构的数据保护措施。首先，获取该机构的数据保护政策和程序。然后，分析这些政策和程序的合规性。接着，查询该机构在过去一年内是否有任何数据泄露记录。最后，基于这些信息，评估该机构的数据保护管理水平。"
            }
        ]
    },
    "192": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinance.get_social_responsibility_report",
                "ChinaFinance.get_company_social_responsibility_score",
                "ChinaFinance.get_company_real_time_social_responsibility_activities",
                "ChinaFinance.analyze_social_responsibility",
                "ChinaFinance.provide_social_responsibility_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinance.get_social_responsibility_report",
                "args": {
                    "year": 2024,
                    "companyType": "消费金融贷款公司"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_company_social_responsibility_score",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_company_social_responsibility_score",
                "args": {
                    "companyName": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ChinaFinance.analyze_social_responsibility",
                "args": {
                    "company1": "蚂蚁金服",
                    "company2": "京东金融"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ChinaFinance.get_company_real_time_social_responsibility_activities",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "ChinaFinance.provide_social_responsibility_recommendations",
                "args": {
                    "analysis": "基于社会责任分析"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinance.get_social_responsibility_report', {'name': 'ChinaFinance.get_social_responsibility_report', 'description': '获取中国消费金融贷款公司在特定年份的社会责任研究报告', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': '报告的年份'}, {'name': 'companyType', 'type': 'STRING', 'description': '公司类型，例如消费金融贷款公司'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '社会责任研究报告的内容'}]}], ['ChinaFinance.get_company_social_responsibility_score', {'name': 'ChinaFinance.get_company_social_responsibility_score', 'description': '获取特定公司在社会责任方面的评分', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'score', 'description': '社会责任评分'}]}], ['ChinaFinance.get_company_real_time_social_responsibility_activities', {'name': 'ChinaFinance.get_company_real_time_social_responsibility_activities', 'description': '获取特定公司的实时社会责任活动信息', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'activities', 'description': '实时社会责任活动信息'}]}], ['ChinaFinance.analyze_social_responsibility', {'name': 'ChinaFinance.analyze_social_responsibility', 'description': '对比分析两家公司在社会责任方面的表现', 'required_parameters': [{'name': 'company1', 'type': 'STRING', 'description': '第一家公司名称'}, {'name': 'company2', 'type': 'STRING', 'description': '第二家公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': '社会责任对比分析结果'}]}], ['ChinaFinance.provide_social_responsibility_recommendations', {'name': 'ChinaFinance.provide_social_responsibility_recommendations', 'description': '基于社会责任分析提供建议', 'required_parameters': [{'name': 'analysis', 'type': 'STRING', 'description': '社会责任分析结果'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': '社会责任建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的社会责任情况。首先，请提供2024年中国消费金融贷款公司的社会责任研究报告。然后，获取蚂蚁金服与京东金融的社会责任评分进行对比分析。接着，获取蚂蚁金服的实时社会责任活动信息。最后，基于社会责任分析，提供一些社会责任建议。"
            }
        ]
    },
    "63": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "MusicIndustryData.get_latest_revenue",
                "MusicIndustryData.analyze_policy_impact",
                "MusicIndustryData.compare_revenue_changes",
                "MusicIndustryData.predict_future_revenue"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MusicIndustryData.get_latest_revenue",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "MusicIndustryData.analyze_policy_impact",
                "args": {
                    "revenue_data": "latest_revenue_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "MusicIndustryData.compare_revenue_changes",
                "args": {
                    "policy_impact_data": "policy_impact_analysis"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MusicIndustryData.predict_future_revenue",
                "args": {
                    "comparison_data": "revenue_comparison_data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['MusicIndustryData.get_latest_revenue', {'name': 'MusicIndustryData.get_latest_revenue', 'description': '获取最新的音乐产业收入数据', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'revenue_data', 'description': '最新的音乐产业收入数据'}]}], ['MusicIndustryData.analyze_policy_impact', {'name': 'MusicIndustryData.analyze_policy_impact', 'description': '分析货币政策调整对音乐产业的即时反应', 'required_parameters': [{'name': 'revenue_data', 'type': 'STRING', 'description': '最新的音乐产业收入数据'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_impact_analysis', 'description': '货币政策调整对音乐产业的即时反应分析'}]}], ['MusicIndustryData.compare_revenue_changes', {'name': 'MusicIndustryData.compare_revenue_changes', 'description': '比较不同货币政策下的音乐产业收入变化', 'required_parameters': [{'name': 'policy_impact_data', 'type': 'STRING', 'description': '货币政策调整对音乐产业的即时反应分析'}], 'optional_parameters': [], 'return_data': [{'name': 'revenue_comparison_data', 'description': '不同货币政策下的音乐产业收入变化比较'}]}], ['MusicIndustryData.predict_future_revenue', {'name': 'MusicIndustryData.predict_future_revenue', 'description': '基于分析的音乐产业预测', 'required_parameters': [{'name': 'comparison_data', 'type': 'STRING', 'description': '不同货币政策下的音乐产业收入变化比较'}], 'optional_parameters': [], 'return_data': [{'name': 'future_revenue_prediction', 'description': '基于分析的音乐产业未来收入预测'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估当前的货币政策对音乐产业的影响。首先，请获取最新的音乐产业收入数据。然后，分析货币政策调整对音乐产业的即时反应。接下来，比较不同货币政策下的音乐产业收入变化。最后，请提供基于分析的音乐产业预测。"
            }
        ]
    },
    "480": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.search_news",
                "DataAPI.get_industry_data",
                "CaseStudyAPI.get_case_study",
                "RecommendationAPI.get_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.search_news",
                "args": {
                    "query": "供应链透明度",
                    "date_range": "last_year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "DataAPI.get_industry_data",
                "args": {
                    "industry": "制造业",
                    "data_type": "供应链透明度"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "DataAPI.get_industry_data",
                "args": {
                    "industry": "服务业",
                    "data_type": "供应链透明度"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CaseStudyAPI.get_case_study",
                "args": {
                    "company": "知名实体企业",
                    "study_type": "供应链透明度"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RecommendationAPI.get_recommendations",
                "args": {
                    "topic": "提高供应链透明度"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.search_news', {'name': 'NewsAPI.search_news', 'description': 'Search for news articles based on a query and date range.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the search query'}], 'optional_parameters': [{'name': 'date_range', 'type': 'STRING', 'description': 'the date range for the search, e.g., last_year, last_month'}]}], ['DataAPI.get_industry_data', {'name': 'DataAPI.get_industry_data', 'description': 'Get industry-specific data based on the industry type and data type.', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': 'the industry type, e.g., 制造业, 服务业'}], 'optional_parameters': [{'name': 'data_type', 'type': 'STRING', 'description': 'the type of data, e.g., 供应链透明度'}]}], ['CaseStudyAPI.get_case_study', {'name': 'CaseStudyAPI.get_case_study', 'description': 'Get case studies of companies based on the company name and study type.', 'required_parameters': [{'name': 'company', 'type': 'STRING', 'description': 'the name of the company'}], 'optional_parameters': [{'name': 'study_type', 'type': 'STRING', 'description': 'the type of study, e.g., 供应链透明度'}]}], ['RecommendationAPI.get_recommendations', {'name': 'RecommendationAPI.get_recommendations', 'description': 'Get recommendations based on a specific topic.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'the topic for recommendations'}], 'optional_parameters': []}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的供应链透明度情况。首先，获取最近一年的供应链透明度新闻。接着，提供制造业和服务业的供应链透明度数据。然后，请获取一些知名实体企业的供应链透明度案例，并分析其透明度策略。最后，提供一些关于如何在实体经济中提高供应链透明度的建议。"
            }
        ]
    },
    "465": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "BrandValueAPI.get_brand_value",
                "CaseStudyAPI.get_brand_case_study",
                "BrandStrategyAPI.analyze_brand_strategy",
                "BrandBuildingAPI.provide_brand_building_tips"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "topic": "实体经济品牌建设",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BrandValueAPI.get_brand_value",
                "args": {
                    "industry": "制造业",
                    "time_range": "1 year"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BrandValueAPI.get_brand_value",
                "args": {
                    "industry": "服务业",
                    "time_range": "1 year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "CaseStudyAPI.get_brand_case_study",
                "args": {
                    "industry": "实体经济",
                    "company": "知名实体企业"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "BrandStrategyAPI.analyze_brand_strategy",
                "args": {
                    "case_study": "知名实体企业品牌建设案例"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "BrandBuildingAPI.provide_brand_building_tips",
                "args": {
                    "industry": "实体经济"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': '获取最近一年的新闻数据。', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': '新闻主题'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': '时间范围'}]}, 'return_data': [{'name': 'news_list', 'description': '新闻列表'}]}], ['BrandValueAPI.get_brand_value', {'name': 'BrandValueAPI.get_brand_value', 'description': '获取特定行业的品牌价值数据。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '行业名称'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': '时间范围'}]}, 'return_data': [{'name': 'brand_value_data', 'description': '品牌价值数据'}]}], ['CaseStudyAPI.get_brand_case_study', {'name': 'CaseStudyAPI.get_brand_case_study', 'description': '获取特定行业的品牌建设案例。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '行业名称'}, {'name': 'company', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'case_study', 'description': '品牌建设案例'}]}], ['BrandStrategyAPI.analyze_brand_strategy', {'name': 'BrandStrategyAPI.analyze_brand_strategy', 'description': '分析品牌策略。', 'required_parameters': [{'name': 'case_study', 'type': 'STRING', 'description': '品牌建设案例'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy_analysis', 'description': '品牌策略分析'}]}], ['BrandBuildingAPI.provide_brand_building_tips', {'name': 'BrandBuildingAPI.provide_brand_building_tips', 'description': '提供品牌建设建议。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '行业名称'}], 'optional_parameters': [], 'return_data': [{'name': 'brand_building_tips', 'description': '品牌建设建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解实体经济的品牌建设情况。首先，获取最近一年的品牌建设新闻。接着，提供制造业和服务业的品牌价值数据。然后，请获取一些知名实体企业的品牌建设案例，并分析其品牌策略。最后，提供一些关于如何在实体经济中进行品牌建设的建议。"
            }
        ]
    },
    "445": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GJJ.get_definition",
                "GJJ.get_contribution_rates",
                "GJJ.get_loan_policies",
                "GJJ.calculate_loan"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GJJ.get_definition",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "GJJ.get_contribution_rates",
                "args": {
                    "city": "Shanghai"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "GJJ.get_loan_policies",
                "args": {
                    "city": "Shanghai"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "GJJ.calculate_loan",
                "args": {
                    "city": "Shanghai",
                    "loan_amount": 500000,
                    "loan_term": 20
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GJJ.get_definition', {'name': 'GJJ.get_definition', 'description': '获取公积金的基本定义和用途。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'definition', 'description': '公积金的定义和用途。'}]}], ['GJJ.get_contribution_rates', {'name': 'GJJ.get_contribution_rates', 'description': '获取不同城市的公积金缴纳比例和上限。', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': '城市名称。'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': '公积金缴纳比例和上限。'}]}], ['GJJ.get_loan_policies', {'name': 'GJJ.get_loan_policies', 'description': '获取公积金贷款的相关政策和利率。', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': '城市名称。'}], 'optional_parameters': [], 'return_data': [{'name': 'policies', 'description': '公积金贷款政策和利率。'}]}], ['GJJ.calculate_loan', {'name': 'GJJ.calculate_loan', 'description': '提供一个公积金贷款计算器，帮助估算贷款额度和还款计划。', 'required_parameters': [{'name': 'city', 'type': 'STRING', 'description': '城市名称。'}, {'name': 'loan_amount', 'type': 'NUMBER', 'description': '贷款金额。'}, {'name': 'loan_term', 'type': 'NUMBER', 'description': '贷款期限（年）。'}], 'optional_parameters': [], 'return_data': [{'name': 'loan_details', 'description': '贷款额度和还款计划。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我对公积金的运作机制不太了解。首先，获取公积金的基本定义和用途。然后，获取不同城市的公积金缴纳比例和上限。接着，获取公积金贷款的相关政策和利率。最后，提供一个公积金贷款计算器，帮助我估算贷款额度和还款计划。"
            }
        ]
    },
    "58": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialData.get_latest_entertainment_spending",
                "FinancialData.analyze_monetary_policy_impact",
                "FinancialData.compare_spending_under_different_policies",
                "FinancialData.predict_industry_trends",
                "Email.send"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialData.get_latest_entertainment_spending",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialData.analyze_monetary_policy_impact",
                "args": {
                    "spending_data": "latest_entertainment_spending"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialData.compare_spending_under_different_policies",
                "args": {
                    "policy_data": "monetary_policy_impact"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialData.predict_industry_trends",
                "args": {
                    "comparison_data": "spending_under_different_policies"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "Email.send",
                "args": {
                    "address": "analyst@example.com",
                    "title": "Entertainment Industry Forecast",
                    "body": "Based on the latest analysis, here are the predicted trends for the entertainment industry: ...",
                    "attachment": "/path/to/forecast.pdf"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}], ['FinancialData.get_latest_entertainment_spending', {'name': 'FinancialData.get_latest_entertainment_spending', 'description': 'Retrieve the latest data on entertainment spending.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'spending_data', 'description': 'The latest entertainment spending data.'}]}], ['FinancialData.analyze_monetary_policy_impact', {'name': 'FinancialData.analyze_monetary_policy_impact', 'description': 'Analyze the impact of monetary policy adjustments on entertainment spending.', 'required_parameters': [{'name': 'spending_data', 'type': 'STRING', 'description': 'The latest entertainment spending data.'}], 'optional_parameters': [], 'return_data': [{'name': 'impact_analysis', 'description': 'The analysis of monetary policy impact on entertainment spending.'}]}], ['FinancialData.compare_spending_under_different_policies', {'name': 'FinancialData.compare_spending_under_different_policies', 'description': 'Compare entertainment spending under different monetary policies.', 'required_parameters': [{'name': 'policy_data', 'type': 'STRING', 'description': 'The monetary policy impact data.'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_data', 'description': 'The comparison of entertainment spending under different policies.'}]}], ['FinancialData.predict_industry_trends', {'name': 'FinancialData.predict_industry_trends', 'description': 'Predict future trends in the entertainment industry based on current data.', 'required_parameters': [{'name': 'comparison_data', 'type': 'STRING', 'description': 'The comparison data of entertainment spending under different policies.'}], 'optional_parameters': [], 'return_data': [{'name': 'industry_forecast', 'description': 'The predicted trends for the entertainment industry.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估当前的货币政策对娱乐行业的影响。首先，请获取最新的娱乐支出数据。然后，分析货币政策调整对娱乐支出的即时反应。接下来，比较不同货币政策下的娱乐支出变化。最后，请提供基于分析的娱乐行业预测。"
            }
        ]
    },
    "333": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TaxService.get_latest_tax_service_updates",
                "TaxService.get_participation_data",
                "TaxService.get_tool_usage_data",
                "TaxService.generate_service_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaxService.get_latest_tax_service_updates",
                "args": {
                    "year": "2024"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxService.get_participation_data",
                "args": {
                    "year": "2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxService.get_tool_usage_data",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxService.generate_service_recommendations",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TaxService.get_latest_tax_service_updates', {'name': 'TaxService.get_latest_tax_service_updates', 'description': 'Get the latest updates on tax social services for Chinese residents', 'required_parameters': [{'name': 'year', 'description': 'the year for which updates are requested', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'updates', 'description': 'list of the latest updates on tax social services'}]}],\n['TaxService.get_participation_data', {'name': 'TaxService.get_participation_data', 'description': 'Get the participation data of Chinese residents in tax social services over the past year', 'required_parameters': [{'name': 'year', 'description': 'the year for which participation data is requested', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'participation_data', 'description': 'list of participation data'}]}],\n['TaxService.get_tool_usage_data', {'name': 'TaxService.get_tool_usage_data', 'description': 'Get the current usage data of tax social service tools', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tool_usage_data', 'description': 'list of tool usage data'}]}],\n['TaxService.generate_service_recommendations', {'name': 'TaxService.generate_service_recommendations', 'description': 'Generate service recommendations based on the latest updates and participation data', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'list of service recommendations'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国居民的税务社会服务。首先，请提供2024年中国居民税务社会服务的最新动态。然后，获取过去一年中国居民税务社会服务的参与数据。接着，获取当前税务社会服务工具的使用情况。最后，基于动态和参与数据，提供一些服务建议。"
            }
        ]
    },
    "484": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "JobMarket.get_latest_report",
                "JobMarket.analyze_report",
                "JobMarket.query_demand",
                "JobMarket.provide_career_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "JobMarket.get_latest_report",
                "args": {
                    "industry": "互联网经济"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "JobMarket.analyze_report",
                "args": {
                    "report_id": "latest_report_id",
                    "analysis_type": "热门职位和薪资水平"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "JobMarket.query_demand",
                "args": {
                    "positions": "热门职位列表",
                    "market": "当前市场"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "JobMarket.provide_career_advice",
                "args": {
                    "analysis_results": "分析结果",
                    "demand_results": "市场需求"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['JobMarket.get_latest_report', {'name': 'JobMarket.get_latest_report', 'description': '获取最新的行业就业报告。', 'required_parameters': [{'name': 'industry', 'type': 'STRING', 'description': '需要获取报告的行业名称。'}], 'optional_parameters': [], 'return_data': [{'name': 'report_id', 'description': '报告的唯一标识符。'}]}], ['JobMarket.analyze_report', {'name': 'JobMarket.analyze_report', 'description': '分析就业报告中的特定内容。', 'required_parameters': [{'name': 'report_id', 'type': 'STRING', 'description': '需要分析的报告ID。'}, {'name': 'analysis_type', 'type': 'STRING', 'description': '需要分析的内容类型，如热门职位、薪资水平等。'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_results', 'description': '分析结果。'}]}], ['JobMarket.query_demand', {'name': 'JobMarket.query_demand', 'description': '查询当前市场上对特定职位的需求情况。', 'required_parameters': [{'name': 'positions', 'type': 'LIST', 'description': '需要查询的职位列表。'}, {'name': 'market', 'type': 'STRING', 'description': '市场名称，如当前市场。'}], 'optional_parameters': [], 'return_data': [{'name': 'demand_results', 'description': '市场需求结果。'}]}], ['JobMarket.provide_career_advice', {'name': 'JobMarket.provide_career_advice', 'description': '基于分析和市场需求结果，提供职业规划建议。', 'required_parameters': [{'name': 'analysis_results', 'type': 'STRING', 'description': '分析结果。'}, {'name': 'demand_results', 'type': 'STRING', 'description': '市场需求结果。'}], 'optional_parameters': [], 'return_data': [{'name': 'career_advice', 'description': '职业规划建议。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解互联网经济的就业前景。首先，获取最新的互联网行业就业报告。接着，分析报告中提到的热门职位和薪资水平。然后，查询当前市场上对这些职位的需求情况。最后，基于这些信息，提供一些职业规划建议。"
            }
        ]
    },
    "354": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "MarketResearch.get_market_share_data",
                "FinancialAnalysis.analyze_revenue_changes",
                "ConsumerSurvey.get_satisfaction_data",
                "Consulting.provide_industry_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "MarketResearch.get_market_share_data",
                "args": {
                    "query": "Uber and Lyft market share growth"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialAnalysis.analyze_revenue_changes",
                "args": {
                    "query": "Traditional taxi industry revenue changes"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ConsumerSurvey.get_satisfaction_data",
                "args": {
                    "query": "Consumer satisfaction with Uber, Lyft, and traditional taxis"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Consulting.provide_industry_recommendations",
                "args": {
                    "data": "Market share growth, revenue changes, and consumer satisfaction data"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}], ['MarketResearch.get_market_share_data', {'name': 'MarketResearch.get_market_share_data', 'description': 'Get market share data for specified companies', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'market_share', 'description': 'market share data of the companies'}]}], ['FinancialAnalysis.analyze_revenue_changes', {'name': 'FinancialAnalysis.analyze_revenue_changes', 'description': 'Analyze revenue changes for specified industries', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'revenue_changes', 'description': 'revenue changes data of the industries'}]}], ['ConsumerSurvey.get_satisfaction_data', {'name': 'ConsumerSurvey.get_satisfaction_data', 'description': 'Get consumer satisfaction data for specified services', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'satisfaction_data', 'description': 'consumer satisfaction data of the services'}]}], ['Consulting.provide_industry_recommendations', {'name': 'Consulting.provide_industry_recommendations', 'description': 'Provide industry recommendations based on provided data', 'required_parameters': [{'name': 'data', 'description': 'data to base recommendations on', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'industry recommendations based on the data'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想探究共享经济对传统出租车行业的影响。首先，获取共享经济平台（如Uber和Lyft）的市场份额增长数据。接着，分析传统出租车行业的收入变化情况。然后，获取消费者对共享经济和传统出租车的满意度调查数据。最后，基于这些数据，提供一些关于传统出租车行业转型的建议。"
            }
        ]
    },
    "40": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "InsuranceData.get_renewal_data",
                "InsuranceData.analyze_churn_reasons",
                "MarketingData.get_campaign_effectiveness",
                "Email.send"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "InsuranceData.get_renewal_data",
                "args": {
                    "productId": "YHJKL12345"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "InsuranceData.analyze_churn_reasons",
                "args": {
                    "renewalData": "renewal_data_from_api_0"
                }
            },
            {
                "id": 2,
                "prev": [],
                "name": "MarketingData.get_campaign_effectiveness",
                "args": {
                    "productId": "YHJKL12345"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "Email.send",
                "args": {
                    "address": "analyst@example.com",
                    "title": "Customer Loyalty Analysis Report",
                    "body": "Here is the analysis report for the customer loyalty of the YHJKL12345 product:\n\n1. Renewal Data Summary\n2. Churn Reasons Analysis\n3. Marketing Campaign Effectiveness\n\nPlease find the attached file for detailed information.",
                    "attachment": "/path/to/analysis_report.pdf"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['InsuranceData.get_renewal_data', {'name': 'InsuranceData.get_renewal_data', 'description': 'Retrieve renewal data for a specific insurance product.', 'required_parameters': [{'name': 'productId', 'description': 'The ID of the insurance product.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'renewalData', 'description': 'The renewal data of the product.'}]}], ['InsuranceData.analyze_churn_reasons', {'name': 'InsuranceData.analyze_churn_reasons', 'description': 'Analyze the reasons for customer churn based on the provided renewal data.', 'required_parameters': [{'name': 'renewalData', 'description': 'The renewal data to analyze.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'churnReasons', 'description': 'The analyzed reasons for customer churn.'}]}], ['MarketingData.get_campaign_effectiveness', {'name': 'MarketingData.get_campaign_effectiveness', 'description': 'Retrieve the effectiveness data of marketing campaigns for a specific insurance product.', 'required_parameters': [{'name': 'productId', 'description': 'The ID of the insurance product.', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'campaignEffectiveness', 'description': 'The effectiveness data of the marketing campaigns.'}]}], ['Email.send', {'name': 'Email.send', 'description': 'send email', 'required_parameters': [{'name': 'address', 'description': 'the email address to send', 'type': 'STRING'}, {'name': 'title', 'description': 'title of email, not NULL', 'type': 'STRING'}], 'optional_parameters': [{'name': 'body', 'description': 'the content of the email', 'type': 'STRING'}, {'name': 'attachment', 'description': 'path of the attachment file', 'type': 'STRING'}], 'return_data': [{'name': 'state', 'description': 'the state of sending email'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要评估某款养老健康险产品的客户忠诚度。首先，获取该产品在过去一年内的续保数据。然后，分析续保数据中的客户流失原因。接着，获取该产品的市场推广效果数据。最后，提供基于客户忠诚度的改进建议。"
            }
        ]
    },
    "92": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "FinancialInstitution.get_compliance_report",
                "FinancialInstitution.analyze_compliance_report",
                "FinancialInstitution.query_compliance_violations",
                "FinancialInstitution.evaluate_compliance_management"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "FinancialInstitution.get_compliance_report",
                "args": {
                    "institution_name": "GlobalBank"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "FinancialInstitution.analyze_compliance_report",
                "args": {
                    "report_id": 12345
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "FinancialInstitution.query_compliance_violations",
                "args": {
                    "institution_name": "GlobalBank",
                    "time_period": "last_year"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinancialInstitution.evaluate_compliance_management",
                "args": {
                    "institution_name": "GlobalBank",
                    "risk_points": [
                        "data_privacy",
                        "anti_money_laundering"
                    ],
                    "violations": [
                        "data_breach",
                        "AML_violation"
                    ]
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['FinancialInstitution.get_compliance_report', {'name': 'FinancialInstitution.get_compliance_report', 'description': '获取金融机构的最新合规报告', 'required_parameters': [{'name': 'institution_name', 'description': '金融机构的名称', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'report_id', 'description': '合规报告的ID'}]}], ['FinancialInstitution.analyze_compliance_report', {'name': 'FinancialInstitution.analyze_compliance_report', 'description': '分析合规报告中的主要合规风险点', 'required_parameters': [{'name': 'report_id', 'type': 'NUMBER', 'description': '合规报告的ID'}], 'optional_parameters': [], 'return_data': [{'name': 'risk_points', 'description': '主要合规风险点列表'}]}], ['FinancialInstitution.query_compliance_violations', {'name': 'FinancialInstitution.query_compliance_violations', 'description': '查询金融机构在过去一年内的合规违规记录', 'required_parameters': [{'name': 'institution_name', 'type': 'STRING', 'description': '金融机构的名称'}, {'name': 'time_period', 'type': 'STRING', 'description': '时间周期，例如：last_year'}], 'optional_parameters': [], 'return_data': [{'name': 'violations', 'description': '合规违规记录列表'}]}], ['FinancialInstitution.evaluate_compliance_management', {'name': 'FinancialInstitution.evaluate_compliance_management', 'description': '基于合规报告和违规记录评估金融机构的合规管理水平', 'required_parameters': [{'name': 'institution_name', 'type': 'STRING', 'description': '金融机构的名称'}, {'name': 'risk_points', 'type': 'LIST', 'description': '主要合规风险点列表'}, {'name': 'violations', 'type': 'LIST', 'description': '合规违规记录列表'}], 'optional_parameters': [], 'return_data': [{'name': 'compliance_level', 'description': '合规管理水平评估结果'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解一家金融机构的合规情况。首先，获取该机构最新的合规报告。然后，分析报告中提到的主要合规风险点。接着，查询该机构在过去一年内是否有任何合规违规记录。最后，基于这些信息，评估该机构的合规管理水平。"
            }
        ]
    },
    "195": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaFinance.get_partner_report",
                "ChinaFinance.get_partner_count",
                "ChinaFinance.get_real_time_partner_info",
                "ChinaFinance.analyze_partner_relationships",
                "ChinaFinance.suggest_partners"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaFinance.get_partner_report",
                "args": {
                    "year": "2024",
                    "companyType": "消费金融贷款公司"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_partner_count",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ChinaFinance.get_partner_count",
                "args": {
                    "companyName": "京东金融"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "ChinaFinance.analyze_partner_relationships",
                "args": {
                    "company1": "蚂蚁金服",
                    "company2": "京东金融"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "ChinaFinance.get_real_time_partner_info",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "ChinaFinance.suggest_partners",
                "args": {
                    "companyName": "蚂蚁金服"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaFinance.get_partner_report', {'name': 'ChinaFinance.get_partner_report', 'description': '获取指定年份和公司类型的合作伙伴关系研究报告', 'required_parameters': [{'name': 'year', 'type': 'STRING', 'description': '报告的年份'}, {'name': 'companyType', 'type': 'STRING', 'description': '公司类型'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': '合作伙伴关系研究报告'}]}], ['ChinaFinance.get_partner_count', {'name': 'ChinaFinance.get_partner_count', 'description': '获取指定公司的合作伙伴数量', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'partnerCount', 'description': '合作伙伴数量'}]}], ['ChinaFinance.get_real_time_partner_info', {'name': 'ChinaFinance.get_real_time_partner_info', 'description': '获取指定公司的实时合作伙伴动态信息', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'partnerInfo', 'description': '实时合作伙伴动态信息'}]}], ['ChinaFinance.analyze_partner_relationships', {'name': 'ChinaFinance.analyze_partner_relationships', 'description': '对比分析两家公司的合作伙伴关系', 'required_parameters': [{'name': 'company1', 'type': 'STRING', 'description': '第一家公司名称'}, {'name': 'company2', 'type': 'STRING', 'description': '第二家公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'analysisResult', 'description': '合作伙伴关系对比分析结果'}]}], ['ChinaFinance.suggest_partners', {'name': 'ChinaFinance.suggest_partners', 'description': '基于合作伙伴关系分析，提供合作伙伴建议', 'required_parameters': [{'name': 'companyName', 'type': 'STRING', 'description': '公司名称'}], 'optional_parameters': [], 'return_data': [{'name': 'partnerSuggestions', 'description': '合作伙伴建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国消费金融贷款公司的合作伙伴关系。首先，请提供2024年中国消费金融贷款公司的合作伙伴关系研究报告。然后，获取蚂蚁金服与京东金融的合作伙伴数量进行对比分析。接着，获取蚂蚁金服的实时合作伙伴动态信息。最后，基于合作伙伴关系分析，提供一些合作伙伴建议。"
            }
        ]
    },
    "140": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_ticker_news",
                "ArxivSearch.get_arxiv_article_information",
                "StockInvestment.get_research_report",
                "StockInvestment.get_successful_cases",
                "StockInvestment.get_practical_tools"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "StockInvestment.get_research_report",
                "args": {
                    "topic": "financial education impact on stock investment"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "StockInvestment.get_successful_cases",
                "args": {
                    "educationType": "financial"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "StockInvestment.get_practical_tools",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['ArxivSearch.get_arxiv_article_information', {'name': 'ArxivSearch.get_arxiv_article_information', 'description': 'Run Arxiv search and get the article meta information.', 'required_parameters': [{'name': 'query', 'type': 'STRING', 'description': 'the content of search query'}], 'optional_parameters': [], 'return_data': [{'name': 'content', 'description': 'a list of 3 arxiv search papers, including published date, title, authors, and summary'}]}], ['StockInvestment.get_research_report', {'name': 'StockInvestment.get_research_report', 'description': 'Retrieve research reports on a specific topic related to stock investment.', 'required_parameters': [{'name': 'topic', 'type': 'STRING', 'description': 'The topic of the research report.'}], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'The research report content.'}]}], ['StockInvestment.get_successful_cases', {'name': 'StockInvestment.get_successful_cases', 'description': 'Get successful cases of stock investment based on specific education types.', 'required_parameters': [{'name': 'educationType', 'type': 'STRING', 'description': 'The type of education used in the cases.'}], 'optional_parameters': [], 'return_data': [{'name': 'cases', 'description': 'A list of successful cases.'}]}], ['StockInvestment.get_practical_tools', {'name': 'StockInvestment.get_practical_tools', 'description': 'Retrieve practical tools for stock investment.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tools', 'description': 'A list of practical tools for stock investment.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解金融教育对股票投资的影响。首先，请获取关于股票投资的研究报告。然后，获取一些通过金融教育成功进行股票投资的案例。接着，获取一些股票投资的实用工具。最后，基于这些信息，为我提供一些股票投资的建议。"
            }
        ]
    },
    "61": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "BoxOffice.get_latest_data",
                "BoxOffice.analyze_policy_impact",
                "BoxOffice.compare_policy_changes",
                "BoxOffice.predict_industry_trends"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "BoxOffice.get_latest_data",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "BoxOffice.analyze_policy_impact",
                "args": {
                    "latest_data": "BoxOffice.get_latest_data"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "BoxOffice.compare_policy_changes",
                "args": {
                    "analysis_result": "BoxOffice.analyze_policy_impact"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "BoxOffice.predict_industry_trends",
                "args": {
                    "comparison_result": "BoxOffice.compare_policy_changes"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['BoxOffice.get_latest_data', {'name': 'BoxOffice.get_latest_data', 'description': '获取最新的电影票房数据。', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'box_office_data', 'description': '最新的电影票房数据，包含电影名称、票房收入、上映日期等信息。'}]}], ['BoxOffice.analyze_policy_impact', {'name': 'BoxOffice.analyze_policy_impact', 'description': '分析货币政策调整对电影产业的即时反应。', 'required_parameters': [{'name': 'latest_data', 'type': 'STRING', 'description': '最新的电影票房数据。'}], 'optional_parameters': [], 'return_data': [{'name': 'impact_analysis', 'description': '货币政策调整对电影产业的即时反应分析结果。'}]}], ['BoxOffice.compare_policy_changes', {'name': 'BoxOffice.compare_policy_changes', 'description': '比较不同货币政策下的电影票房变化。', 'required_parameters': [{'name': 'analysis_result', 'type': 'STRING', 'description': '货币政策调整对电影产业的即时反应分析结果。'}], 'optional_parameters': [], 'return_data': [{'name': 'comparison_result', 'description': '不同货币政策下的电影票房变化比较结果。'}]}], ['BoxOffice.predict_industry_trends', {'name': 'BoxOffice.predict_industry_trends', 'description': '基于分析结果预测电影产业的未来趋势。', 'required_parameters': [{'name': 'comparison_result', 'type': 'STRING', 'description': '不同货币政策下的电影票房变化比较结果。'}], 'optional_parameters': [], 'return_data': [{'name': 'industry_prediction', 'description': '基于分析结果的电影产业未来趋势预测。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解当前的货币政策对电影产业的影响。首先，请获取最新的电影票房数据。然后，分析货币政策调整对电影产业的即时反应。接下来，比较不同货币政策下的电影票房变化。最后，请提供基于分析的电影产业预测。"
            }
        ]
    },
    "362": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "GoogleScholar.search_google_scholar",
                "TaxDepartment.get_tax_contribution_data",
                "Government.analyze_tax_revenue_change",
                "TaxDepartment.get_policy_feedback"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "GoogleScholar.search_google_scholar",
                "args": {
                    "query": "共享经济 税收政策"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxDepartment.get_tax_contribution_data",
                "args": {
                    "platform": "Airbnb"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxDepartment.get_tax_contribution_data",
                "args": {
                    "platform": "Uber"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "Government.analyze_tax_revenue_change",
                "args": {
                    "platforms": [
                        "Airbnb",
                        "Uber"
                    ]
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "TaxDepartment.get_policy_feedback",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['GoogleScholar.search_google_scholar', {'name': 'GoogleScholar.search_google_scholar', 'description': 'Search for scholarly articles on Google Scholar', 'required_parameters': [{'name': 'query', 'description': 'search query content', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'title', 'description': 'list of the titles of papers'}, {'name': 'cited_by', 'description': 'citation number of papers'}, {'name': 'organic_id', 'description': \"list of organic results' ids of the papers\"}, {'name': 'snipets', 'description': 'snippets of the papers'}, {'name': 'pub_info', 'description': 'publication information of selected papers'}]}],\n['TaxDepartment.get_tax_contribution_data', {'name': 'TaxDepartment.get_tax_contribution_data', 'description': 'Get tax contribution data for specific shared economy platforms', 'required_parameters': [{'name': 'platform', 'description': 'name of the shared economy platform', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'tax_contribution', 'description': 'tax contribution data of the platform'}]}],\n['Government.analyze_tax_revenue_change', {'name': 'Government.analyze_tax_revenue_change', 'description': 'Analyze the change in government tax revenue due to shared economy platforms', 'required_parameters': [{'name': 'platforms', 'description': 'list of shared economy platforms', 'type': 'LIST'}], 'optional_parameters': [], 'return_data': [{'name': 'tax_revenue_change', 'description': 'change in tax revenue data'}]}],\n['TaxDepartment.get_policy_feedback', {'name': 'TaxDepartment.get_policy_feedback', 'description': 'Get feedback from tax departments on shared economy policies', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'policy_feedback', 'description': 'feedback data from tax departments'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解共享经济对税收政策的影响。首先，获取共享经济平台（如Airbnb和Uber）的税收贡献数据。接着，分析政府税收收入的变化情况。然后，获取税务部门对共享经济的政策反馈数据。最后，基于这些数据，提供一些关于税收政策调整的建议。"
            }
        ]
    },
    "328": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TaxCommunityService.get_latest_updates",
                "TaxCommunityService.get_participation_data",
                "TaxCommunityService.get_tool_usage",
                "TaxCommunityService.generate_service_suggestions"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaxCommunityService.get_latest_updates",
                "args": {
                    "year": "2024"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxCommunityService.get_participation_data",
                "args": {
                    "year": "2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxCommunityService.get_tool_usage",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TaxCommunityService.generate_service_suggestions",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TaxCommunityService.get_latest_updates', {'name': 'TaxCommunityService.get_latest_updates', 'description': '获取中国居民税务社区服务的最新动态', 'required_parameters': [{'name': 'year', 'description': '查询的年份', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'updates', 'description': '最新动态的列表'}]}],\n['TaxCommunityService.get_participation_data', {'name': 'TaxCommunityService.get_participation_data', 'description': '获取过去一年中国居民税务社区服务的参与数据', 'required_parameters': [{'name': 'year', 'description': '查询的年份', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'participation_data', 'description': '参与数据的列表'}]}],\n['TaxCommunityService.get_tool_usage', {'name': 'TaxCommunityService.get_tool_usage', 'description': '获取当前税务社区服务工具的使用情况', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tool_usage', 'description': '工具使用情况的列表'}]}],\n['TaxCommunityService.generate_service_suggestions', {'name': 'TaxCommunityService.generate_service_suggestions', 'description': '基于动态和参与数据，提供一些服务建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '服务建议的列表'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国居民的税务社区服务。首先，请提供2024年中国居民税务社区服务的最新动态。然后，获取过去一年中国居民税务社区服务的参与数据。接着，获取当前税务社区服务工具的使用情况。最后，基于动态和参与数据，提供一些服务建议。"
            }
        ]
    },
    "470": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "EconomyAPI.get_marketing_data",
                "CompanyAPI.get_marketing_case",
                "MarketingAPI.get_marketing_strategy",
                "MarketingAPI.get_marketing_advice"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "category": "marketing",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "EconomyAPI.get_marketing_data",
                "args": {
                    "sectors": [
                        "manufacturing",
                        "services"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CompanyAPI.get_marketing_case",
                "args": {
                    "companies": [
                        "Apple",
                        "Walmart",
                        "IBM"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketingAPI.get_marketing_strategy",
                "args": {
                    "cases": [
                        "Apple",
                        "Walmart",
                        "IBM"
                    ]
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "MarketingAPI.get_marketing_advice",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': 'Get recent news articles within a specified time range.', 'required_parameters': [{'name': 'category', 'type': 'STRING', 'description': 'the category of news'}], 'optional_parameters': [{'name': 'time_range', 'type': 'STRING', 'description': 'the time range for the news, e.g., 1 year'}]}], ['EconomyAPI.get_marketing_data', {'name': 'EconomyAPI.get_marketing_data', 'description': 'Get marketing investment data for specified economic sectors.', 'required_parameters': [{'name': 'sectors', 'type': 'LIST', 'description': 'the list of sectors'}], 'optional_parameters': []}], ['CompanyAPI.get_marketing_case', {'name': 'CompanyAPI.get_marketing_case', 'description': 'Get marketing cases for specified companies.', 'required_parameters': [{'name': 'companies', 'type': 'LIST', 'description': 'the list of company names'}], 'optional_parameters': []}], ['MarketingAPI.get_marketing_strategy', {'name': 'MarketingAPI.get_marketing_strategy', 'description': 'Analyze marketing strategies based on provided cases.', 'required_parameters': [{'name': 'cases', 'type': 'LIST', 'description': 'the list of marketing cases'}], 'optional_parameters': []}], ['MarketingAPI.get_marketing_advice', {'name': 'MarketingAPI.get_marketing_advice', 'description': 'Provide advice on effective marketing strategies for the real economy.', 'required_parameters': [], 'optional_parameters': []}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解实体经济的营销情况。首先，获取最近一年的营销新闻。接着，提供制造业和服务业的营销投入数据。然后，请获取一些知名实体企业的营销案例，并分析其营销策略。最后，提供一些关于如何在实体经济中进行有效营销的建议。"
            }
        ]
    },
    "348": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TwitterAnalytics.get_user_growth_data",
                "TwitterAnalytics.analyze_user_growth_speed",
                "TwitterAnalytics.analyze_user_retention_rate",
                "TwitterAnalytics.evaluate_user_growth_model",
                "TwitterAnalytics.generate_user_growth_report"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TwitterAnalytics.get_user_growth_data",
                "args": {
                    "duration": "5 years"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TwitterAnalytics.analyze_user_growth_speed",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TwitterAnalytics.analyze_user_retention_rate",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "TwitterAnalytics.evaluate_user_growth_model",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "TwitterAnalytics.generate_user_growth_report",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TwitterAnalytics.get_user_growth_data', {'name': 'TwitterAnalytics.get_user_growth_data', 'description': 'Get user growth data for a specified duration', 'required_parameters': [{'name': 'duration', 'description': 'duration for which user growth data is required', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'user_growth_data', 'description': 'user growth data for the specified duration'}]}],\n['TwitterAnalytics.analyze_user_growth_speed', {'name': 'TwitterAnalytics.analyze_user_growth_speed', 'description': 'Analyze the speed of user growth', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'growth_speed', 'description': 'speed of user growth'}]}],\n['TwitterAnalytics.analyze_user_retention_rate', {'name': 'TwitterAnalytics.analyze_user_retention_rate', 'description': 'Analyze the user retention rate', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retention_rate', 'description': 'user retention rate'}]}],\n['TwitterAnalytics.evaluate_user_growth_model', {'name': 'TwitterAnalytics.evaluate_user_growth_model', 'description': 'Evaluate the effectiveness of user growth strategies using a user growth model', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'model_evaluation', 'description': 'evaluation of user growth model'}]}],\n['TwitterAnalytics.generate_user_growth_report', {'name': 'TwitterAnalytics.generate_user_growth_report', 'description': 'Generate a report based on the evaluation of user growth strategies', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'report', 'description': 'user growth strategy report'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想评估Twitter公司的用户增长策略。首先，请获取Twitter公司近五年的用户增长数据。然后，分析其用户增长速度和用户留存率。接下来，使用用户增长模型评估其用户增长策略的有效性。最后，提供一个基于评估的用户增长策略报告。"
            }
        ]
    },
    "177": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "CurrencyExchange.get_historical_rates",
                "CentralBank.get_policy_analysis",
                "CurrencyExchange.get_real_time_volume",
                "MarketSentiment.analyze_data"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "CurrencyExchange.get_historical_rates",
                "args": {
                    "currency_pair": "CAD/USD",
                    "time_period": "6_months"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CentralBank.get_policy_analysis",
                "args": {
                    "central_bank": "Bank of Canada",
                    "time_period": "6_months"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CurrencyExchange.get_real_time_volume",
                "args": {
                    "currency_pair": "CAD/USD"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "MarketSentiment.analyze_data",
                "args": {
                    "historical_rates": "from_id_0",
                    "policy_analysis": "from_id_1",
                    "real_time_volume": "from_id_2"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['CurrencyExchange.get_historical_rates', {'name': 'CurrencyExchange.get_historical_rates', 'description': '获取指定货币对在过去指定时间段内的每日汇率数据', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': '货币对，例如CAD/USD'}, {'name': 'time_period', 'type': 'STRING', 'description': '时间段，例如6_months'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': '每日汇率数据列表'}]}], ['CentralBank.get_policy_analysis', {'name': 'CentralBank.get_policy_analysis', 'description': '获取指定中央银行在过去指定时间段内的政策分析', 'required_parameters': [{'name': 'central_bank', 'type': 'STRING', 'description': '中央银行名称，例如Bank of Canada'}, {'name': 'time_period', 'type': 'STRING', 'description': '时间段，例如6_months'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': '政策分析报告'}]}], ['CurrencyExchange.get_real_time_volume', {'name': 'CurrencyExchange.get_real_time_volume', 'description': '获取指定货币对的实时交易量', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': '货币对，例如CAD/USD'}], 'optional_parameters': [], 'return_data': [{'name': 'volume', 'description': '实时交易量数据'}]}], ['MarketSentiment.analyze_data', {'name': 'MarketSentiment.analyze_data', 'description': '分析历史汇率、政策分析和实时交易量数据以评估市场情绪', 'required_parameters': [{'name': 'historical_rates', 'type': 'STRING', 'description': '历史汇率数据来源'}, {'name': 'policy_analysis', 'type': 'STRING', 'description': '政策分析数据来源'}, {'name': 'real_time_volume', 'type': 'STRING', 'description': '实时交易量数据来源'}], 'optional_parameters': [], 'return_data': [{'name': 'sentiment', 'description': '市场情绪分析结果'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估加元兑美元汇率的市场情绪。首先，请获取加元兑美元汇率在过去六个月内的每日价格数据。然后，获取加拿大央行政策对汇率的影响分析。接下来，获取加元兑美元的实时交易量。最后，请分析这些数据以评估市场情绪。"
            }
        ]
    },
    "20": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "KPMG.get_risk_management_history",
                "Deloitte.get_risk_management_history",
                "KPMG.get_real_time_risk_management_data",
                "Deloitte.get_real_time_risk_management_data",
                "MarketAnalysis.analyze_market_performance",
                "InvestmentStrategy.generate_strategy"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "KPMG.get_risk_management_history",
                "args": {
                    "year": 2022
                }
            },
            {
                "id": 1,
                "prev": [],
                "name": "Deloitte.get_risk_management_history",
                "args": {
                    "year": 2022
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "KPMG.get_real_time_risk_management_data",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    1
                ],
                "name": "Deloitte.get_real_time_risk_management_data",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "MarketAnalysis.analyze_market_performance",
                "args": {
                    "kpmg_data": "KPMG_REAL_TIME_DATA",
                    "deloitte_data": "DELOITTE_REAL_TIME_DATA"
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "InvestmentStrategy.generate_strategy",
                "args": {
                    "analysis_result": "MARKET_PERFORMANCE_ANALYSIS"
                }
            },
            {
                "id": 6,
                "prev": [
                    5
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['KPMG.get_risk_management_history', {'name': 'KPMG.get_risk_management_history', 'description': 'Retrieve historical risk management service data from KPMG for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'The historical risk management service data for the specified year.'}]}], ['Deloitte.get_risk_management_history', {'name': 'Deloitte.get_risk_management_history', 'description': 'Retrieve historical risk management service data from Deloitte for a specified year.', 'required_parameters': [{'name': 'year', 'type': 'NUMBER', 'description': 'The year for which historical data is required.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'The historical risk management service data for the specified year.'}]}], ['KPMG.get_real_time_risk_management_data', {'name': 'KPMG.get_real_time_risk_management_data', 'description': 'Retrieve real-time risk management service data from KPMG.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'The real-time risk management service data.'}]}], ['Deloitte.get_real_time_risk_management_data', {'name': 'Deloitte.get_real_time_risk_management_data', 'description': 'Retrieve real-time risk management service data from Deloitte.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'The real-time risk management service data.'}]}], ['MarketAnalysis.analyze_market_performance', {'name': 'MarketAnalysis.analyze_market_performance', 'description': 'Analyze the market performance of risk management services based on provided data.', 'required_parameters': [{'name': 'kpmg_data', 'type': 'STRING', 'description': 'The real-time data from KPMG.'}, {'name': 'deloitte_data', 'type': 'STRING', 'description': 'The real-time data from Deloitte.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis_result', 'description': 'The analysis result of the market performance.'}]}], ['InvestmentStrategy.generate_strategy', {'name': 'InvestmentStrategy.generate_strategy', 'description': 'Generate an investment strategy based on the market analysis result.', 'required_parameters': [{'name': 'analysis_result', 'type': 'STRING', 'description': 'The result of the market performance analysis.'}], 'optional_parameters': [], 'return_data': [{'name': 'strategy', 'description': 'The generated investment strategy.'}]}]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解当前的金融科技风险管理趋势。首先，获取KPMG和Deloitte过去一年的风险管理服务历史数据。然后，获取当前KPMG和Deloitte的实时风险管理服务数据。接着，分析这两种风险管理服务的市场表现。最后，基于分析结果，提供一个金融科技风险管理投资策略建议。"
            }
        ]
    },
    "331": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ChinaTaxPolicy.get_latest_policy",
                "ChinaTaxPolicy.get_case_data",
                "ChinaTaxPolicy.get_tool_usage",
                "ChinaTaxPolicy.analyze_and_suggest"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ChinaTaxPolicy.get_latest_policy",
                "args": {
                    "year": "2024"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "ChinaTaxPolicy.get_case_data",
                "args": {
                    "year": "2023"
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "ChinaTaxPolicy.get_tool_usage",
                "args": {}
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "ChinaTaxPolicy.analyze_and_suggest",
                "args": {}
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ChinaTaxPolicy.get_latest_policy', {'name': 'ChinaTaxPolicy.get_latest_policy', 'description': '获取中国居民税务社会治理的最新政策', 'required_parameters': [{'name': 'year', 'description': '政策发布的年份', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'policy_content', 'description': '最新政策的详细内容'}]}],\n['ChinaTaxPolicy.get_case_data', {'name': 'ChinaTaxPolicy.get_case_data', 'description': '获取过去一年中国居民税务社会治理的案例数据', 'required_parameters': [{'name': 'year', 'description': '案例数据的年份', 'type': 'STRING'}], 'optional_parameters': [], 'return_data': [{'name': 'case_data', 'description': '案例数据的详细内容'}]}],\n['ChinaTaxPolicy.get_tool_usage', {'name': 'ChinaTaxPolicy.get_tool_usage', 'description': '获取当前税务社会治理工具的使用情况', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'tool_usage', 'description': '工具使用情况的详细内容'}]}],\n['ChinaTaxPolicy.analyze_and_suggest', {'name': 'ChinaTaxPolicy.analyze_and_suggest', 'description': '基于政策和案例分析，提供治理建议', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'suggestions', 'description': '治理建议的详细内容'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。"
            },
            {
                "role": "user",
                "content": "我想了解中国居民的税务社会治理。首先，请提供2024年中国居民税务社会治理的最新政策。然后，获取过去一年中国居民税务社会治理的案例数据。接着，获取当前税务社会治理工具的使用情况。最后，基于政策和案例分析，提供一些治理建议。"
            }
        ]
    },
    "249": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "PolygonFinance.get_ticker_news",
                "PolygonFinance.get_currency_exchange_rate",
                "PolygonFinance.get_index_data",
                "PolygonFinance.get_market_analysis"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "PolygonFinance.get_ticker_news",
                "args": {
                    "ticker": "ECB"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "PolygonFinance.get_currency_exchange_rate",
                "args": {
                    "from_currency": "EUR",
                    "to_currency": "USD",
                    "days": 7
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "PolygonFinance.get_index_data",
                "args": {
                    "index": "DAX"
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "PolygonFinance.get_market_analysis",
                "args": {
                    "index": "DAX",
                    "policy_change": "ECB"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['PolygonFinance.get_ticker_news', {'name': 'PolygonFinance.get_ticker_news', 'description': 'get the most recent news articles relating to a stock ticker symbol', 'required_parameters': [], 'optional_parameters': [{'name': 'ticker', 'type': 'STRING', 'description': 'Return results that contain this ticker'}], 'return_data': [{'name': 'results', 'description': 'A list of news including title, summary, and author'}]}], ['PolygonFinance.get_currency_exchange_rate', {'name': 'PolygonFinance.get_currency_exchange_rate', 'description': 'get the exchange rate between two currencies over a specified number of days', 'required_parameters': [{'name': 'from_currency', 'type': 'STRING', 'description': 'The currency to convert from'}, {'name': 'to_currency', 'type': 'STRING', 'description': 'The currency to convert to'}, {'name': 'days', 'type': 'NUMBER', 'description': 'The number of days to retrieve data for'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': 'A list of exchange rates over the specified days'}]}], ['PolygonFinance.get_index_data', {'name': 'PolygonFinance.get_index_data', 'description': 'get the current data for a specified stock market index', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The stock market index to retrieve data for'}], 'optional_parameters': [], 'return_data': [{'name': 'current_value', 'description': 'The current value of the index'}, {'name': 'change', 'description': 'The change in value from the previous close'}]}], ['PolygonFinance.get_market_analysis', {'name': 'PolygonFinance.get_market_analysis', 'description': 'get an analysis of the market impact of a specified policy change on a specified index', 'required_parameters': [{'name': 'index', 'type': 'STRING', 'description': 'The stock market index to analyze'}, {'name': 'policy_change', 'type': 'STRING', 'description': 'The policy change to analyze the impact of'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'A detailed analysis of the market impact'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想了解近期与欧洲央行政策有关的市场波动。首先，获取最近欧洲央行政策发布的新闻和市场反应分析。接着，提供过去七天内欧元兑美元汇率的波动情况。然后，获取德国DAX指数的实时数据。最后，请基于政策变化和市场波动，提供一些针对德国DAX指数的投资建议。"
            }
        ]
    },
    "219": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "TaxAdvisor.get_current_income",
                "TaxAdvisor.get_retirement_age",
                "TaxAdvisor.get_retirement_income_tax_policy",
                "TaxAdvisor.get_property_tax_policy",
                "TaxAdvisor.generate_retirement_tax_plan"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "TaxAdvisor.get_current_income",
                "args": {}
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "TaxAdvisor.get_retirement_age",
                "args": {}
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "TaxAdvisor.get_retirement_income_tax_policy",
                "args": {
                    "region": "California"
                }
            },
            {
                "id": 3,
                "prev": [
                    1
                ],
                "name": "TaxAdvisor.get_property_tax_policy",
                "args": {
                    "region": "California"
                }
            },
            {
                "id": 4,
                "prev": [
                    2,
                    3
                ],
                "name": "TaxAdvisor.generate_retirement_tax_plan",
                "args": {
                    "currentIncome": 100000,
                    "retirementAge": 65,
                    "retirementIncomeTaxPolicy": "...",
                    "propertyTaxPolicy": "..."
                }
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['TaxAdvisor.get_current_income', {'name': 'TaxAdvisor.get_current_income', 'description': '获取用户当前的收入信息', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'currentIncome', 'description': '用户当前的年收入'}]}], ['TaxAdvisor.get_retirement_age', {'name': 'TaxAdvisor.get_retirement_age', 'description': '获取用户预计的退休年龄', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'retirementAge', 'description': '用户预计的退休年龄'}]}], ['TaxAdvisor.get_retirement_income_tax_policy', {'name': 'TaxAdvisor.get_retirement_income_tax_policy', 'description': '获取用户所在地区的退休收入税收政策', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': '用户所在地区'}], 'optional_parameters': [], 'return_data': [{'name': 'retirementIncomeTaxPolicy', 'description': '退休收入的税收政策'}]}], ['TaxAdvisor.get_property_tax_policy', {'name': 'TaxAdvisor.get_property_tax_policy', 'description': '获取用户所在地区的财产税政策', 'required_parameters': [{'name': 'region', 'type': 'STRING', 'description': '用户所在地区'}], 'optional_parameters': [], 'return_data': [{'name': 'propertyTaxPolicy', 'description': '财产税政策'}]}], ['TaxAdvisor.generate_retirement_tax_plan', {'name': 'TaxAdvisor.generate_retirement_tax_plan', 'description': '基于用户当前收入、退休年龄、退休收入税收政策和财产税政策，生成退休税收规划建议', 'required_parameters': [{'name': 'currentIncome', 'type': 'NUMBER', 'description': '用户当前的年收入'}, {'name': 'retirementAge', 'type': 'NUMBER', 'description': '用户预计的退休年龄'}, {'name': 'retirementIncomeTaxPolicy', 'type': 'STRING', 'description': '退休收入的税收政策'}, {'name': 'propertyTaxPolicy', 'type': 'STRING', 'description': '财产税政策'}], 'optional_parameters': [], 'return_data': [{'name': 'retirementTaxPlan', 'description': '退休税收规划建议'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解退休后的税收影响。首先，获取我当前的收入和预计退休年龄。然后，获取我所在地区的退休收入税收政策。接着，获取我所在地区的财产税政策。最后，提供一个基于这些数据的退休税收规划建议。"
            }
        ]
    },
    "173": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "ForexData.get_historical_rates",
                "CentralBank.get_policy_analysis",
                "ForexData.get_real_time_volume",
                "MarketAnalysis.evaluate_sentiment"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "ForexData.get_historical_rates",
                "args": {
                    "currency_pair": "AUD/USD",
                    "time_period": "6 months"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "CentralBank.get_policy_analysis",
                "args": {
                    "bank": "RBA",
                    "currency_pair": "AUD/USD"
                }
            },
            {
                "id": 2,
                "prev": [
                    0
                ],
                "name": "ForexData.get_real_time_volume",
                "args": {
                    "currency_pair": "AUD/USD"
                }
            },
            {
                "id": 3,
                "prev": [
                    1,
                    2
                ],
                "name": "MarketAnalysis.evaluate_sentiment",
                "args": {
                    "historical_data": "from_id_0",
                    "policy_analysis": "from_id_1",
                    "real_time_volume": "from_id_2"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['ForexData.get_historical_rates', {'name': 'ForexData.get_historical_rates', 'description': '获取指定货币对在过去指定时间段内的每日汇率数据。', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': '货币对，例如AUD/USD。'}, {'name': 'time_period', 'type': 'STRING', 'description': '时间周期，例如6 months。'}], 'optional_parameters': [], 'return_data': [{'name': 'rates', 'description': '每日汇率数据列表。'}]}], ['CentralBank.get_policy_analysis', {'name': 'CentralBank.get_policy_analysis', 'description': '获取中央银行政策对指定货币对的影响分析。', 'required_parameters': [{'name': 'bank', 'type': 'STRING', 'description': '中央银行名称，例如RBA。'}, {'name': 'currency_pair', 'type': 'STRING', 'description': '货币对，例如AUD/USD。'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': '政策影响分析报告。'}]}], ['ForexData.get_real_time_volume', {'name': 'ForexData.get_real_time_volume', 'description': '获取指定货币对的实时交易量。', 'required_parameters': [{'name': 'currency_pair', 'type': 'STRING', 'description': '货币对，例如AUD/USD。'}], 'optional_parameters': [], 'return_data': [{'name': 'volume', 'description': '实时交易量数据。'}]}], ['MarketAnalysis.evaluate_sentiment', {'name': 'MarketAnalysis.evaluate_sentiment', 'description': '根据历史数据、政策分析和实时交易量评估市场情绪。', 'required_parameters': [{'name': 'historical_data', 'type': 'STRING', 'description': '历史数据来源，例如from_id_0。'}, {'name': 'policy_analysis', 'type': 'STRING', 'description': '政策分析来源，例如from_id_1。'}, {'name': 'real_time_volume', 'type': 'STRING', 'description': '实时交易量来源，例如from_id_2。'}], 'optional_parameters': [], 'return_data': [{'name': 'sentiment', 'description': '市场情绪评估结果。'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我想评估澳元兑美元汇率的市场情绪。首先，请获取澳元兑美元汇率在过去六个月内的每日价格数据。然后，获取澳大利亚央行政策对汇率的影响分析。接下来，获取澳元兑美元的实时交易量。最后，请分析这些数据以评估市场情绪。"
            }
        ]
    },
    "478": {
        "meta": {
            "prompt_type": "json",
            "API_list": [
                "NewsAPI.get_recent_news",
                "IndustryDataAPI.get_supply_chain_data",
                "CaseStudyAPI.get_company_case_studies",
                "StrategyAnalysisAPI.analyze_strategy",
                "RecommendationAPI.provide_recommendations"
            ]
        },
        "ground_truth": [
            {
                "id": 0,
                "prev": [],
                "name": "NewsAPI.get_recent_news",
                "args": {
                    "keywords": "supply chain collaboration",
                    "time_range": "1 year"
                }
            },
            {
                "id": 1,
                "prev": [
                    0
                ],
                "name": "IndustryDataAPI.get_supply_chain_data",
                "args": {
                    "sectors": [
                        "Manufacturing",
                        "Services"
                    ]
                }
            },
            {
                "id": 2,
                "prev": [
                    1
                ],
                "name": "CaseStudyAPI.get_company_case_studies",
                "args": {
                    "companies": [
                        "Apple",
                        "Walmart",
                        "Amazon"
                    ]
                }
            },
            {
                "id": 3,
                "prev": [
                    2
                ],
                "name": "StrategyAnalysisAPI.analyze_strategy",
                "args": {
                    "case_studies": "Apple, Walmart, Amazon"
                }
            },
            {
                "id": 4,
                "prev": [
                    3
                ],
                "name": "RecommendationAPI.provide_recommendations",
                "args": {}
            },
            {
                "id": 5,
                "prev": [
                    4
                ],
                "name": "FinishAction",
                "args": {}
            }
        ],
        "origin_prompt": [
            {
                "role": "system",
                "content": "你能够调用以下的API:\n[['NewsAPI.get_recent_news', {'name': 'NewsAPI.get_recent_news', 'description': 'Get recent news articles based on specified keywords and time range.', 'required_parameters': [{'name': 'keywords', 'type': 'STRING', 'description': 'Keywords to search for in news articles.'}, {'name': 'time_range', 'type': 'STRING', 'description': 'Time range for the news articles, e.g., 1 year.'}], 'optional_parameters': [], 'return_data': [{'name': 'articles', 'description': 'List of news articles with title, summary, and source.'}]}], ['IndustryDataAPI.get_supply_chain_data', {'name': 'IndustryDataAPI.get_supply_chain_data', 'description': 'Get supply chain collaboration data for specified sectors.', 'required_parameters': [{'name': 'sectors', 'type': 'LIST', 'description': 'List of sectors to retrieve data for, e.g., Manufacturing, Services.'}], 'optional_parameters': [], 'return_data': [{'name': 'data', 'description': 'Supply chain collaboration data for the specified sectors.'}]}], ['CaseStudyAPI.get_company_case_studies', {'name': 'CaseStudyAPI.get_company_case_studies', 'description': 'Get case studies of supply chain collaboration for specified companies.', 'required_parameters': [{'name': 'companies', 'type': 'LIST', 'description': 'List of companies to retrieve case studies for.'}], 'optional_parameters': [], 'return_data': [{'name': 'case_studies', 'description': 'List of case studies with details on collaboration strategies.'}]}], ['StrategyAnalysisAPI.analyze_strategy', {'name': 'StrategyAnalysisAPI.analyze_strategy', 'description': 'Analyze the supply chain collaboration strategies based on provided case studies.', 'required_parameters': [{'name': 'case_studies', 'type': 'STRING', 'description': 'Comma-separated list of case studies to analyze.'}], 'optional_parameters': [], 'return_data': [{'name': 'analysis', 'description': 'Analysis of the collaboration strategies.'}]}], ['RecommendationAPI.provide_recommendations', {'name': 'RecommendationAPI.provide_recommendations', 'description': 'Provide recommendations for improving supply chain collaboration in the实体经济.', 'required_parameters': [], 'optional_parameters': [], 'return_data': [{'name': 'recommendations', 'description': 'List of recommendations for improving collaboration.'}]}]]\n请生成一个解决用户问题的计划，计划应该是一个行为列表，每个行为的格式如下:\n\n[{\n    // 动作的ID\n    \"id\": number;\n    // 动作要调用的API名称\n    \"name\": string;\n    // 当前API的参数输入(JSON格式)\n    \"args\": \"str(Record<string, any>)\";\n}, ...\n]\n\n你可以在计划中想象参数的值，这些指令将按顺序执行。\n例如，如果你想调用 `api1` 并传入 `arg1` 和 `arg2`，你可以写下面的计划:\n\n[{\n    \"id\": 0,\n    \"name\": \"api1\",\n    \"args\": \"{'arg1': 'value1', 'arg2': 'value2', ...}\",\n}, ...\n]\n\n这些参数将在执行时被替换为真实的值。请注意，参数应该是一个字符串，而不是一个字典。\n请在字典的参数中使用 ''，在其他地方使用 \"\"，不要打印值为 None 或 null 的参数。\n\n你应该只生成一个 JSON 格式的计划列表。列表应该是完整的计划列表，不要有 `...`。\n不要生成任何解释 JSON 的文本。\n"
            },
            {
                "role": "user",
                "content": "我需要了解实体经济的供应链协同情况。首先，获取最近一年的供应链协同新闻。接着，提供制造业和服务业的供应链协同数据。然后，请获取一些知名实体企业的供应链协同案例，并分析其协同策略。最后，提供一些关于如何在实体经济中进行供应链协同的建议。"
            }
        ]
    }
}